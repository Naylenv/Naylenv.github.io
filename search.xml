<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++基于getline的split实现</title>
      <link href="/2021/05/10/c-%E5%9F%BA%E4%BA%8Egetline%E7%9A%84splite%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/05/10/c-%E5%9F%BA%E4%BA%8Egetline%E7%9A%84splite%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>C++ 作为老大哥竟然一直不支持 split ，在看程设模拟的时候发现了可以通过 getline 优雅的实现 split。</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> string&amp; s, <span class="keyword">char</span> c)</span> </span>&#123;  <span class="comment">//分隔文件名</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(ss, tmp, c)) res.<span class="built_in">push_back</span>(tmp);  <span class="comment">//res保存整体</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// std::vector&lt;std::string&gt; split(const std::string&amp; line, char c) &#123;</span></span><br><span class="line"><span class="comment">//     std::stringstream stm(line);</span></span><br><span class="line"><span class="comment">//     std::vector&lt;std::string&gt; ans;</span></span><br><span class="line"><span class="comment">//     std::string tmp;</span></span><br><span class="line"><span class="comment">//     while (std::getline(stm, tmp, c)) ans.push_back(tmp);</span></span><br><span class="line"><span class="comment">//     return ans;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cout.tie(NULL);</span></span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">        vector&lt;string&gt; V = <span class="built_in">split</span>(s, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        cout &lt;&lt; V.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; it : V) &#123;</span><br><span class="line">            cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="input"><a class="markdownIt-Anchor" href="#input"></a> input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a/bb/cc</span><br><span class="line">a/bb/cc/</span><br><span class="line">a/bb/cc-c//c</span><br></pre></td></tr></table></figure><h2 id="output"><a class="markdownIt-Anchor" href="#output"></a> output</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 a bb cc </span><br><span class="line">3 a bb cc </span><br><span class="line">5 a bb cc-c  c </span><br></pre></td></tr></table></figure><h1 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h1><p><code>basic_istream&amp; getline( char_type* s, std::streamsize count, char_type delim );</code></p><p>从流释出字符，直至<strong>行尾</strong>或<strong>指定的分隔符</strong> <code>delim</code> 。</p><p>参考链接：</p><p><a href="https://zh.cppreference.com/w/cpp/io/basic_istream/getline">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在64位Linux环境中运行Nachos3.4</title>
      <link href="/2021/03/31/%E5%9C%A864%E4%BD%8DLinux%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%BF%90%E8%A1%8CNachos3-4/"/>
      <url>/2021/03/31/%E5%9C%A864%E4%BD%8DLinux%E7%8E%AF%E5%A2%83%E4%B8%AD%E8%BF%90%E8%A1%8CNachos3-4/</url>
      
        <content type="html"><![CDATA[<h1 id="操作过程"><a class="markdownIt-Anchor" href="#操作过程"></a> 操作过程</h1><p>操作过程如下（以64位Ubuntu为例）:</p><h2 id="检查系统是否支持多架构"><a class="markdownIt-Anchor" href="#检查系统是否支持多架构"></a> 检查系统是否支持多架构</h2><h3 id="1-确认主机系统为64位架构的内核"><a class="markdownIt-Anchor" href="#1-确认主机系统为64位架构的内核"></a> (1) 确认主机系统为64位架构的内核</h3><p>在命令终端中运行 <code>dpkg--print-architecture</code>,应该输出amd64</p><h3 id="2-确认系统多架构功能已经打开以支持1386"><a class="markdownIt-Anchor" href="#2-确认系统多架构功能已经打开以支持1386"></a> (2) 确认系统多架构功能已经打开，以支持1386</h3><p>在命令终端中运行 <code>dpkg--print-foreign-architectures</code>,应该输出i386</p><h3 id="如果2中检测到多架构功能尚未打开则使用下述命令安装"><a class="markdownIt-Anchor" href="#如果2中检测到多架构功能尚未打开则使用下述命令安装"></a> 如果(2)中检测到多架构功能尚未打开，则使用下述命令安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg--add-architecture i386</span><br></pre></td></tr></table></figure><h2 id="安装32位编译环境与支持库"><a class="markdownIt-Anchor" href="#安装32位编译环境与支持库"></a> 安装32位编译环境与支持库</h2><h3 id="1-检查gcc与g是否已经安装如果尚未安装使用如下命令安装它们"><a class="markdownIt-Anchor" href="#1-检查gcc与g是否已经安装如果尚未安装使用如下命令安装它们"></a> (1) 检查gcc与g++是否已经安装，如果尚未安装，使用如下命令安装它们。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc g++</span><br></pre></td></tr></table></figure><p>(2)安装32位编译环境与支持库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential g++-multilib gcc-multilib</span><br></pre></td></tr></table></figure><h2 id="修改nachos"><a class="markdownIt-Anchor" href="#修改nachos"></a> 修改Nachos</h2><h3 id="1-修改code目录下的makefiledep文件"><a class="markdownIt-Anchor" href="#1-修改code目录下的makefiledep文件"></a> (1) 修改code目录下的Makefile.dep文件</h3><p>在C++的编译器CC与链接器LD后追加<code>-m32</code>,在汇编编译器AS后追加<code>--32</code>,修改后的内容如下所示：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifndef</span> MAKEFILE_DEP</span><br><span class="line"><span class="keyword">define</span> MAKEFILE_DEP</span><br><span class="line">yes</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># These definitions may change as the software is updated.</span></span><br><span class="line"><span class="comment"># Some of them are also system dependent</span></span><br><span class="line">CPP=/lib/cpp</span><br><span class="line">CC = g++ -m32</span><br><span class="line">LD = g++ -m32</span><br><span class="line">AS = as --32</span><br><span class="line"></span><br><span class="line">uname = <span class="variable">$(<span class="built_in">shell</span> uname)</span></span><br><span class="line"><span class="variable">$(<span class="built_in">warning</span> <span class="variable">$(uname)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="2-修改codebincoffh"><a class="markdownIt-Anchor" href="#2-修改codebincoffh"></a> (2) 修改code/bin/coff.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* coff.h</span></span><br><span class="line"><span class="comment"> *   Data structures that describe the MIPS COFF format.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> HOST_ALPHA<span class="comment">/* Needed because of gcc uses 64 bit long  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _long int<span class="comment">/* integers on the DEC ALPHA architecture. */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _long int      <span class="comment">// 修改为 #define _long int</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>文件<code>code/bin/coff.h</code>中的几条语句如下所示：<br />在32位环境中，宏命令<code>#define _longlong</code>将<code>_long</code>定义为<code>long</code>,系统为<code>long</code>类型数据分配4字节存储空间，因此结构<code>filehdr</code>的大小为20字节，而在64位系统中，由于数据类型<code>long</code>需要8字节存储空间，导致<code>filehdr</code>占用了40字节。而Nachos中要求<code>filehdr</code>大小必须为20字节，因此需要将<code>code/bin/coff.h</code>中的<code>long</code>改成<code>int</code>,即将<code>#define _long long</code>修改为<code>#define _long int</code>。</p><h1 id="64位下的一些问题"><a class="markdownIt-Anchor" href="#64位下的一些问题"></a> 64位下的一些问题</h1><p>由于使用的是64位操作系统。编译器版本要高于gcc3.4。会出现一些c++版本的问题</p><h2 id="问题1warning-iso-c-forbids-converting-a-string-constant-to-char-wwrite-strings"><a class="markdownIt-Anchor" href="#问题1warning-iso-c-forbids-converting-a-string-constant-to-char-wwrite-strings"></a> 问题1：warning: ISO C++ forbids converting a string constant to ‘char*’ [-Wwrite-strings]</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331010106123.png" alt="img" /></p><p>这是由于c<ins>规范中认为<code>&quot;aaa&quot;</code>是string类型，，c</ins>03前<code>string</code> to <code>char const *</code>会发生隐式转换。从c++11开始，该规则删除。</p><p>对类似字符串做如下更改：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331010305677.png" alt="img" /></p><p>参考链接：<a href="https://stackoverflow.com/questions/20944784/why-is-conversion-from-string-constant-to-char-valid-in-c-but-invalid-in-c">Why is conversion from string constant to ‘char*’ valid in C but invalid in C++</a></p><h2 id="问题2warning-deleting-void-is-undefined-wdelete-incomplete"><a class="markdownIt-Anchor" href="#问题2warning-deleting-void-is-undefined-wdelete-incomplete"></a> 问题2：warning: deleting ‘void*’ is undefined [-Wdelete-incomplete]</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331010427207.png" alt="" /></p><p>这是由于在现代c<ins>中，删除void *指针是一种错误格式(也就是我们通常所说的“编译错误”)。在c</ins> 98中情况就不同了。删除void *类型的空指针是NOP，删除void *类型的非空指针是UB。</p><p>解决方法：注释掉</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331011346542.png" alt="" /></p><p>参考链接：<a href="https://stackoverflow.com/questions/50843120/why-deleting-void-is-ub-rather-than-compilation-error">Why deleting void* is UB rather than compilation error?</a></p><h2 id="问题3cc1plus-note-obsolete-option-i-used-please-use-iquote-instead"><a class="markdownIt-Anchor" href="#问题3cc1plus-note-obsolete-option-i-used-please-use-iquote-instead"></a> 问题3：cc1plus: note: obsolete option ‘-I-’ used, please use ‘-iquote’ instead</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331010654999.png" alt="img" /></p><p><code>-iquote</code>是在GCC 4.0.0 中添加的。GCC开发人员在90年代中期错误的取消了<code>-I-</code>。但<code>-iquote</code>并不能完全代替<code>-I-</code>（没有很好的解决方法）。</p><p>参考链接：<a href="https://github.com/att/ast/issues/20">cc1: note: obsolete option -I- used, please use -iquote instead #20</a></p><h2 id="问题4-warning-multi-line-comment-wcomment"><a class="markdownIt-Anchor" href="#问题4-warning-multi-line-comment-wcomment"></a> 问题4： warning: multi-line comment [-Wcomment]</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20210331103552047.png" alt="image-20210331103552047" /></p><p>在C/C++语言中，<br />在对源文件做预处理的时候，有两条基本原则：</p><ol><li><p>凡是以//开头的为单行注释</p></li><li><p>凡是以\结尾的代表此行尚未结束</p></li></ol><p>于是预处理器在处理的时候会先按第二条规则，看每行的末尾的那个字符是不是”\”,是的话，就下一行接到本行。然后把所有以//开头的注释和/* */的块注释去掉。</p><p>但是存在一个问题，对于big5中的汉字而言，其第一个字节的编码范围是0xA1 - 0xFE，第二个字节是0×40 -0xFE。而’'的ASCII码是0×5c.这就意味这，凡是以big5编码的文件，如果gcc没有正确的认为它源文件的编码是big5,那么就可能出现因为单行注释末尾是汉字，而把下行的代码吃掉的情况。这样是很危险的，但是gcc会给出一个警告：”warning: multi-linecomment In file”</p><p>解决方法，改用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/lyd0813/article/details/83023918">c语言中的注释，multi-line comment</a></p><p><a href="https://stackoverflow.com/questions/19105350/what-is-the-meaning-of-multi-line-comment-warnings-in-c">What is the meaning of multi-line comment warnings in C?</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>illumination, shading, rendering的区别</title>
      <link href="/2021/01/01/illumination-shading-rendering%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/01/01/illumination-shading-rendering%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="答案"><a class="markdownIt-Anchor" href="#答案"></a> 答案</h1><ul><li>Illumination 理解成光照的情况，是输入的量；</li><li>Shading 是着色，计算一个点在光照之后看上去长什么样；</li><li>Rendering 是整个渲染过程，包括解 light transport 用到的各种光线追踪，也包括之后的着色过程。</li></ul><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="http://games-cn.org/forums/topic/illumination-shading-renderingdequbie/">games101</a></p>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NTFS, FAT32和exFAT文件系统有什么区别？</title>
      <link href="/2020/12/17/NTFS-FAT32%E5%92%8CexFAT%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
      <url>/2020/12/17/NTFS-FAT32%E5%92%8CexFAT%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>NTFS是目前Windows系统中一种现代文件系统，目前使用最广泛，内置的硬盘大多数都是NTFS格式。FAT32是一种相对老旧的文件系统，不能像NTFS格式支持很多现代文件格式的属性，但对于不同系统平台具有良好的兼容性，可以在Linux、Mac或Android系统平台上通用。exFAT是FAT32文件格式的替代品，很多设备和操作系统都支持该文件系统，但是目前用的不多。</p><hr /><p>1、FAT32文件格式是一种通用格式，任何USB存储设备都会预装该文件系统，可以在任何操作系统平台上使用。最主要的缺陷是只支持最大单文件大小容量为4GB（<strong>索引节点表的问题</strong>），因此日常使用没有问题，只有在传输大文件时才会显现出缺点。</p><p>2、exFAT文件是微软自家创建的用来取代FAT32文件格式的新型文件格式，它最大可以支持1EB的文件大小，非常适合用来存储大容量文件，还可以在Mac和Windows操作系统上通用。虽然是微软的技术，苹果批准在系统中使用该文件格式，因此在Mac系统中格式化存储设备时会出现exFAT文件格式选项。最大的缺点是没有文件日志功能，这样就不能记录磁盘上文件的修改记录。</p><p>3、NTFS是微软为硬盘或固态硬盘（SSD）创建的默认新型文件系统，NTFS的含义是 New Technology File System，它基层了所有文件系统的优点：日志功能、无文件大小限制、支持文件压缩和长文件名、服务器文件管理权限等。最大的缺点是Mac系统只能读取NTFS文件但没有权限写入，需要借助第三方工具才能实现。因此跨平台的功能非常差。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁的避免和预防的区别？</title>
      <link href="/2020/12/17/%E6%AD%BB%E9%94%81%E7%9A%84%E9%81%BF%E5%85%8D%E5%92%8C%E9%A2%84%E9%98%B2%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
      <url>/2020/12/17/%E6%AD%BB%E9%94%81%E7%9A%84%E9%81%BF%E5%85%8D%E5%92%8C%E9%A2%84%E9%98%B2%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="死锁避免"><a class="markdownIt-Anchor" href="#死锁避免"></a> 死锁避免</h1><p><strong>死锁避免的基本思想:</strong></p><ul><li><strong>系统对进程发出每一个系统能够满足的资源申请进行动态检查</strong></li><li>并根据检查结果决定是否分配资源</li><li><strong>如果分配后系统可能发生死锁,则不予分配,否则予以分配。</strong></li><li>这是一种保证系统不进入死锁状态的动态策略。</li></ul><h1 id="死锁预防"><a class="markdownIt-Anchor" href="#死锁预防"></a> 死锁预防</h1><p><strong>我们可以通过破坏死锁产生的4个必要条件来预防死锁</strong>，由于资源互斥是资源使用的固有特性是无法改变的。</p><ul><li><strong>破坏&quot;不可剥夺&quot;条件</strong>：<strong>一个进程不能获得所需要的全部资源时便处于等待状态，等待期间他占有的资源将被隐式的释放重新加入到系统的资源列表中，可以被其他的进程使用</strong>，而等待的进程只有重新获得自己原有的资源以及新申请的资源才可以重新启动，执行。</li><li><strong>破坏&quot;请求与保持条件&quot;</strong>：第一种方法静态分配即<strong>每个进程在开始执行时就申请他所需要的全部资源</strong>。第二种是动态分配即每个进程在申请所需要的资源时他本身不占用系统资源。</li><li><strong>破坏&quot;循环等待&quot;条件</strong>：<strong>采用资源有序分配</strong>。其基本思想是将系统中的所有资源顺序编号，将紧缺的，稀少的采用较大的编号，在申请资源时必须按照编号的顺序进行，一个进程只有获得较小编号的进程才能申请较大编号的进程。</li></ul><h1 id="更本质的区别"><a class="markdownIt-Anchor" href="#更本质的区别"></a> 更本质的区别：</h1><p>避免是操作系统对进程和进程之间的（对用户程序不加限制）。</p><p>预防是操作系统对用户程序限制的（限制其申请资源）。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 配置速览定义</title>
      <link href="/2020/12/02/VSCode-%E9%85%8D%E7%BD%AE%E9%80%9F%E8%A7%88%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/12/02/VSCode-%E9%85%8D%E7%BD%AE%E9%80%9F%E8%A7%88%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>VSCode 按住<code>ctrl</code> 再用鼠标左键点击变量会出现它的定义，点击函数会实现跳转。但是我不想让它跳转到函数而是像 Visual Studio 那样出现速览定义弹窗</p><h1 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h1><p>在设置中勾选此项<br /><img src="https://img-blog.csdnimg.cn/2020120220512965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p><h1 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h1><p><img src="https://img-blog.csdnimg.cn/20201202205216795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" /></p>]]></content>
      
      
      <categories>
          
          <category> VSCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVM目标函数的一些理解</title>
      <link href="/2020/11/27/SVM%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2020/11/27/SVM%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>学习SVM的对目标函数有些疑问，做了一些笔记。感谢ZKX同学提供的帮助，（PS：这篇博客可能会继续更新</p><h1 id="svm"><a class="markdownIt-Anchor" href="#svm"></a> SVM</h1><p>我们的问题是设定一个超平面，去最大化样本点和这个超平面的距离，这个距离我们称之为Margin（间隔）。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mo>=</mo><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>i</mi></munder><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\gamma=\min _{i} \gamma^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.665664em;vertical-align:-0.727664em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="https://img-blog.csdnimg.cn/20201127212016190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70#pic_center" alt="" /></p><h2 id="函数间隔-functional-margin"><a class="markdownIt-Anchor" href="#函数间隔-functional-margin"></a> 函数间隔 Functional margin：</h2><p>这一点老师的PPT上并没有给出来，所以可能学习的时候有些混淆。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mover accent="true"><mi>γ</mi><mo>^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\hat{\gamma}^{(i)}=y^{(i)}\left(\omega^{T} x^{(i)}+b\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span></span></p><p>这里我们扩大<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\omega,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span> n 倍数会改变<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>γ</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{\gamma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>。因此我们引入几何间隔。</p><h2 id="几何间隔-geometric-margin"><a class="markdownIt-Anchor" href="#几何间隔-geometric-margin"></a> 几何间隔 Geometric margin ：</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mi>ω</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mfrac><mi>b</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\gamma^{(i)}=y^{(i)}\left(\left(\frac{\omega}{\|\omega\|}\right)^{T} x^{(i)}+\frac{b}{\|\omega\|}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.681231em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span></span></span></span></span></p><p>几何间隔具有缩放不变性：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mrow><mi>c</mi><mo>⋅</mo><mi>ω</mi></mrow><mrow><mi mathvariant="normal">∥</mi><mi>c</mi><mo>⋅</mo><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mfrac><mrow><mi>c</mi><mo>⋅</mo><mi>b</mi></mrow><mrow><mi mathvariant="normal">∥</mi><mi>c</mi><mo>⋅</mo><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mi>ω</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mfrac><mi>b</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\gamma^{(i)} &amp;=y^{(i)}\left(\left(\frac{c \cdot \omega}{\|c \cdot \omega\|}\right)^{T} x^{(i)}+\frac{c \cdot b}{\|c \cdot \omega\|}\right) \\&amp;=y^{(i)}\left(\left(\frac{\omega}{\|\omega\|}\right)^{T} x^{(i)}+\frac{b}{\|\omega\|}\right)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.600059999999999em;vertical-align:-3.0500299999999996em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5500299999999996em;"><span style="top:-5.55003em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.0500299999999996em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5500299999999996em;"><span style="top:-5.55003em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.12145em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.681231em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.681231em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.0500299999999996em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>有了这个性质我们可以对求解目标进行限制，简化优化问题。</p><p>这里要注意：如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>ω</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|\omega|=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,那么函数间隔和几何间隔相等。如果超平面参数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>成比例地改变（超平面没有改变）,函数间隔也按此比例改变，而几何间隔不变。</p><h1 id="svm的目标问题"><a class="markdownIt-Anchor" href="#svm的目标问题"></a> SVM的目标问题：</h1><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow></munder><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>i</mi></munder><mrow><mo fence="true">{</mo><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo fence="true">}</mo></mrow></mrow><annotation encoding="application/x-tex">\max _{\omega, b} \min _{i}\left\{\gamma^{(i)}\right\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.038216em;vertical-align:-0.8882159999999999em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span style="top:-2.0478920000000005em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">max</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882159999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">{</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">}</span></span></span></span></span></span></span></p><p><strong>目标问题</strong>可以转化为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>γ</mi><mo separator="true">,</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>γ</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>s.t.</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>≥</mo><mi>γ</mi><mo separator="true">,</mo><mspace width="1em"/><mi mathvariant="normal">∀</mi><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{ll}\max _{\gamma, \omega, b} &amp; \gamma\\\text {s.t.} &amp; \gamma^{(i)} \geq \gamma, \quad \forall i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4480000000000004em;vertical-align:-0.9740000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">s.t.</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p>其中，间隔为函数间隔：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>γ</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>=</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mi>ω</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mfrac><mi>b</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\gamma^{(i)}=y^{(i)}\left(\left(\frac{\omega}{\|\omega\|}\right)^{T} x^{(i)}+\frac{b}{\|\omega\|}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.13244em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.681231em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span></span></span></span></span></p><p>因此<strong>目标问题</strong>转化为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>γ</mi><mo separator="true">,</mo><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>γ</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>s.t.</mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>≥</mo><mi>γ</mi><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi><mtext> </mtext><mspace width="1em"/><mi mathvariant="normal">∀</mi><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{ll}\max _{\gamma, \omega, b} &amp; \gamma\\\text {s.t.} &amp; y^{(i)}\left(\omega^{T} x^{(i)}+b\right) \geq \gamma\|\omega\| \ \quad \forall i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4480000000000004em;vertical-align:-0.9740000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05556em;">γ</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord">s.t.</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span><span class="mspace"> </span><span class="mspace" style="margin-right:1em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p>利用几何间隔不变性，一方面为了使优化目标更加简单。</p><p>另一方面有点类似于标准化的思想因为不同模型由于数据分布的原因,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>可能会大不相同（数据集1的分法和数据集2的分法结果的好坏因为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>比例的不同难以直观比较）。但是把他们的最小间隔都设置为1后，就有比较性了。同一个数据的不同超平面，也有了比较的方法</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>i</mi></munder><mrow><mo fence="true">{</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\min _{i}\left\{y^{(i)}\left(\omega^{T} x^{(i)}+b\right)\right\}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8776639999999998em;vertical-align:-0.727664em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">{</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">}</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>即令最小间隔为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\|\omega\|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∥</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mord mtight">∥</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mo>=</mo><munder><mo><mi>min</mi><mo>⁡</mo></mo><mi>i</mi></munder><mrow><mo fence="true">{</mo><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mrow><mo fence="true">(</mo><mfrac><mi>ω</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mfrac><mi>b</mi><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\gamma=\min _{i}\left\{y^{(i)}\left(\left(\frac{\omega}{\|\omega\|}\right)^{T} x^{(i)}+\frac{b}{\|\omega\|}\right)\right\}=\frac{1}{\|\omega\|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.66786em;"><span style="top:-2.072336em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.727664em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.681231em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.25744em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>因此<strong>目标问题</strong>变为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext> s.t. </mtext></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>≥</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{ll}\max _{\omega, b} &amp; 1 /\|\omega\| \\\text { s.t. } &amp; y^{(i)}\left(\omega^{T} x^{(i)}+b\right) \geq 1, \forall i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4480000000000004em;vertical-align:-0.9740000000000004em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> s.t. </span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.474em;"><span style="top:-3.634em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">/</span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord">∥</span></span></span><span style="top:-2.3859999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9740000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><p>又仅为最小化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><mi mathvariant="normal">∥</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\|\omega\|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.365108em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∥</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mord mtight">∥</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>等价于最大化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∥</mi><mi>ω</mi><msup><mi mathvariant="normal">∥</mi><mn>2</mn></msup><mo>=</mo><msup><mi>ω</mi><mi>T</mi></msup><mi>ω</mi></mrow><annotation encoding="application/x-tex">\|\omega\|^{2}=\omega^{T} \omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">∥</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span></span>（这样凑是为了满足二次规划形式）</p><p>最终目标函数即为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mi>ω</mi><mo separator="true">,</mo><mi>b</mi></mrow></msub><msup><mi>ω</mi><mi>T</mi></msup><mi>ω</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> s.t. </mtext><mspace width="1em"/><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mrow><mo fence="true">(</mo><msup><mi>ω</mi><mi>T</mi></msup><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>+</mo><mi>b</mi><mo fence="true">)</mo></mrow><mo>≥</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>i</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{array}{l}\min _{\omega, b} \omega^{T} \omega \\\text { s.t. } \quad y^{(i)}\left(\omega^{T} x^{(i)}+b\right) \geq 1, \forall i\end{array}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.449331em;vertical-align:-0.9746655000000002em;"></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4746654999999997em;"><span style="top:-3.6333344999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop">min</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span></span></span><span style="top:-2.3853344999999995em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord text"><span class="mord"> s.t. </span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9746655000000002em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span></span></span></span></span></p><h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1><p><a href="https://www.svm-tutorial.com/2015/06/svm-understanding-math-part-3/">SVM - Understanding the math - the optimal hyperplane</a></p><p><a href="https://funglee.github.io/ml/slides/Lecture6-SVM.pdf">Lecture 6: Support Vector Machine</a></p><p><a href="https://funglee.github.io/ml/ref/svmhao.pdf">从零构建支持向量机(SVM)</a></p><p><a href="https://zhuanlan.zhihu.com/p/106024205">svm函数的解释（转载）</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统、计算机网络、计算机组成原理中同步和异步的概念</title>
      <link href="/2020/11/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%AD%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/11/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%AD%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统中"><a class="markdownIt-Anchor" href="#操作系统中"></a> 操作系统中</h1><h2 id="同步"><a class="markdownIt-Anchor" href="#同步"></a> 同步</h2><p>在并发环境下，保持操作之间的偏序关系的行为。</p><p>进程同步是指多个进程中发生的事件存在某种时序关系，必须协同动作共同完成一个任务。简单来讲同步是一种协作关系。</p><p><strong>同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而等待、传递信息所产生的制约关系</strong></p><p>举几个例子：<br />当两个进程运行时，进程A需要获取进程B此时运行到某一步的运行结果或者信息，才能进行自己的下一步工作，这个时候就得等待进程B与自己通信（发送某一个消息或信号），进程A再继续执行。这种进程之间相互等待对方发送消息或信号的协作就叫做进程同步。或者工厂的流水线，每道工序都有自己特定的任务，前一道工序没有完成或不合格后一道工序就不能进行。再或者ABC三个进程分别负责输入、处理、输出数据，A必须先执行，B次之，最后C。</p><h2 id="异步"><a class="markdownIt-Anchor" href="#异步"></a> 异步</h2><p>异步性：是指进程以不可预知的速度向前推进。在多道程序环境下，进程是并发执行的，不同进程之间存在着不同的相互制约关系(一般是资源问题)。内存中的每个进程何时执行，何时暂停，以怎样的速度向前推进，程序总共需要多少时间才能完成等，都是不可预知的。</p><h2 id="互斥"><a class="markdownIt-Anchor" href="#互斥"></a> 互斥</h2><p>多个进程在运行过程中，都需要某一个资源时，它们便产生了竞争关系，它们可能竞争某一块内存空间，也可能竞争某一个IO设备。当一方获取资源时，其他进程只能在该进程释放资源之后 才能去访问该资源，这就是进程互斥。简单来说，互斥是一种竞争关系。<br />举例：假如多个进程同时申请一台打印机，而先申请打印机的一方先使用打印机，当它用完时在给其他进程使用。在一个进程使用打印机期间，其他进程对打印机的使用申请不予满足，这些进程必须等待。</p><h3 id="同步和异步"><a class="markdownIt-Anchor" href="#同步和异步"></a> 同步和异步</h3><p>在现代操作系统中，有并发性，共享性，虚拟性，不确定性四大基础特征。而程序并发活动的实现是异步（一个程序走走停停），并发控制的时候需要用到同步技术。</p><p>所以并发控制需要同步，并发的实现是异步，同步过多又会导致死锁。在并发领域有一句经典的话，并发执行的可串行化。那么并行是什么？并行才是真正的并发。并发只不过在占用时间片不同上实现的。</p><h1 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络：</h1><p>同步通信简单的说就是你在发送数据时候我必须同时接受。这个过程有精确的时钟控制。</p><p>而异步通信是你在发数据时候必须加上开始与结束符号，这样我才可以接受，异步通信没有时钟控制。因为没有了时钟的控制（额外硬件），所以成本低，设备简单，但是传输效率较低。（开始与结束符占了开销）。</p><h1 id="机组"><a class="markdownIt-Anchor" href="#机组"></a> 机组：</h1><p>同步与异步在I/O中指的是一种数据访问机制。</p><p>同步指的是主动请求后等待I/O，数据就绪后读写必须阻塞。</p><p>异步指的是主动请求后，可处理其他任务，等I/O完毕后通知。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h1><p>这三者的同步和异步相类似。只是操作系统中的同步和异步并不像相对关系。</p><p>操作系统中，同步是对于进程和进程而言。异步更像是宏观的看各个进程。</p><h2 id="同步-2"><a class="markdownIt-Anchor" href="#同步-2"></a> 同步</h2><ol><li>同步是阻塞模式；</li><li>同步是按顺序执行，执行完一个再执行下一个，需要等待，协调运行；</li></ol><h2 id="异步-2"><a class="markdownIt-Anchor" href="#异步-2"></a> 异步：</h2><ol><li>异步是非阻塞模式，无需等待；</li><li>异步是彼此独立，在等待某事件的过程中，继续做自己的事，不需要等待这一事件完成后再工作。线程是异步实现的一个方式。</li></ol><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://blog.csdn.net/qq_38289815/article/details/81012826">操作系统中的同步和异步</a><br /><a href="https://blog.51cto.com/thinklili/1742869">同步与异步到底是什么？？？</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django 返回相对路径和绝对路径</title>
      <link href="/2020/11/09/Django-%E8%BF%94%E5%9B%9E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/11/09/Django-%E8%BF%94%E5%9B%9E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%92%8C%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="imagefiled"><a class="markdownIt-Anchor" href="#imagefiled"></a> imagefiled</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_directory_path</span>(<span class="params">instance, filename</span>):</span></span><br><span class="line">    <span class="comment"># file will be uploaded to MEDIA_ROOT/user_&lt;id&gt;/&lt;filename&gt;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;user_&#123;0&#125;/&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(instance.user.<span class="built_in">id</span>, filename)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    image = models.FileField(upload_to=user_directory_path)</span><br></pre></td></tr></table></figure><ul><li><code>1image.url</code> 返回相对路径</li><li><code>image.path</code> 返回绝对路径</li></ul>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上使用Nginx + Gunicorn部署Django工程</title>
      <link href="/2020/11/09/%E5%9C%A8Linux%E4%B8%8A%E4%BD%BF%E7%94%A8Nginx-Gunicorn%E9%83%A8%E7%BD%B2Django%E5%B7%A5%E7%A8%8B/"/>
      <url>/2020/11/09/%E5%9C%A8Linux%E4%B8%8A%E4%BD%BF%E7%94%A8Nginx-Gunicorn%E9%83%A8%E7%BD%B2Django%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="tmux-start-django"><a class="markdownIt-Anchor" href="#tmux-start-django"></a> tmux + start django</h1><h2 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s session_name # 创建名为 session_name 的 tmux session</span><br><span class="line">tmux attach -t session_name # 重新回到叫做 session_name 的 tmux session</span><br><span class="line">tmux switch -t session_name #  切换到叫做 session_name 的 tmux session</span><br><span class="line">tmux list-sessions / tmux ls # 列出现有的所有 session</span><br><span class="line">tmux detach # 离开当前开启的 session</span><br><span class="line">tmux kill-server # 关闭所有 session</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctrl + b</span><br><span class="line">? 列出所有快捷键；按q返回</span><br><span class="line">d 脱离当前会话,可暂时返回Shell界面</span><br><span class="line">s 选择并切换会话；在同时开启了多个会话时使用</span><br><span class="line">D 选择要脱离的会话；在同时开启了多个会话时使用</span><br><span class="line">: 进入命令行模式；此时可输入支持的命令，例如 kill-server 关闭所有tmux会话</span><br><span class="line">[ 复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出</span><br><span class="line">] 进入粘贴模式，粘贴之前复制的内容，按q/Esc退出</span><br><span class="line">~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</span><br><span class="line">t 显示当前的时间</span><br><span class="line">ctrl + z 挂起当前会话</span><br></pre></td></tr></table></figure><h2 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status nginx</span><br></pre></td></tr></table></figure><h2 id="gunicorn-部署"><a class="markdownIt-Anchor" href="#gunicorn-部署"></a> gunicorn 部署</h2><h3 id="nginx-收集静态文件"><a class="markdownIt-Anchor" href="#nginx-收集静态文件"></a> nginx 收集静态文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">&#x27;static&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="gunicorn-部署-2"><a class="markdownIt-Anchor" href="#gunicorn-部署-2"></a> gunicorn 部署</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip  install gunicorn</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda run gunicorn darwinproject.wsgi -w 2 -k gthread -b 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>收集静态文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速创建一个Django项目并进行相应配置</title>
      <link href="/2020/11/09/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADjango%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/11/09/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AADjango%E9%A1%B9%E7%9B%AE%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="start-a-project"><a class="markdownIt-Anchor" href="#start-a-project"></a> start a project</h1><h2 id="django-基本命令"><a class="markdownIt-Anchor" href="#django-基本命令"></a> django 基本命令</h2><ul><li>输入以下命令新建一个django project</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject xxx</span><br></pre></td></tr></table></figure><ul><li>新建一个app</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><ul><li>创建超级用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -f db.sqlite3</span><br><span class="line">rm -r snippets/migrations</span><br><span class="line">python manage.py makemigrations snippets</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="msql"><a class="markdownIt-Anchor" href="#msql"></a> msql</h2><h3 id="windows-django20"><a class="markdownIt-Anchor" href="#windows-django20"></a> windows django2.0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector-python</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;mysql.connector.django&#x27;</span>,   <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_project&#x27;</span>,  <span class="comment"># 数据库名，先前创建的</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;lll&#x27;</span>,     <span class="comment"># 用户名，可以自己创建用户</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># mysql服务所在的主机ip</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,       <span class="comment"># mysql服务端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="windows-django30"><a class="markdownIt-Anchor" href="#windows-django30"></a> windows django3.0</h3><p>把mysqlclient 更新到最新版，用Linux的配置就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysqlclient==1.4.6 </span><br></pre></td></tr></table></figure><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> linux</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,   <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;darwin&#x27;</span>,  <span class="comment"># 数据库名，先前创建的</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;lll&#x27;</span>,     <span class="comment"># 用户名，可以自己创建用户</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># mysql服务所在的主机ip</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,       <span class="comment"># mysql服务端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些方法"><a class="markdownIt-Anchor" href="#一些方法"></a> 一些方法</h3><ul><li><code>.is_valid()</code></li></ul><h2 id="rest-framework"><a class="markdownIt-Anchor" href="#rest-framework"></a> rest framework</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       # Markdown support for the browsable API.</span><br><span class="line">pip install django-filter  # Filtering support</span><br></pre></td></tr></table></figure><p>web api 框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超链接关系 很好的RESTful设计 -- HyperlinkedModelSerializer</span><br></pre></td></tr></table></figure><h2 id="分页器"><a class="markdownIt-Anchor" href="#分页器"></a> 分页器</h2><p>分页器允许你控制每页返回的数据条数。添加以下配置到 <code>tutorial/settings.py</code> 中使之生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    &#x27;DEFAULT_PAGINATION_CLASS&#x27;: &#x27;rest_framework.pagination.PageNumberPagination&#x27;,</span><br><span class="line">    &#x27;PAGE_SIZE&#x27;: 10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生如下效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;count&quot;: 2,</span><br><span class="line">    &quot;next&quot;: null,</span><br><span class="line">    &quot;previous&quot;: null,</span><br><span class="line">    &quot;results&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;email&quot;: &quot;admin@example.com&quot;,</span><br><span class="line">            &quot;groups&quot;: [],</span><br><span class="line">            &quot;url&quot;: &quot;http://127.0.0.1:8000/users/1/&quot;,</span><br><span class="line">            &quot;username&quot;: &quot;admin&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;email&quot;: &quot;tom@example.com&quot;,</span><br><span class="line">            &quot;groups&quot;: [                ],</span><br><span class="line">            &quot;url&quot;: &quot;http://127.0.0.1:8000/users/2/&quot;,</span><br><span class="line">            &quot;username&quot;: &quot;tom&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xadmin"><a class="markdownIt-Anchor" href="#xadmin"></a> xadmin</h2><p>替换掉admin的一种选择</p><h2 id="mysql"><a class="markdownIt-Anchor" href="#mysql"></a> Mysql</h2><h3 id="进入数据库"><a class="markdownIt-Anchor" href="#进入数据库"></a> 进入数据库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#1 创建数据库weixx</span></span></span><br><span class="line">CREATE DATABASE darwin CHARACTER SET utf8;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#2 创建用户wxx(密码123456) mysql 5.7</span></span></span><br><span class="line">并允许wxx用户可以从任意机器上登入mysql的weixx数据库</span><br><span class="line">    GRANT ALL PRIVILEGES ON darwin.* TO anadem@&quot;%&quot; IDENTIFIED BY &quot;123456&quot;; </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># mysql 8.0</span></span></span><br><span class="line">create user &#x27;anadem&#x27;@&#x27;%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line">grant all privileges on *.* to &#x27;anadem&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="数据库迁移"><a class="markdownIt-Anchor" href="#数据库迁移"></a> 数据库迁移</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py dumpdata &gt; data.json</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py loaddata data.json</span><br></pre></td></tr></table></figure><h2 id="跨域"><a class="markdownIt-Anchor" href="#跨域"></a> 跨域</h2><p>百度吧，挺多的。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是光栅化？</title>
      <link href="/2020/11/02/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%89%E6%A0%85%E5%8C%96%EF%BC%9F/"/>
      <url>/2020/11/02/%E4%BB%80%E4%B9%88%E6%98%AF%E5%85%89%E6%A0%85%E5%8C%96%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="光栅化"><a class="markdownIt-Anchor" href="#光栅化"></a> 光栅化</h1><p>首先，光栅化（Rasterize/rasteriztion）。这个词儿Adobe官方翻译成栅格化或者像素化。没错，就是把矢量图形转化成像素点儿的过程。我们屏幕上显示的画面都是由像素组成，而三维物体都是点线面构成的。要让点线面，变成能在屏幕上显示的像素，就需要Rasterize这个过程。就是从矢量的点线面的描述，变成像素的描述。如下图，这是一个放大了1200%的屏幕，前面是告诉计算机我有一个圆形，后面就是计算机把圆形转换成可以显示的像素点。这个过程就是Rasterize。</p><h1 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h1><p><a href="https://www.zhihu.com/question/29163054/answer/46695506">如何理解 OpenGL 中着色器、渲染管线、光栅化等概念？ - Benjamin Hsu的回答 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短寻道时间优先算法（SSTF）</title>
      <link href="/2020/10/22/%E6%9C%80%E7%9F%AD%E5%AF%BB%E9%81%93%E6%97%B6%E9%97%B4%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95%EF%BC%88SSTF%EF%BC%89/"/>
      <url>/2020/10/22/%E6%9C%80%E7%9F%AD%E5%AF%BB%E9%81%93%E6%97%B6%E9%97%B4%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95%EF%BC%88SSTF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="sstf问题描述"><a class="markdownIt-Anchor" href="#sstf问题描述"></a> SSTF问题描述：</h1><p>SSTF算法选择调度处理的磁道是与当前磁头所在磁道距离最近的磁道，以使每次的寻找时间最短。当然，总是选择最小寻找时间并不能保证平均寻找时间最小，但是能提供比FCFS算法更好的性能。这种算法会产生“饥饿”现象。</p><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><p>改善了磁盘平均服务时间。</p><h2 id="缺点"><a class="markdownIt-Anchor" href="#缺点"></a> 缺点</h2><p>优先级低的进程会发生“饥饿”现象。因为新进程请求到达，且其所要访问的磁道与磁头当前所在的磁道距离较近，必先优先满足。</p><h2 id="思想"><a class="markdownIt-Anchor" href="#思想"></a> 思想：</h2><p>本算法是对输入的磁道首先进行非递减排序，然后判断当前磁头所在的磁道是否在将要寻找的磁道中，分别进行最短寻道时间计算。（如下图示，表示SSTF示意图）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c6cfa3e29a043259e598dbd5c36eaec2.png" alt="" /></p><h1 id="不是最优的例子"><a class="markdownIt-Anchor" href="#不是最优的例子"></a> 不是最优的例子：</h1><p>若干个等待访问磁盘者依次要访问的磁道为 100，142，150，155，170，300，当前磁头位于 150 号柱面，若用最短寻道时间优先磁盘调度算法，则访问序列为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>150</mn><mo separator="true">,</mo><mn>155</mn><mo separator="true">,</mo><mn>142</mn><mo separator="true">,</mo><mn>170</mn><mo separator="true">,</mo><mn>100</mn><mo separator="true">,</mo><mn>300</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[150,155,142,170,100,300]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">]</span></span></span></span></p><hr /><p>根据最短寻道时间优先磁盘调度算法，每次在寻找下一个磁道时，都要选择离自己最近的，所以当前磁头位于40号，下一道选择与40绝对值最小的，即40，再下一道选择43，差值为3，以此类推，最后的访问序列应该为，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>150</mn><mo separator="true">,</mo><mn>155</mn><mo separator="true">,</mo><mn>142</mn><mo separator="true">,</mo><mn>170</mn><mo separator="true">,</mo><mn>100</mn><mo separator="true">,</mo><mn>300</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[150,155,142,170,100,300]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">5</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">7</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">]</span></span></span></span><br />hexo</p><p>SSTF算法选择调度处理的磁道是与当前磁头所在磁道距离最近的磁道，以使每次的寻找时间最短。当然，总是选择最小寻找时间并不能保证平均寻找时间最小，但是能提供比FCFS算法更好的性能。这种算法会产生“饥饿”现象。</p><h2 id="简单想"><a class="markdownIt-Anchor" href="#简单想"></a> 简单想：</h2><p>可以想象这样一个序列，磁头目前在最中间。</p><ol><li>第一次寻道，离磁头最近磁道的在中点的左边，磁头移动到该位置。</li><li>第二次寻道，离磁头最近磁道的在中点的右边，磁头移动到该位置。</li><li>第三次寻道，离磁头最近磁道的在中点的左边，磁头移动到该位置。</li><li>…</li></ol><p>如此，磁头一直在中点往复，显然不如寻完一侧的磁道再寻另一侧更优。<br /><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20201022165317231.png" style="zoom: 30%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图形学 glut 一些库的理解（持续更新）</title>
      <link href="/2020/10/12/%E5%9B%BE%E5%BD%A2%E5%AD%A6-glut-%E4%B8%80%E4%BA%9B%E5%BA%93%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
      <url>/2020/10/12/%E5%9B%BE%E5%BD%A2%E5%AD%A6-glut-%E4%B8%80%E4%BA%9B%E5%BA%93%E7%9A%84%E7%90%86%E8%A7%A3%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><ul><li><a href="#void-glutdisplayfunc">void glutDisplayFunc（）</a></li></ul></li><li><a href="#glclearcolor-%E8%AE%BE%E7%BD%AE%E9%A2%9C%E8%89%B2%E7%BC%93%E5%AD%98%E7%9A%84%E6%B8%85%E9%99%A4%E5%80%BC">glClearColor ( )设置颜色缓存的清除值</a></li><li><a href="#glclear-%E5%B0%86%E7%BC%93%E5%AD%98%E6%B8%85%E9%99%A4%E4%B8%BA%E9%A2%84%E5%85%88%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%80%BC">glClear ( ) 将缓存清除为预先的设置值</a></li><li><a href="#glcolor">glColor ( )</a></li><li><a href="#glshademodel-2">glShadeModel ( )</a></li><li><a href="#glcleardepth-%E8%AE%BE%E7%BD%AE%E6%B7%B1%E5%BA%A6%E7%BC%93%E5%AD%98%E7%9A%84%E6%B8%85%E9%99%A4%E5%80%BC">glClearDepth ( ) 设置深度缓存的清除值</a></li><li><a href="#gldepthfunc-%E6%8C%87%E5%AE%9A%E7%94%A8%E4%BA%8E%E6%B7%B1%E5%BA%A6%E7%BC%93%E5%86%B2%E7%9A%84%E6%AF%94%E8%BE%83%E5%80%BC">glDepthFunc ( ) 指定用于深度缓冲的比较值</a></li></ul></p><h1 id="glmatrixmode"><a class="markdownIt-Anchor" href="#glmatrixmode"></a> glMatrixMode</h1><p>GL_PROJECTION 投影, GL_MODELVIEW 模型视图, GL_TEXTURE 纹理.</p><p><a href="https://www.jianshu.com/p/6bd2f4628b37">glMatrixMode参考链接</a></p><h1 id="glshademodel"><a class="markdownIt-Anchor" href="#glshademodel"></a> glShadeModel</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/58b470be7bd90b576e90e627a8f8f81e.png" alt="GL_FLAT GL_SMOOTH" /></p><p>GL_SMOOTH会出现过渡效果，GL_FLAT则只是以指定的某一点的单一色绘制其他所有点</p><p><a href="https://blog.csdn.net/chenqiai0/article/details/8316258">glShadeModel参考链接</a></p><h1 id="回调函数"><a class="markdownIt-Anchor" href="#回调函数"></a> 回调函数</h1><h3 id="void-glutdisplayfunc"><a class="markdownIt-Anchor" href="#void-glutdisplayfunc"></a> void glutDisplayFunc（）</h3><p>注册当前窗口的显示回调函数</p><p>这个函数告诉GLUT当窗口内容必须被绘制时，那个函数将被调用。当窗口改变大小或者从被覆盖的状态</p><p><a href="https://blog.csdn.net/xianhua7877/article/details/81271618">回调函数参考链接</a></p><h1 id="颜色"><a class="markdownIt-Anchor" href="#颜色"></a> 颜色</h1><h2 id="glclearcolor-设置颜色缓存的清除值"><a class="markdownIt-Anchor" href="#glclearcolor-设置颜色缓存的清除值"></a> glClearColor ( )设置颜色缓存的清除值</h2><p>glClearColor ( ) 就是用来设置这个 “  底色 ” 的，即所谓的背景颜色。glClearColor ( ) 只起到Set 的作用，并不Clear 任何。</p><p>glClearColor ( ) 的作用是指定刷新颜色缓冲区时所用的颜色，所以完成一个刷新的过程是要 glClearColor ( COLOR)  与glClear ( GL_COLOR_BUFFER_BIT) 配合使用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glClearColor</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);<span class="comment">//红色</span></span><br><span class="line"><span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT); <span class="comment">//GL_COLOR_BUFFER_BIT 是缓冲标志位，表明需要清除的缓冲是颜色缓冲</span></span><br></pre></td></tr></table></figure><p>清除颜色缓冲区的作用是防止缓冲区中原有的颜色信息影响本次绘图（注意：即使认为可以直接覆盖原值，也是有可能会有影响），当绘图区域为整个窗口时，就是通常看到的，颜色缓冲区的清除值就是窗口的背景颜色。所以，这两条清除指令并不是必须的，比如对于静态画面只需设置一次，比如不需要背景色 / 背景色为白色。</p><p>另外，glClear ( ) 比手动涂抹一个背景画布效率高且省力，所以通常使用这种方式。</p><h2 id="glclear-将缓存清除为预先的设置值"><a class="markdownIt-Anchor" href="#glclear-将缓存清除为预先的设置值"></a> glClear ( ) 将缓存清除为预先的设置值</h2><table><thead><tr><th><strong>mask</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>GL_COLOR_BUFFER_BIT</td><td>指定当前被激活为写操作的颜色缓存</td></tr><tr><td>GL_DEPTH_BUFFER_BIT</td><td>指定深度缓存</td></tr><tr><td>GL_ACCUM_BUFFER_BIT</td><td>指定累加缓存</td></tr><tr><td>GL_STENCIL_BUFFER_BIT</td><td>指定模板缓存</td></tr></tbody></table><h2 id="glcolor"><a class="markdownIt-Anchor" href="#glcolor"></a> glColor ( )</h2><p>glColor ( ) 是用来设置画笔的颜色，即绘图颜色。属于RGBA模式。</p><h2 id="glshademodel-2"><a class="markdownIt-Anchor" href="#glshademodel-2"></a> glShadeModel ( )</h2><p>glShadeModel ( ) 函数用于控制 opengl 中绘制指定两点间其他点颜色的过渡模式。</p><p>参数一般为 GL_SMOOLH ( 默认 ) 或 GL_FLAT。</p><p>如果两点的颜色相同，则使用这两个参数效果相同；</p><p>如果两点颜色不同，GL_SMOOLH  会出现过渡效果；  GL_FLAT 则以指定的某一点的单一色绘制其他所有点。</p><h2 id="glcleardepth-设置深度缓存的清除值"><a class="markdownIt-Anchor" href="#glcleardepth-设置深度缓存的清除值"></a> glClearDepth ( ) 设置深度缓存的清除值</h2><p>depth 指定清除深度缓存时使用的深度值，值范围在[ 0  , 1 ] 之间，初始值为1。该值将被用于glClear ( ) 函数清理深度缓冲区</p><h2 id="gldepthfunc-指定用于深度缓冲的比较值"><a class="markdownIt-Anchor" href="#gldepthfunc-指定用于深度缓冲的比较值"></a> glDepthFunc ( ) 指定用于深度缓冲的比较值</h2><table><thead><tr><th>func值</th><th>含义</th></tr></thead><tbody><tr><td>GL_NEVER</td><td>不通过（输入的深度值不取代参考值）</td></tr><tr><td>GL_LESS</td><td>如果输入的深度值小于参考值，则通过</td></tr><tr><td>GL_EQUAL</td><td>如果输入的深度值等于参考值，则通过</td></tr><tr><td>GL_LEQUAL</td><td>如果输入的深度值小于或等于参考值，则通过</td></tr><tr><td>GL_GREATER</td><td>如果输入的深度值大于参考值，则通过</td></tr><tr><td>GL_NOTE_QUAL</td><td>如果输入的深度值不等于参考值，则通过</td></tr><tr><td>GL_GEQUAL</td><td>如果输入的深度值大于或等于参考值，则通过</td></tr><tr><td>GL_ALWAYS</td><td>总是通过（输入的深度值取代参考值）</td></tr></tbody></table><h1 id="画线-gl_lines-gl_line_strip-gl_line_loop"><a class="markdownIt-Anchor" href="#画线-gl_lines-gl_line_strip-gl_line_loop"></a> 画线 GL_LINES &amp; GL_LINE_STRIP &amp; GL_LINE_LOOP</h1><ul><li>GL_LINES ：每一对顶点被解释为一条直线</li><li>GL_LINE_STRIP: 一系列的连续直线</li><li>GL_LINE_LOOP：一系列的连续直线，且首尾相接</li></ul><p><a href="https://blog.csdn.net/xiaoxiaoyusheng2012/article/details/44197283">OpenGL绘线方式 GL_LINES与GL_LINE_STRIP的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是简单路径？</title>
      <link href="/2020/10/10/%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%80%E5%8D%95%E8%B7%AF%E5%BE%84%EF%BC%9F/"/>
      <url>/2020/10/10/%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%80%E5%8D%95%E8%B7%AF%E5%BE%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="ans"><a class="markdownIt-Anchor" href="#ans"></a> Ans</h1><p>如果路径上的各顶点均不互相重复，称这样的路径为<strong>简单路径</strong>。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为回路(cycle)或环或圈。</p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>terminal shell tty console 的区别</title>
      <link href="/2020/09/25/terminal-shell-tty-console-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/09/25/terminal-shell-tty-console-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>A terminal is at the end of an electric wire, a shell is the home of a turtle, tty is a strange abbreviation and a console is a kind of cabinet.</p><p>Well, etymologically speaking, anyway.</p><p>In unix terminology, the short answer is that</p><ul><li>terminal = tty = text input/output environment</li><li>console = physical terminal</li><li>shell = command line interpreter</li></ul><hr /><p>Console ，terminal 和tty密切相关。 最初，它们是指一种设备，您可以通过它与计算机进行交互：在unix的早期，这意味着类似于打字机的电传打字机式设备，有时也称为电传打字机，或简称为“ tty”。 从电子的角度来看，“终端”这个名字，从家具的角度来看，这个名字是“Console”。 在Unix历史的早期，电子键盘和显示器成为终端的规范。</p><p>用Unix术语来说，tty是一种特殊的设备文件，它实现了除读写之外的许多其他命令（ioctl）。 在其最常见的含义中，terminal是tty的同义词。 某些tty由内核代表硬件设备提供，例如，输入来自键盘，输出进入文本模式屏幕，或者输入和输出通过串行线路传输。 其他tty，有时也称为伪tty，由称为终端仿真器的程序（通过薄内核层）提供，例如Xterm（在X Window系统中运行），Screen（在程序和另一个终端之间提供隔离层） ），Ssh（将一台计算机上的终端与另一台计算机上的程序连接），Expect（用于脚本化终端交互）。</p><p>终端一词还可以具有一种设备的更传统的含义，通过该设备，人们可以与计算机（通常是键盘和显示器）进行交互。 例如，X终端是一种瘦客户机，是一台专用计算机，其唯一用途是驱动键盘，显示器，鼠标以及偶尔其他人机交互外围设备，而实际应用程序则在另一台功能更强大的计算机上运行。</p><p>Console通常是物理意义上的终端，根据某种定义，它是直接连接到机器的主要终端。 Console在操作系统中显示为（内核实现的）tty。 在某些系统上，例如Linux和FreeBSD，控制台显示为多个tty（特殊的组合键在这些tty之间切换）。 只是为了混淆，给每个特定tty赋予的名称可以是“Console”，”virtual console”，”virtual terminal”，和其他变体。</p><hr /><p>Shell是用户登录时看到的主要界面，其主要目的是启动其他程序。 （我不知道最初的隐喻是shell是用户的家庭环境，还是该shell是其他程序在其中运行。）</p><p>在Unix圈子中，shell专门指命令行外壳，以输入要启动的应用程序的名称为中心，然后输入应用程序应作用的文件或其他对象的名称，然后按Enter键。 其他类型的环境不使用“外壳”一词； 例如，窗口系统涉及“窗口管理器”和“桌面环境”，而不涉及“外壳”。</p><p>有许多不同的unix shell。 交互式使用的流行shell包括Bash（大多数Linux安装中的默认设置），zsh（强调功能和可定制性）和fish（强调简单性）。</p><p>命令行外壳包含用于组合命令的流控制构造。 除了在交互式提示下键入命令外，用户还可以编写脚本。 最常见的Shell具有基于Bourne_shell的通用语法。 在讨论“ shell编程”时，几乎总是暗示该外壳是Bourne风格的外壳。 一些经常用于脚本编写但缺少高级交互功能的外壳包括Korn外壳（ksh）和许多ash变体。 几乎所有类似Unix的系统都有Bourne风格的shell安装为/ bin / sh，通常是ash，ksh或bash。</p><p>在unix系统管理中，用户的外壳程序是他们登录时调用的程序。普通用户帐户具有命令行外壳程序，但是访问受限的用户可能具有受限的外壳程序或某些其他特定命令（例如，用于文件传输） -仅帐户）。</p><hr /><p>The division of labor between the terminal and the shell is not completely obvious. Here are their main tasks.</p><ul><li>Input: the terminal converts keys into control sequences (e.g. Left → <code>\e[D</code>). The shell converts control sequences into commands (e.g. <code>\e[D</code> → <code>backward-char</code>).</li><li>Line editing, input history and completion are provided by the shell.<ul><li>The terminal may provide its own line editing, history and completion instead, and only send a line to the shell when it’s ready to be executed. The only common terminal that operates in this way is <code>M-x shell</code> in Emacs.</li></ul></li><li>Output: the shell emits instructions such as “display <code>foo</code>”, “switch the foreground color to green”, “move the cursor to the next line”, etc. The terminal acts on these instructions.</li><li>The prompt is purely a shell concept.</li><li>The shell never sees the output of the commands it runs (unless redirected). Output history (scrollback) is purely a terminal concept.</li><li>Inter-application copy-paste is provided by the terminal (usually with the mouse or key sequences such as Ctrl+Shift+V or Shift+Insert). The shell may have its own internal copy-paste mechanism as well (e.g. Meta+W and Ctrl+Y).</li><li><a href="http://en.wikipedia.org/wiki/Job_control">Job control</a> (launching programs in the background and managing them) is mostly performed by the shell. However, it’s the terminal that handles key combinations like Ctrl+C to kill the foreground job and Ctrl+Z to suspend it.</li></ul><h1 id="翻译自"><a class="markdownIt-Anchor" href="#翻译自"></a> 翻译自：</h1><p><a href="https://unix.stackexchange.com/a/4132">https://unix.stackexchange.com/a/4132</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【操作系统】中断 异常 陷入 程序调用 之间的关系</title>
      <link href="/2020/09/23/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E4%B8%AD%E6%96%AD-%E5%BC%82%E5%B8%B8-%E9%99%B7%E5%85%A5-%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/09/23/%E3%80%90%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%91%E4%B8%AD%E6%96%AD-%E5%BC%82%E5%B8%B8-%E9%99%B7%E5%85%A5-%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8-%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p>关于终端、异常、陷入三者之间的关系，网上有很多种分类，很多种解释。</p><p>本文对三者关系的阐述根据山东大学杨兴强教授教授的操作系统时的思路整理。</p><h1 id="外部中断-异常-陷入"><a class="markdownIt-Anchor" href="#外部中断-异常-陷入"></a> 外部中断、异常、陷入：</h1><p>简单的来说，中断分为<strong>陷入、异常、外部中断（外部设备的中断）</strong>。即这三者统称为中断。</p><p>其中陷入、异常又称为内部中断。</p><h2 id="外部中断"><a class="markdownIt-Anchor" href="#外部中断"></a> 外部中断：</h2><p>最容易被混淆，我们平常所说的<strong>中断</strong>既指大概念上的中断，又指的外部中断，这个要根据上下文推断。</p><h2 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常：</h2><p>CPU执行时出错，发出中断。是被动发生中断事件。</p><h2 id="陷入"><a class="markdownIt-Anchor" href="#陷入"></a> 陷入</h2><p>CPU主动跳转，比如断点调试和trap指令。使程序主动进入某一条指令流。</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200923204042213.png" alt="不同类型中断事件的比较" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200923204435951.png" alt="中断响应过程" /></p><h2 id="内部-外部的关系"><a class="markdownIt-Anchor" href="#内部-外部的关系"></a> 内部、外部的关系？</h2><p>内部中断指的是CPU自身产生的中断。</p><p>外部中断指的外设产生的中断。</p><h1 id="中断和程序调用的区别"><a class="markdownIt-Anchor" href="#中断和程序调用的区别"></a> 中断和程序调用的区别</h1><ul><li><p>中断是CPU从执行某一程序流到执行另一程序流的过程。也就是从执行程序A到执行程序B，换了一个程序。</p></li><li><p>程序调用则不是这样，他还是在执行同一程序，可能是发生子函数调用等事件。</p></li></ul><h1 id="硬中断和软中断"><a class="markdownIt-Anchor" href="#硬中断和软中断"></a> 硬中断和软中断</h1><p>当然网上关于硬中断和软中断的概念划分有很多，各有道理。而我们认为：<strong>硬中断指的是外部设备中断，软中断指的异常和陷入。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win 下 VSCode 配置 LaTeX format 自动格式化</title>
      <link href="/2020/09/21/Win-%E4%B8%8B-VSCode-%E9%85%8D%E7%BD%AE-LaTeX-format-%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/2020/09/21/Win-%E4%B8%8B-VSCode-%E9%85%8D%E7%BD%AE-LaTeX-format-%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>网上关于 win 下 VSCode 配置 LaTeX 自动格式化博客较少，现搜集相关资料整理了一个较简单的教程</p><h1 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h1><h2 id="第一步下载latexindent"><a class="markdownIt-Anchor" href="#第一步下载latexindent"></a> 第一步：下载latexindent</h2><p><a href="https://ctan.org/tex-archive/support/latexindent">latexindent下载地址</a></p><h2 id="第二步解压缩文件放到自己常用目录"><a class="markdownIt-Anchor" href="#第二步解压缩文件放到自己常用目录"></a> 第二步：解压缩文件放到自己常用目录</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/0ec73f7c0143ed4a91d3c7026d4dc2c4.png" alt="" /></p><h2 id="第三步在vscode用户json文件中添加如下"><a class="markdownIt-Anchor" href="#第三步在vscode用户json文件中添加如下"></a> 第三步：在VSCode用户Json文件中添加如下：</h2><h3 id="按f1输入settingsjson"><a class="markdownIt-Anchor" href="#按f1输入settingsjson"></a> 按F1，输入settings.json</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c37d6d05b522daaa472d865497ee06d9.png" alt="" /></p><h3 id="加入如下字段"><a class="markdownIt-Anchor" href="#加入如下字段"></a> 加入如下字段：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;latex-workshop.latexindent.path&quot;: &quot;D:\\LLL\\latex\\latexindent\\latexindent.exe&quot;,</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fcdfcc88ef8bf94c9040e9c459e331a1.png" alt="" /></p><p><strong>大功告成</strong></p>]]></content>
      
      
      <categories>
          
          <category> LaTeX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】因子分析</title>
      <link href="/2020/09/09/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%9B%A0%E5%AD%90%E5%88%86%E6%9E%90/"/>
      <url>/2020/09/09/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%9B%A0%E5%AD%90%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="因子分析模型"><a class="markdownIt-Anchor" href="#因子分析模型"></a> 因子分析模型</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909104908688.png" alt="" /></p><h2 id="因子分析和主成分分析的对比"><a class="markdownIt-Anchor" href="#因子分析和主成分分析的对比"></a> 因子分析和主成分分析的对比</h2><blockquote><p>因子分析结果不是唯一的，主成分分析是唯一的</p><p>主成分分析能做的因子分析都能做</p><p>且因子分析更容易解释，因此因子分析更加常用。</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909105722940.png" alt="" /></p><h1 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909110529575.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span>是均值</p><h1 id="参数估计spss的使用"><a class="markdownIt-Anchor" href="#参数估计spss的使用"></a> 参数估计（SPSS的使用）</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909112139204.png" alt="" /></p><h1 id="因子旋转的方法更好解释因子含义"><a class="markdownIt-Anchor" href="#因子旋转的方法更好解释因子含义"></a> 因子旋转的方法（更好解释因子含义）</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909112318115.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909112500443.png" alt="" /></p><blockquote><p>论文中使用的最多是最大方差法</p></blockquote><h1 id="因子得分"><a class="markdownIt-Anchor" href="#因子得分"></a> 因子得分</h1><blockquote><p>虽然和主成分分析很像，但并不一样</p><p>因子分析限制更多</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909112637056.png" alt="" /></p><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909113408718.png" alt="" /></p><h2 id="参数解释"><a class="markdownIt-Anchor" href="#参数解释"></a> 参数解释：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909113332757.png" alt="" /></p><h2 id="根据碎石图确定因子个数"><a class="markdownIt-Anchor" href="#根据碎石图确定因子个数"></a> 根据碎石图确定因子个数</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909113851916.png" alt="" /></p><h2 id="小技巧标准化后的符号"><a class="markdownIt-Anchor" href="#小技巧标准化后的符号"></a> 小技巧：标准化后的符号：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909114543247.png" alt="" /></p><h2 id="因子分析和主成分分析一样不能用于综合评价"><a class="markdownIt-Anchor" href="#因子分析和主成分分析一样不能用于综合评价"></a> 因子分析和主成分分析一样，不能用于综合评价：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200909114644498.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 因子分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】主成分分析</title>
      <link href="/2020/09/08/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
      <url>/2020/09/08/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="主成分分析"><a class="markdownIt-Anchor" href="#主成分分析"></a> 主成分分析</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908205748343.png" alt="" /></p><h1 id="问题的提出"><a class="markdownIt-Anchor" href="#问题的提出"></a> 问题的提出：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908210002357.png" alt="" /></p><h2 id="降为的优点"><a class="markdownIt-Anchor" href="#降为的优点"></a> 降为的优点：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908210852284.png" alt="" /></p><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908210905448.png" alt="" /></p><h2 id="主成分分析的思想"><a class="markdownIt-Anchor" href="#主成分分析的思想"></a> 主成分分析的思想：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908211019073.png" alt="" /></p><p><img src="C:%5CUsers%5CAnadem%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200908211207191.png" alt="" /></p><h2 id="写在论文中的内容"><a class="markdownIt-Anchor" href="#写在论文中的内容"></a> 写在论文中的内容</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908211313682.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908211347819.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908211712615.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908211650168.png" alt="" /></p><h1 id="例题1"><a class="markdownIt-Anchor" href="#例题1"></a> 例题1：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908212119491.png" alt="" /></p><h2 id="主成分简要分析"><a class="markdownIt-Anchor" href="#主成分简要分析"></a> 主成分简要分析</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908213759220.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908213948336.png" alt="" /></p><h1 id="例题2"><a class="markdownIt-Anchor" href="#例题2"></a> 例题2：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908214149755.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908223412955.png" alt="" /></p><h1 id="误区不能用于求得分"><a class="markdownIt-Anchor" href="#误区不能用于求得分"></a> 误区，不能用于求得分：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908223620203.png" alt="" /></p><h1 id="应用聚类"><a class="markdownIt-Anchor" href="#应用聚类"></a> 应用：聚类：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908223642163.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908224002827.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908224357951.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 主成分分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】预测模型 - 灰色模型</title>
      <link href="/2020/09/08/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B-%E7%81%B0%E8%89%B2%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/09/08/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B-%E7%81%B0%E8%89%B2%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="预测模型-灰色模型"><a class="markdownIt-Anchor" href="#预测模型-灰色模型"></a> 预测模型 - 灰色模型·</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908204044308.png" alt="灰、白、黑系统的区别" /></p><h1 id="什么时候用灰度预测"><a class="markdownIt-Anchor" href="#什么时候用灰度预测"></a> 什么时候用灰度预测？</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908205259520.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908205310456.png" alt="" /></p><h1 id="预测题目的套路"><a class="markdownIt-Anchor" href="#预测题目的套路"></a> 预测题目的套路</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200908205343486.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 预测模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】时间序列分析：指数平滑和ARIMA模型</title>
      <link href="/2020/09/07/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/09/07/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="时间序列分析"><a class="markdownIt-Anchor" href="#时间序列分析"></a> 时间序列分析</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906154108021.png" alt="" /></p><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>很多人认为index{ARIMA-ETS equivalences}ARIMA模型相较于指数平滑模型（ETS）更为一般化，这其实是一个较为普遍的错误认识。虽然线性指数平滑模型其实都是 ARIMA 模型的特例，但是非线性的指数平滑模型在 ARIMA 模型中并没有对应的部分。另一方面，也有很多 ARIMA 模型不包含指数平滑的部分。二者还有一个重要区别：所有指数平滑模型都是非平稳的，而有些ARIMA模型是平稳的。</p><h2 id="拥有季节性或者非衰减趋势的指数平滑模型拥有两个单位根即它们需要进行两次差分来实现平稳其他所有指数平滑模型只有一个单位根它们需要一次差分来实现平稳"><a class="markdownIt-Anchor" href="#拥有季节性或者非衰减趋势的指数平滑模型拥有两个单位根即它们需要进行两次差分来实现平稳其他所有指数平滑模型只有一个单位根它们需要一次差分来实现平稳"></a> 拥有季节性或者非衰减趋势的指数平滑模型拥有两个单位根（即它们需要进行两次差分来实现平稳），其他所有指数平滑模型只有一个单位根（它们需要一次差分来实现平稳）。</h2><p>ARIMA模型提供了另一种时间序列预测的方法。指数平滑模型（exponential smoothing）和ARIMA模型是应用最为广泛的两种时间序列预测方法，基于对这两种预测方法的拓展,很多其他的预测方法得以诞生。与指数平滑模型针对于数据中的趋势（trend）和季节性（seasonality）不同，ARIMA模型旨在描绘数据的自回归性（autocorrelations）。</p><p>在引入ARIMA模型之前，我们需要先讨论平稳性（stationarity）和差分时间序列（differencing time series）的相关知识。</p><h2 id="时期序列和时点序列的概念"><a class="markdownIt-Anchor" href="#时期序列和时点序列的概念"></a> 时期序列和时点序列的概念</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906154222910.png" alt="" /></p><blockquote><p>时期序列可加，时点不可加</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906154602399.png" alt="" /></p><h1 id="时间序列分解"><a class="markdownIt-Anchor" href="#时间序列分解"></a> 时间序列分解</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906154651244.png" alt="" /></p><h1 id="叠加模型和乘积模型"><a class="markdownIt-Anchor" href="#叠加模型和乘积模型"></a> 叠加模型和乘积模型</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906155114618.png" alt="" /></p><h1 id="如何处理缺失值"><a class="markdownIt-Anchor" href="#如何处理缺失值"></a> 如何处理缺失值</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906155419412.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906155618803.png" alt="" /></p><h1 id="具体步骤"><a class="markdownIt-Anchor" href="#具体步骤"></a> 具体步骤：</h1><blockquote><p>周期要小于一年</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906161642741.png" alt="" /></p><h1 id="指数回归模型"><a class="markdownIt-Anchor" href="#指数回归模型"></a> 指数回归模型：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906170115430.png" alt="" /></p><h1 id="一元时间序列分析模型"><a class="markdownIt-Anchor" href="#一元时间序列分析模型"></a> 一元时间序列分析模型</h1><blockquote><p>为了引出ARIMA模型</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200907091542329.png" alt="" /></p><h1 id="建模过程"><a class="markdownIt-Anchor" href="#建模过程"></a> 建模过程：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200907224923649.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】聚类模型 - DBSCAN</title>
      <link href="/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B-DBSCAN/"/>
      <url>/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B-DBSCAN/</url>
      
        <content type="html"><![CDATA[<h1 id="可视化网址"><a class="markdownIt-Anchor" href="#可视化网址"></a> 可视化网址</h1><p><a href="https://www.naftaliharris.com/blog/visualizing">聚类可视化网址</a></p><h1 id="dbscan"><a class="markdownIt-Anchor" href="#dbscan"></a> DBSCAN</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906140717337.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906141324719.png" alt="" /></p><h1 id="和其他算法的区别"><a class="markdownIt-Anchor" href="#和其他算法的区别"></a> 和其他算法的区别</h1><blockquote><p>K-means 和 系统算法是基于距离的</p><p>DBSCAN是基于密度的</p></blockquote><h2 id="优点"><a class="markdownIt-Anchor" href="#优点"></a> 优点</h2><ul><li>可以发现任意形状的簇</li><li>可以发现噪点</li></ul><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906142303750.png" alt="" /></p><ul><li>如果数据表现的很有形状就用DBSCAN</li><li>其他情况用系统聚类</li><li>K-means 论文上可以写的东西比较稀少</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 聚类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】聚类模型 - K-means &amp; 系统（层次）算法</title>
      <link href="/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B-K-means-%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B1%82%E6%AC%A1%EF%BC%89%E7%AE%97%E6%B3%95/"/>
      <url>/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%81%9A%E7%B1%BB%E6%A8%A1%E5%9E%8B-K-means-%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%B1%82%E6%AC%A1%EF%BC%89%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="聚类和分类的区别"><a class="markdownIt-Anchor" href="#聚类和分类的区别"></a> 聚类和分类的区别</h1><p>聚类是不知道类别，自己分类</p><p>分类是已知类别的</p><h1 id="聚类模型"><a class="markdownIt-Anchor" href="#聚类模型"></a> 聚类模型</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906102956654.png" alt="" /></p><h1 id="k-means聚类"><a class="markdownIt-Anchor" href="#k-means聚类"></a> K-means聚类</h1><blockquote><p>数据对象即样本</p><p>聚类中心即重心</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906103044052.png" alt="" /></p><p><strong>PS：和我们初始化选择的中心有很大关系</strong></p><h2 id="如何写在论文里"><a class="markdownIt-Anchor" href="#如何写在论文里"></a> 如何写在论文里</h2><blockquote><p>因为算法步骤太长了，而且易被查重</p></blockquote><p>因为算法太长了，放流程图：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906103629642.png" alt="一样的意思，但是更让人喜欢" /></p><h2 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906103719030.png" alt="" /></p><h1 id="改进-k-means算法"><a class="markdownIt-Anchor" href="#改进-k-means算法"></a> 改进 K-means++算法</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906103837670.png" alt="" /></p><h2 id="k值这么定量纲不一样怎么办"><a class="markdownIt-Anchor" href="#k值这么定量纲不一样怎么办"></a> K值这么定，量纲不一样怎么办？</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906105112225.png" alt="" /></p><h1 id="不需要指定k的算法系统层次算法"><a class="markdownIt-Anchor" href="#不需要指定k的算法系统层次算法"></a> 不需要指定K的算法：系统（层次）算法</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906105928985.png" alt="" /></p><h2 id="样本和样本直接的距离如何计算"><a class="markdownIt-Anchor" href="#样本和样本直接的距离如何计算"></a> 样本和样本直接的距离如何计算</h2><h3 id="样本和样本之间的距离"><a class="markdownIt-Anchor" href="#样本和样本之间的距离"></a> 样本和样本之间的距离</h3><blockquote><p>绝对值距离和欧式距离最常用</p><p>绝对值距离更多的用于网状数据</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906111013007.png" alt="" /></p><h3 id="指标和指标之间的距离不常用-用于指标分类"><a class="markdownIt-Anchor" href="#指标和指标之间的距离不常用-用于指标分类"></a> 指标和指标之间的距离（不常用、用于指标分类）</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906111149539.png" alt="指标分类，不常用" /></p><h3 id="类与类之间的距离"><a class="markdownIt-Anchor" href="#类与类之间的距离"></a> 类与类之间的距离</h3><blockquote><p>因为样本和样本被划分为不同的类，就被划分到不同的类了</p><p>组间、组内用的多</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906111334490.png" alt="" /></p><h2 id="系统聚类的流程图"><a class="markdownIt-Anchor" href="#系统聚类的流程图"></a> 系统聚类的流程图</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906111652432.png" alt="流程图" /></p><h2 id="需要注意的问题"><a class="markdownIt-Anchor" href="#需要注意的问题"></a> 需要注意的问题：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906112249195.png" alt="" /></p><h1 id="有没有算法能帮助我们确定k的值肘部法则"><a class="markdownIt-Anchor" href="#有没有算法能帮助我们确定k的值肘部法则"></a> 有没有算法能帮助我们确定k的值：肘部法则</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906113001015.png" alt="" /></p><h2 id="论文里如何解释"><a class="markdownIt-Anchor" href="#论文里如何解释"></a> 论文里如何解释？</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906113700284.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 聚类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】分类模型</title>
      <link href="/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/09/06/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="分类模型"><a class="markdownIt-Anchor" href="#分类模型"></a> 分类模型</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906083817575.png" alt="" /></p><h1 id="线性概率模型lpm的问题"><a class="markdownIt-Anchor" href="#线性概率模型lpm的问题"></a> 线性概率模型LPM的问题</h1><blockquote><p>内生性问题</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906084548144.png" alt="" /></p><h2 id="二点分布"><a class="markdownIt-Anchor" href="#二点分布"></a> 二点分布</h2><blockquote><p>求期望</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906084650581.png" alt="" /></p><h2 id="值域为0~1的函数"><a class="markdownIt-Anchor" href="#值域为0~1的函数"></a> 值域为0~1的函数</h2><blockquote><p>一般用逻辑回归（因为简单</p><p>这里又是概率论的内容了，下面要求极大似然估计</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906085029497.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906085040705.png" alt="" /></p><h2 id="预测结果很差怎么办"><a class="markdownIt-Anchor" href="#预测结果很差怎么办"></a> 预测结果很差怎么办？</h2><blockquote><p>因为是预测性回归，不是解释性回归</p><p>因此可以加入平方项、交互项</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906090548182.png" alt="" /></p><h3 id="问题过拟合"><a class="markdownIt-Anchor" href="#问题过拟合"></a> 问题：过拟合</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906090713692.png" alt="" /></p><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><blockquote><p>机器学习</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906090750047.png" alt="" /></p><h1 id="fisher线性判别分析"><a class="markdownIt-Anchor" href="#fisher线性判别分析"></a> Fisher线性判别分析</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906091145161.png" alt="" /></p><h2 id="不同超平面选取的差异"><a class="markdownIt-Anchor" href="#不同超平面选取的差异"></a> 不同超平面选取的差异</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906091442434.png" alt="" /></p><h1 id="多分类问题"><a class="markdownIt-Anchor" href="#多分类问题"></a> 多分类问题：</h1><blockquote><p>多分类从1开始分类，二分类从0开始分类</p><p>以上两个方法均可以处理多分类问题</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906091925939.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200906092211171.png" alt="" /></p><p><strong>注意过拟合问题</strong></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 分类模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】数学规划模型 - 非线性规划 &amp; 最大最小化问题</title>
      <link href="/2020/09/05/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92-%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%8C%96%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/05/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B-%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92-%E6%9C%80%E5%A4%A7%E6%9C%80%E5%B0%8F%E5%8C%96%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="非线性规划"><a class="markdownIt-Anchor" href="#非线性规划"></a> 非线性规划</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200905094005840.png" alt="" /></p><h2 id="matlab-求解"><a class="markdownIt-Anchor" href="#matlab-求解"></a> matlab 求解：</h2><blockquote><p>因为非线性规划对初始值很敏感</p><p>使用蒙特卡洛模拟<strong>方法</strong>（不是算法）获得初始值</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200905095323658.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200905095958305.png" alt="" /></p><h2 id="写作技巧"><a class="markdownIt-Anchor" href="#写作技巧"></a> 写作技巧：</h2><p>不同的算法有其名自的优缺点和适用情况，我们可以改变求解的算法来看求解的结量是否变好了。（这可以体现出稳健性，也是你的优点）</p><h1 id="最大最小化问题"><a class="markdownIt-Anchor" href="#最大最小化问题"></a> 最大最小化问题</h1><blockquote><p>不就是二分吗？</p><p>PS：不是二分，因为这个函数可以是非线性函数，二分函数必须得单调</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200905103018607.png" alt="" /></p><h2 id="matlab求解"><a class="markdownIt-Anchor" href="#matlab求解"></a> matlab求解</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200905103645791.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 数学规划模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】数学规划模型 - 线性规划 &amp; 整数规划</title>
      <link href="/2020/09/04/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92-%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/"/>
      <url>/2020/09/04/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%95%B0%E5%AD%A6%E8%A7%84%E5%88%92%E6%A8%A1%E5%9E%8B-%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92-%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="数学规划模型"><a class="markdownIt-Anchor" href="#数学规划模型"></a> 数学规划模型</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904205752052.png" alt="" /></p><h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904205910896.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904210202583.png" alt="" /></p><h1 id="线性规划问题求解matlab"><a class="markdownIt-Anchor" href="#线性规划问题求解matlab"></a> 线性规划问题求解（MATLAB）：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904210749120.png" alt="" /></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码：</h2><blockquote><p>不是所有线性规划都有唯一解</p><p>matlab 会返回其中的一个解</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904211734852.png" alt="" /></p><h2 id="如果出现-和-怎么办"><a class="markdownIt-Anchor" href="#如果出现-和-怎么办"></a> 如果出现 &gt; 和 &lt; 怎么办</h2><p>放松一下<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">x \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 变成 $ x &gt; 0.0001$</p><h1 id="整数规划"><a class="markdownIt-Anchor" href="#整数规划"></a> 整数规划</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200904232156423.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 数学规划模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】蒙特卡洛模拟</title>
      <link href="/2020/08/27/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F/"/>
      <url>/2020/08/27/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="我的总结"><a class="markdownIt-Anchor" href="#我的总结"></a> 我的总结：</h1><p>蒙特卡罗模型如果换一个名字就是计算机仿真，（计算机仿真现在的概念要大一点，可以理解为做大型工程的，两者不太一样，但在建模中类似）。</p><p>个人感觉也可以说蒙特卡洛模型是模拟退火、蚁群等算法的原型。</p><p>个人感觉这个经常放在论文的模型验证部分。</p><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p>蒙特卡洛模拟实际上就是计算机仿真，它可以解决超级多的建模问题。</p><p>公众号：数学建模学习交流。</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826223620952.png" alt="" /></p><h2 id="引例布峰投针实验"><a class="markdownIt-Anchor" href="#引例布峰投针实验"></a> 引例：布峰投针实验</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826224011324.png" alt="" /></p><h1 id="蒙特卡洛概述"><a class="markdownIt-Anchor" href="#蒙特卡洛概述"></a> 蒙特卡洛概述：</h1><blockquote><p>蒙特卡洛是一个思想，而不是算法</p><p>建模里就不去别计算机仿真和蒙特卡洛模拟了</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826230436266.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826230527426.png" alt="" /></p><ul><li>可以求规划问题</li><li>可能会陷入局部最优</li></ul><h1 id="应用三门问题"><a class="markdownIt-Anchor" href="#应用三门问题"></a> 应用：三门问题</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233109665.png" alt="" /></p><h1 id="模拟排队论"><a class="markdownIt-Anchor" href="#模拟排队论"></a> 模拟：排队论</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233534076.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826233710104.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 蒙特卡洛模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】多元线性回归模型 - 序</title>
      <link href="/2020/08/26/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E5%BA%8F/"/>
      <url>/2020/08/26/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="回归系数的解释"><a class="markdownIt-Anchor" href="#回归系数的解释"></a> 回归系数的解释：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232427118.png" alt="" /></p><h2 id="什么时候取对数"><a class="markdownIt-Anchor" href="#什么时候取对数"></a> 什么时候取对数：</h2><blockquote><p>这个规定充满主观性，但是是专家给的，就专业了</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232536480.png" alt="" /></p><h2 id="四类模型回归系数解释"><a class="markdownIt-Anchor" href="#四类模型回归系数解释"></a> 四类模型回归系数解释：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232745075.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825232908915.png" alt="" /></p><h3 id="特殊变量解释定性变量"><a class="markdownIt-Anchor" href="#特殊变量解释定性变量"></a> 特殊变量解释（定性变量）：</h3><blockquote><p>定性变量 转化维 定量变量： 引入虚拟变量</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233020196.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233157843.png" alt="" /></p><h4 id="多分类虚拟变量"><a class="markdownIt-Anchor" href="#多分类虚拟变量"></a> 多分类虚拟变量：</h4><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233419919.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233453828.png" alt="" /></p><h3 id="交互项"><a class="markdownIt-Anchor" href="#交互项"></a> 交互项：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825233910486.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234128728.png" alt="" /></p><h1 id="例子分析幼儿奶粉数据"><a class="markdownIt-Anchor" href="#例子分析幼儿奶粉数据"></a> 例子：分析幼儿奶粉数据：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234148670.png" alt="" /></p><h2 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据：</h2><blockquote><p>只有三个定量指标，其它都是定性指标</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234245257.png" alt="" /></p><h2 id="软件"><a class="markdownIt-Anchor" href="#软件"></a> 软件：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825234535886.png" alt="" /></p><h2 id="技巧"><a class="markdownIt-Anchor" href="#技巧"></a> 技巧：</h2><blockquote><p>比如商品量太多了，就不要做虚拟变量了</p></blockquote><h2 id="拟合度r2很低怎么办"><a class="markdownIt-Anchor" href="#拟合度r2很低怎么办"></a> 拟合度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>很低怎么办？：</h2><blockquote><p>一般的时候我们更多的是解释性回归，不看重<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>了。预测性的我们用的别的模型（比如拟合来做）</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826002421785.png" alt="" /></p><h2 id="标准化回归系数"><a class="markdownIt-Anchor" href="#标准化回归系数"></a> 标准化回归系数：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200826002740699.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 多元线性回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】多元线性回归模型 - 一元线性回归</title>
      <link href="/2020/08/25/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
      <url>/2020/08/25/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B-%E4%B8%80%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是回归分析"><a class="markdownIt-Anchor" href="#什么是回归分析"></a> 什么是回归分析？</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824220934892.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221013183.png" alt="" /></p><h2 id="相关性-因果性"><a class="markdownIt-Anchor" href="#相关性-因果性"></a> 相关性 ≠ 因果性</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221247970.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221158760.png" alt="" /></p><h2 id="自变量y"><a class="markdownIt-Anchor" href="#自变量y"></a> 自变量Y：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221331403.png" alt="" /></p><h2 id="自变量x"><a class="markdownIt-Anchor" href="#自变量x"></a> 自变量X：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221515600.png" alt="" /></p><h2 id="回归分析的用处"><a class="markdownIt-Anchor" href="#回归分析的用处"></a> 回归分析的用处：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824221805404.png" alt="" /></p><blockquote><p>这里要注意，因为涉及到不同自变量的权重，所以一般要去量纲，不然没意义。</p></blockquote><h2 id="回归分析的分类"><a class="markdownIt-Anchor" href="#回归分析的分类"></a> 回归分析的分类：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824222103880.png" alt="" /></p><h1 id="多元线性回归"><a class="markdownIt-Anchor" href="#多元线性回归"></a> 多元线性回归：</h1><h2 id="不同数据的处理"><a class="markdownIt-Anchor" href="#不同数据的处理"></a> 不同数据的处理：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824222636484.png" alt="" /></p><ul><li>横截面数据：多元线性回归</li><li>时间序列数据：最常用的是ARMA</li></ul><h3 id="横截面数据"><a class="markdownIt-Anchor" href="#横截面数据"></a> 横截面数据：</h3><p><img src="figures/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/image-20200824222649255.png" alt="" /></p><h3 id="时间序列数据"><a class="markdownIt-Anchor" href="#时间序列数据"></a> 时间序列数据：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824232125474.png" alt="" /></p><h3 id="面板数据"><a class="markdownIt-Anchor" href="#面板数据"></a> 面板数据：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824232207424.png" alt="" /></p><h1 id="数据的收集"><a class="markdownIt-Anchor" href="#数据的收集"></a> 数据的收集：</h1><p><a href="https://link.jiandaoyun.com/f/5cc652cc2cf3b22fb7819189">【简道云汇总】110+数据网站</a></p><p><a href="http://data.chongbuluo.com/">虫部落数据搜索</a></p><p><a href="https://link.jiandaoyun.com/f/5b35d05ff7f6ef2604d39a93">【汇总】数据来源/大数据平台</a></p><p><a href="">大数据工具导航工具</a>(<a href="http://hao.199it.com/">http://hao.199it.com/</a>)</p><p><a href="http://www.hippter.com/data.html">数据平台</a></p><hr /><p>上面的数据多半都是宏观数据，微观数据市面上很少</p><p><a href="https://bbs.pinggu.org/">大家可以在人大经济论坛搜索</a></p><h1 id="一元线性回归"><a class="markdownIt-Anchor" href="#一元线性回归"></a> 一元线性回归：</h1><h2 id="一元线性回归和一元线性函数拟合区别"><a class="markdownIt-Anchor" href="#一元线性回归和一元线性函数拟合区别"></a> 一元线性回归和一元线性函数拟合区别：</h2><blockquote><p>定义不一样，本质是一样的</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824233403563.png" alt="" /></p><h2 id="对线性的理解"><a class="markdownIt-Anchor" href="#对线性的理解"></a> 对线性的理解：</h2><blockquote><p>线性是对参数说的</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824233753623.png" alt="" /></p><h2 id="回归系数的解释"><a class="markdownIt-Anchor" href="#回归系数的解释"></a> 回归系数的解释：</h2><blockquote><p>求系数很简单</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824234327393.png" alt="" /></p><ul><li>这里的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>是对每个个体而言，也可以去掉，转换成对总体而言</li></ul><h3 id="内生性"><a class="markdownIt-Anchor" href="#内生性"></a> 内生性：</h3><blockquote><p>无偏性和一致性</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824234753326.png" alt="" /></p><h4 id="u_i是什么"><a class="markdownIt-Anchor" href="#u_i是什么"></a> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">u_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是什么？</h4><p><img src="figures/%E5%A4%9A%E5%85%83%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/image-20200824235144988.png" alt="" /></p><h2 id="蒙特卡洛验证是否有内生性"><a class="markdownIt-Anchor" href="#蒙特卡洛验证是否有内生性"></a> 蒙特卡洛验证是否有内生性：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824235429966.png" alt="" /></p><h3 id="matlab"><a class="markdownIt-Anchor" href="#matlab"></a> matlab:</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825000304873.png" alt="" /></p><h2 id="降低内生性要求"><a class="markdownIt-Anchor" href="#降低内生性要求"></a> 降低内生性要求：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200825000558498.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 多元线性回归模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】相关性分析 - 皮尔逊相关系数 &amp; 斯皮尔曼相关系数</title>
      <link href="/2020/08/24/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90-%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0-%E6%96%AF%E7%9A%AE%E5%B0%94%E6%9B%BC%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/"/>
      <url>/2020/08/24/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%9B%B8%E5%85%B3%E6%80%A7%E5%88%86%E6%9E%90-%E7%9A%AE%E5%B0%94%E9%80%8A%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0-%E6%96%AF%E7%9A%AE%E5%B0%94%E6%9B%BC%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231157301.png" alt="" /></p><h1 id="皮尔逊person相关系-要求数据满足正态分布"><a class="markdownIt-Anchor" href="#皮尔逊person相关系-要求数据满足正态分布"></a> 皮尔逊Person相关系 （要求数据满足正态分布</h1><h2 id="总体和样本"><a class="markdownIt-Anchor" href="#总体和样本"></a> 总体和样本</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231257297.png" alt="" /></p><h2 id="总体皮尔逊person相关系数"><a class="markdownIt-Anchor" href="#总体皮尔逊person相关系数"></a> 总体皮尔逊Person相关系数</h2><blockquote><p>一般说的相关系数就是皮尔逊相关系数</p><p>就是概率论的知识</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231359070.png" alt="" /></p><p>消除量纲影响：</p><h3 id="总体"><a class="markdownIt-Anchor" href="#总体"></a> 总体：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231514139.png" alt="" /></p><h3 id="样本"><a class="markdownIt-Anchor" href="#样本"></a> 样本：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231841379.png" alt="" /></p><h2 id="意义"><a class="markdownIt-Anchor" href="#意义"></a> 意义：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823231931125.png" alt="" /></p><h2 id="误区"><a class="markdownIt-Anchor" href="#误区"></a> 误区：</h2><blockquote><p>用于衡量线性</p><p><strong>两个变量必须线性相关。</strong></p><p>不是线性相关函数，不一样</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232246241.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232028972.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232203860.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232424387.png" alt="" /></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232540515.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232647798.png" alt="很多教材以0.7相关" /></p><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823232800453.png" alt="" /></p><blockquote><p>MATLAB EXCEL SPSS都能做</p></blockquote><h2 id="matlab"><a class="markdownIt-Anchor" href="#matlab"></a> MATLAB</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233537865.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233303792.png" alt="一个很好的习惯" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823234041854.png" alt="" /></p><h2 id="spss"><a class="markdownIt-Anchor" href="#spss"></a> SPSS</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823233848566.png" alt="" /></p><blockquote><p>C(n,2) 的散点图可以用spss计算</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823234339264.png" alt="" /></p><h1 id="假设检验"><a class="markdownIt-Anchor" href="#假设检验"></a> 假设检验：</h1><blockquote><p>概率论内容，考过的</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823235346159.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000231388.png" alt="" /></p><h1 id="对皮尔逊相关系数进行假设检验"><a class="markdownIt-Anchor" href="#对皮尔逊相关系数进行假设检验"></a> 对皮尔逊相关系数进行假设检验</h1><h2 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002028537.png" alt="" /></p><h2 id="第一步第二步"><a class="markdownIt-Anchor" href="#第一步第二步"></a> 第一步，第二步：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000329110.png" alt="" /></p><h2 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000506002.png" alt="" /></p><h2 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000620295.png" alt="" /></p><h2 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000742044.png" alt="" /></p><h2 id="更好用的方法p值判断法"><a class="markdownIt-Anchor" href="#更好用的方法p值判断法"></a> 更好用的方法：P值判断法</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824000823479.png" alt="" /></p><h2 id="matlab-2"><a class="markdownIt-Anchor" href="#matlab-2"></a> matlab：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824001115009.png" alt="" /></p><h2 id="spss-2"><a class="markdownIt-Anchor" href="#spss-2"></a> spss</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824001828642.png" alt="image-20200824001828642" /></p><h1 id="如何检验数据是不是正态分布"><a class="markdownIt-Anchor" href="#如何检验数据是不是正态分布"></a> 如何检验数据是不是正态分布：</h1><h2 id="正态分布jb检验样本n30"><a class="markdownIt-Anchor" href="#正态分布jb检验样本n30"></a> 正态分布JB检验（样本n&gt;30)</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002213034.png" alt="" /></p><h3 id="matlab-3"><a class="markdownIt-Anchor" href="#matlab-3"></a> matlab:</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824002642802.png" alt="" /></p><h2 id="shapiro-wikl检验"><a class="markdownIt-Anchor" href="#shapiro-wikl检验"></a> Shapiro-wikl检验：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824003312812.png" alt="" /></p><h2 id="q-q图数据量非常大不推荐用"><a class="markdownIt-Anchor" href="#q-q图数据量非常大不推荐用"></a> Q-Q图（数据量非常大，不推荐用：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824003542231.png" alt="" /></p><h1 id="斯皮尔曼spearman相关系数不要求正态分布"><a class="markdownIt-Anchor" href="#斯皮尔曼spearman相关系数不要求正态分布"></a> 斯皮尔曼spearman相关系数（不要求正态分布</h1><blockquote><p>不要求是正态分布</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/112d8172e1d44c3e0a271e01fe1943b1.svg" alt="img" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004004862.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004216828.png" alt="" /></p><h2 id="第二种定义matlab用的"><a class="markdownIt-Anchor" href="#第二种定义matlab用的"></a> 第二种定义（matlab用的</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/3077d509a28f0c638e01a3be025aa653.svg" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004318249.png" alt="" /></p><h2 id="matlab-4"><a class="markdownIt-Anchor" href="#matlab-4"></a> MATLAB</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004610707.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005232578.png" alt="" /></p><h1 id="斯皮尔曼显著检验"><a class="markdownIt-Anchor" href="#斯皮尔曼显著检验"></a> 斯皮尔曼显著检验：</h1><h2 id="小样本"><a class="markdownIt-Anchor" href="#小样本"></a> 小样本</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824004912349.png" alt="" /></p><h2 id="大样本"><a class="markdownIt-Anchor" href="#大样本"></a> 大样本：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005040748.png" alt="image-20200824005040748" /></p><h1 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200824005520813.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> 相关性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机组成原理】微命令 微操作 微指令 微程序</title>
      <link href="/2020/08/23/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%91%E5%BE%AE%E5%91%BD%E4%BB%A4-%E5%BE%AE%E6%93%8D%E4%BD%9C-%E5%BE%AE%E6%8C%87%E4%BB%A4-%E5%BE%AE%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/08/23/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%91%E5%BE%AE%E5%91%BD%E4%BB%A4-%E5%BE%AE%E6%93%8D%E4%BD%9C-%E5%BE%AE%E6%8C%87%E4%BB%A4-%E5%BE%AE%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>复习机组的时候发现<font color=red>微命令</font>、<font color=#34a853>微指令</font>、<font color=#fbbc05>微操作</font>、<font color=#4285f4>微程序</font>、甚至控制信号这几个概念容易搞混。现在整理如下。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><blockquote><p><font color=red> 微命令</font>  -&gt;<font color=#34a853> 微指令</font> -&gt; <font color=#4285f4>微程序</font>    A -&gt; B表示由A组成B</p></blockquote><p>控制部件通过控制线向执行部件发出各种控制命令，通常这种控制命令叫做<font color=red>微命令</font>，是最小单位，组成<font color=#34a853>微指令</font> 。<br />在机器的一个CPU周期中，一组实现一定操作功能的<font color=red>微命令</font>的组合，构成一条<font color=#34a853>微指令</font><br />事实上一条机器指令的功能是由许多条<font color=#34a853>微指令</font>组成的序列来实现的。这个<font color=#34a853>微指令</font>序列通常叫做<font color=#4285f4>微程序</font>。</p><ul><li><font color=#fbbc05>微操作</font>：指令执行时必须完成的基本操作。例如，PC→AR，PC+1→ PC，RAM→IR。</li></ul><h1 id="自己的理解"><a class="markdownIt-Anchor" href="#自己的理解"></a> 自己的理解</h1><p>一条机器指令是由多个<font color=#34a853>微指令</font>组成的。这多个<font color=#34a853>微指令</font>序列又称作<font color=#4285f4>微程序</font>。</p><p>一条微指令是由多个<font color=red> 微命令</font>组成的。<font color=red> 微命令</font>又称作控制信号，<font color=red> 微命令</font>序列即控制信号序列。</p><hr /><h2 id="微操作和微指令的区别询问张瑞华老师得知"><a class="markdownIt-Anchor" href="#微操作和微指令的区别询问张瑞华老师得知"></a> 微操作和微指令的区别（询问张瑞华老师得知）：</h2><ul><li><p>一个<font color=#fbbc05>微操作</font>对应一条<font color=#34a853>微指令</font>，一条<font color=#34a853>微指令</font>可能有多个<font color=red>微命令</font>。</p></li><li><p><font color=#fbbc05>微操作</font>是动作，<font color=#34a853>微指令</font>是个编码。</p></li><li><p><font color=#fbbc05>微操作</font>是<font color=red>微命令</font>作用在硬件上的一个动作。课本上的<font color=#fbbc05>微操作</font>是在写指令流程时一条即一个箭头，这粒度比较粗。</p></li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://www.cnblogs.com/psymacome/p/8004756.html">微命令、微操作、微指令、微程序</a><br /><a href="https://zhidao.baidu.com/question/430749690.html">微程序 微命令 微指令概念区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】拟合算法</title>
      <link href="/2020/08/23/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/23/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言：</h1><p><img src="figures/%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/image-20200822232315265.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822232605096.png" alt="" /></p><h2 id="拟合和插值的区别"><a class="markdownIt-Anchor" href="#拟合和插值的区别"></a> 拟合和插值的区别</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822232330488.png" alt="" /></p><ul><li>插值要经过所有点</li><li>拟合不需要，只要这个曲线接近过所有点即可，只要保证误差足够小就可以。</li></ul><h2 id="最小二乘老生常谈了"><a class="markdownIt-Anchor" href="#最小二乘老生常谈了"></a> 最小二乘（老生常谈了</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822234917506.png" alt="" /></p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>r</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">arg</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>的意思是使我们函数最小的参数</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822235203575.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822235412968.png" alt="Matlab求解最小二乘" /></p><h2 id="如何评价拟合的好坏"><a class="markdownIt-Anchor" href="#如何评价拟合的好坏"></a> 如何评价拟合的好坏</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001031412.png" alt="" /></p><ul><li>选取多个函数求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li><li>做一个取舍，不是次方越高越好，目的是让函数简单。</li><li><strong>并不是所有的函数都有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></strong>，不是线性函数一般不能用。</li></ul><h3 id="什么是线性函数我们指的是对参数为线性而不是对变量为线性"><a class="markdownIt-Anchor" href="#什么是线性函数我们指的是对参数为线性而不是对变量为线性"></a> 什么是线性函数？（我们指的是对参数为线性，而不是对变量为线性）</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001106906.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001242735.png" alt="" /></p><h3 id="计算r2的代码"><a class="markdownIt-Anchor" href="#计算r2的代码"></a> 计算<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的代码</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001517809.png" alt="" /></p><h1 id="matlab-工具箱"><a class="markdownIt-Anchor" href="#matlab-工具箱"></a> matlab 工具箱</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823001809078.png" alt="" /></p><p><img src="figures/%E6%8B%9F%E5%90%88%E7%AE%97%E6%B3%95/image-20200823002020869.png" alt="" /></p><blockquote><p>点估计和区间估计</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002553166.png" alt="" /></p><h2 id="中心化"><a class="markdownIt-Anchor" href="#中心化"></a> 中心化</h2><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002524265.png" style="zoom:33%;" /><h1 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题：</h1><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=f(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823002917315.png" alt="" /></p><p>这里<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>没有意义（不是线性函数</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823003727472.png" alt="" /></p><h2 id="论文使用"><a class="markdownIt-Anchor" href="#论文使用"></a> 论文使用：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823004836146.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200823004916611.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】插值算法</title>
      <link href="/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
      <url>/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224142580.png" alt="" /></p><h2 id="一维插值问题"><a class="markdownIt-Anchor" href="#一维插值问题"></a> 一维插值问题</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224245521.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224333723.png" alt="" /></p><blockquote><p>最常见的就是分段插值</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224447942.png" alt="原理" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224501850.png" alt="" /></p><blockquote><p>一般给n+1个点用n阶多项式</p></blockquote><h2 id="拉格朗日插值法"><a class="markdownIt-Anchor" href="#拉格朗日插值法"></a> 拉格朗日插值法：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822224902577.png" alt="拉格朗日乘法" /></p><h3 id="缺陷龙格现象"><a class="markdownIt-Anchor" href="#缺陷龙格现象"></a> 缺陷：龙格现象</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225037684.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225135878.png" alt="" /></p><blockquote><p>因此用分段插值</p></blockquote><h2 id="分段插值"><a class="markdownIt-Anchor" href="#分段插值"></a> 分段插值</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225228954.png" alt="分段插值" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225319316.png" alt="分段二次插值\分段跑误插值" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225444170.png" alt="牛顿插值法，不是牛顿提出的" /></p><h2 id="拉格朗日插值-牛顿插值"><a class="markdownIt-Anchor" href="#拉格朗日插值-牛顿插值"></a> 拉格朗日插值、牛顿插值</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225554372.png" alt="与拉格朗日插值法相比，有继承性" /></p><blockquote><p>牛顿插值和拉格朗日插值法都有龙格现象</p></blockquote><h2 id="埃尔米特插值法重要"><a class="markdownIt-Anchor" href="#埃尔米特插值法重要"></a> 埃尔米特插值法（重要）</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225704274.png" alt="埃尔米特特插值" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225725177.png" alt="" /></p><h1 id="最常用分段三次埃尔米特插值和三次样条插值"><a class="markdownIt-Anchor" href="#最常用分段三次埃尔米特插值和三次样条插值"></a> 最常用：分段三次埃尔米特插值和三次样条插值</h1><h2 id="分段三次埃尔米特插值"><a class="markdownIt-Anchor" href="#分段三次埃尔米特插值"></a> 分段三次埃尔米特插值</h2><blockquote><p>matlab 种 pchip 有现成函数</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822225942589.png" alt="" /></p><h2 id="三次样条插值"><a class="markdownIt-Anchor" href="#三次样条插值"></a> 三次样条插值：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822230735222.png" alt="" /></p><blockquote><p>条件很苛刻</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822230801664.png" alt="matlab方法" /></p><h2 id="对比"><a class="markdownIt-Anchor" href="#对比"></a> 对比：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231152794.png" alt="" /></p><h2 id="n维数据插值"><a class="markdownIt-Anchor" href="#n维数据插值"></a> n维数据插值：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231325373.png" alt="" /></p><h2 id="小技巧可以预测"><a class="markdownIt-Anchor" href="#小技巧可以预测"></a> 小技巧：可以预测</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231538496.png" alt="" /></p><h1 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231858847.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822231931921.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】模糊综合评价模型</title>
      <link href="/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/08/22/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="模糊综合评价模型"><a class="markdownIt-Anchor" href="#模糊综合评价模型"></a> 模糊综合评价模型</h1><p><strong>综合：多个指标，有多个权重</strong></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821212648015.png" alt="" /></p><h1 id="概述引子"><a class="markdownIt-Anchor" href="#概述引子"></a> 概述（引子</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821212841494.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213032085.png" alt="量就是各种数字" /></p><p>PS：量就是数字</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213134182.png" alt="" /></p><h1 id="模糊集合"><a class="markdownIt-Anchor" href="#模糊集合"></a> 模糊集合</h1><h2 id="经典集合"><a class="markdownIt-Anchor" href="#经典集合"></a> 经典集合：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821213454247.png" alt="" /></p><p>特征函数？</p><h2 id="模糊集合-2"><a class="markdownIt-Anchor" href="#模糊集合-2"></a> 模糊集合：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821214009814.png" alt="" /></p><ul><li>用<strong>隶属度</strong>来描述元素在不在集合里。</li><li><strong>隶属函数</strong>充满随意性😁，没有约定俗成的方法，只要合理就可以了。</li></ul><blockquote><p>模糊集合的三种表示法（不重要</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821214709945.png" alt="" /></p><ul><li>Zadeh 这里只是一种计发，数学意义不强。这样放便积分</li><li>第二种计法不方便表示无穷的集合</li></ul><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821215102453.png" alt="" /></p><ul><li>论域$\mho $可以是无限个元素</li></ul><h1 id="隶属函数的三种确定方法"><a class="markdownIt-Anchor" href="#隶属函数的三种确定方法"></a> 隶属函数的三种确定方法</h1><blockquote><p>虽然隶属函数充满随意性，但还是有三种方法的</p></blockquote><h2 id="模糊统计法数模中用的很少"><a class="markdownIt-Anchor" href="#模糊统计法数模中用的很少"></a> 模糊统计法（数模中用的很少</h2><p>因为需要统计，所以数模不咋用。但是发论文就会用到了</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821215823457.png" alt="因为需要统计，所以数模不咋用。但是发论文就会用到了" /></p><h2 id="借助已有的客观尺度"><a class="markdownIt-Anchor" href="#借助已有的客观尺度"></a> 借助已有的客观尺度</h2><blockquote><p>找到合适的指标</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220043524.png" alt="" /></p><h2 id="指派法主观性强但建模中80都用这个"><a class="markdownIt-Anchor" href="#指派法主观性强但建模中80都用这个"></a> 指派法（主观性强，但建模中80%都用这个）</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220303239.png" alt="image-20200821220303239" /></p><ul><li>用的比较多的是梯形分布</li></ul><h3 id="用的比较多的梯形分布"><a class="markdownIt-Anchor" href="#用的比较多的梯形分布"></a> 用的比较多的梯形分布</h3><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821220638211.png" alt="梯形分布例题" style="zoom:80%;" /><ul><li>求出一个值在每一个等级的隶属度</li></ul><h1 id="应用评价问题的概述"><a class="markdownIt-Anchor" href="#应用评价问题的概述"></a> 应用：评价问题的概述</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821232831047.png" alt="" /></p><ul><li>应用部分，符号发生了点变化，以这个为主。</li><li>因素集的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>和评语集的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>没有关系。</li></ul><h1 id="应用1一级综合模糊评价模型一个员工进行考核隶属度采用模糊统计法"><a class="markdownIt-Anchor" href="#应用1一级综合模糊评价模型一个员工进行考核隶属度采用模糊统计法"></a> 应用1：一级综合模糊评价模型：一个员工进行考核（隶属度采用：模糊统计法）</h1><blockquote><p>注意这个例子是对一个员工进行考核</p><p>一个员工有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个指标【业务能力，政治能力】</p><p>一个员工有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>种可能的评语【优秀，良好】</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233421488.png" alt="" /></p><h2 id="步骤一确定因素集n5相关性不强"><a class="markdownIt-Anchor" href="#步骤一确定因素集n5相关性不强"></a> 步骤一：确定因素集（n&lt;=5，相关性不强）</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233548764.png" alt="" /></p><h2 id="步骤二确定评语集"><a class="markdownIt-Anchor" href="#步骤二确定评语集"></a> 步骤二：确定评语集</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233600547.png" alt="" /></p><h2 id="步骤三确定权重"><a class="markdownIt-Anchor" href="#步骤三确定权重"></a> 步骤三：确定权重</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233620425.png" alt="" /></p><h3 id="司守奎教授怎么做"><a class="markdownIt-Anchor" href="#司守奎教授怎么做"></a> 司守奎教授怎么做</h3><ul><li>Delphi法：不断反馈，专家赋权</li></ul><hr /><h3 id="我们怎么做"><a class="markdownIt-Anchor" href="#我们怎么做"></a> 我们怎么做：</h3><ul><li>无数据：层次分析法</li><li>有数据：熵权法</li></ul><h2 id="步骤四确定模糊判断矩阵"><a class="markdownIt-Anchor" href="#步骤四确定模糊判断矩阵"></a> 步骤四：确定模糊判断矩阵</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233834594.png" alt="" /></p><p>例如：</p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821233901046.png" style="zoom: 67%;" /><h2 id="步骤五综合评判"><a class="markdownIt-Anchor" href="#步骤五综合评判"></a> 步骤五：综合评判</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821234208591.png" alt="" /></p><p>矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>相当于要评价的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个评语（对象），对于各个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个因素（指标的）权重的隶属度。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821234936426.png" alt="" /></p><blockquote><p>确定权重不要忘记一致性检验</p></blockquote><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821235504476.png" style="zoom:80%;" /><h1 id="应用2一级综合模糊评价模型-单日空气质量评测隶属度采用指派法"><a class="markdownIt-Anchor" href="#应用2一级综合模糊评价模型-单日空气质量评测隶属度采用指派法"></a> 应用2：一级综合模糊评价模型 ：单日空气质量评测（隶属度采用：指派法）</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200821235927773.png" alt="" /></p><h2 id="计算"><a class="markdownIt-Anchor" href="#计算"></a> 计算：</h2><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000320842.png" style="zoom:80%;" /><blockquote><p>这里注意，四个评语的隶属度的和不一定为1</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000416619.png" alt="" /></p><h1 id="应用3一级综合模糊评价模型-露天矿采有约束a指标权重矩阵可以用熵权法"><a class="markdownIt-Anchor" href="#应用3一级综合模糊评价模型-露天矿采有约束a指标权重矩阵可以用熵权法"></a> 应用3：一级综合模糊评价模型 ：露天矿采（有约束|A指标权重矩阵可以用熵权法）</h1><h2 id="确定隶属函数"><a class="markdownIt-Anchor" href="#确定隶属函数"></a> 确定隶属函数</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822000628259.png" alt="" /></p><p>偏大型：越大越好</p><p>偏小型：越小越好（也得转化成偏大型，有点类似正向化</p><blockquote><p>写作技巧：</p><p>根据专家的建议</p><p>根据他人写的文章</p></blockquote><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822001327420.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822001406210.png" alt="" /></p><blockquote><p>这里B和R加权不为1很正常</p></blockquote><h1 id="应用4二级综合模糊评价模型-学生奖学金评价"><a class="markdownIt-Anchor" href="#应用4二级综合模糊评价模型-学生奖学金评价"></a> 应用4：二级综合模糊评价模型 ：学生奖学金评价</h1><p>指标太多，相关性很强。（10个指标，没分类。采用层次分析法就得两两比较）</p><h2 id="二级综合评价模型例子"><a class="markdownIt-Anchor" href="#二级综合评价模型例子"></a> 二级综合评价模型例子：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002209890.png" alt="" /></p><h2 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h2><h3 id="第一步划分因素集"><a class="markdownIt-Anchor" href="#第一步划分因素集"></a> 第一步：划分因素集</h3><p>主观性强，看相关性</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002401836.png" alt="" /></p><h3 id="第二步确定评语集"><a class="markdownIt-Anchor" href="#第二步确定评语集"></a> 第二步：确定评语集</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002441488.png" alt="" /></p><p>把二级当一级来操作</p><h3 id="第三步再对一级尽速进行综合评判得出结果"><a class="markdownIt-Anchor" href="#第三步再对一级尽速进行综合评判得出结果"></a> 第三步：再对一级尽速进行综合评判得出结果</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822002654377.png" alt="" /></p><h2 id="应用4三级综合模糊评价模型-陶瓷评判"><a class="markdownIt-Anchor" href="#应用4三级综合模糊评价模型-陶瓷评判"></a> 应用4：三级综合模糊评价模型 ：陶瓷评判</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822003456700.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200822003820226.png" alt="PS：指标必须进行正向话（指标越大越好）" /></p><blockquote><p>PS：指标必须进行正向话（指标越大越好）</p></blockquote><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h1><p>如果没有数据，评价数太多，尽量必要使用模糊综合评价模型（时间不够）</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】灰色关联分析</title>
      <link href="/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><p>进行系统分析和综合评价。</p><p>根据图形相似程度进行分析。（灰色系统是国内的人提出的，回归分析是国外人推荐的。）</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820220922615.png" alt="概述" /></p><h1 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤</h1><h2 id="步骤一画统计图-进行一些简单的分析"><a class="markdownIt-Anchor" href="#步骤一画统计图-进行一些简单的分析"></a> 步骤一：画统计图、进行一些简单的分析</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221737569.png" alt="" /></p><p>用回归分析的多重共线性问题？</p><h2 id="步骤二确定分析序列"><a class="markdownIt-Anchor" href="#步骤二确定分析序列"></a> 步骤二：确定分析序列</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221851322.png" alt="" /></p><h2 id="步骤三对数据进行预处理去量纲-简化计算"><a class="markdownIt-Anchor" href="#步骤三对数据进行预处理去量纲-简化计算"></a> 步骤三：对数据进行预处理（去量纲、简化计算）</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820221935947.png" alt="为什么这样做（解释不清，大家都这么用）" /></p><h2 id="步骤四计算子序列和母序列的关联系数"><a class="markdownIt-Anchor" href="#步骤四计算子序列和母序列的关联系数"></a> 步骤四：计算子序列和母序列的关联系数</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820222525637.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820222637406.png" alt="" /></p><p>注意分辨系数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">ρ</span></span></span></span></p><h2 id="步骤五计算灰色关联度"><a class="markdownIt-Anchor" href="#步骤五计算灰色关联度"></a> 步骤五：计算灰色关联度</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223239840.png" alt="" /></p><h2 id="步骤六看谁关联度最大"><a class="markdownIt-Anchor" href="#步骤六看谁关联度最大"></a> 步骤六：看谁关联度最大</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223310561.png" alt="" /></p><h1 id="讨论"><a class="markdownIt-Anchor" href="#讨论"></a> 讨论：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820223801106.png" alt="" /></p><h1 id="灰色关联分析用于综合评价"><a class="markdownIt-Anchor" href="#灰色关联分析用于综合评价"></a> 灰色关联分析用于综合评价</h1><ul><li><p>AHP用于没有数据</p></li><li><p>TOPSIS用于有数据</p></li><li><p>灰色关联分析用于有数据</p></li></ul><hr /><p>TOPSIS 确定熵权：</p><ul><li>层次分析法（AHP</li><li>熵权法</li><li><s>灰色关联度（忽略掉，极少用）</s></li></ul><h2 id="步骤-2"><a class="markdownIt-Anchor" href="#步骤-2"></a> 步骤：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820224423285.png" alt="步骤" /></p><p>步骤二的预处理是灰色关联分析的预处理</p><h3 id="matlab的技巧"><a class="markdownIt-Anchor" href="#matlab的技巧"></a> matlab的技巧</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820225207492.png" alt="用于求每列最大值" /></p><h1 id="归一化和标准化的区别"><a class="markdownIt-Anchor" href="#归一化和标准化的区别"></a> 归一化和标准化的区别</h1><p>归一化：方便度量、方便分析</p><p>标准化：去掉量纲</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】熵权法</title>
      <link href="/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/"/>
      <url>/2020/08/20/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E7%86%B5%E6%9D%83%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="熵权法"><a class="markdownIt-Anchor" href="#熵权法"></a> 熵权法</h1><h1 id="问题的提出层次分析法主观性太强"><a class="markdownIt-Anchor" href="#问题的提出层次分析法主观性太强"></a> 问题的提出:层次分析法主观性太强</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212240743.png" alt="" /></p><p>变异程度是方差（变化不大</p><h2 id="如何衡量信息量的大小为什么是方差"><a class="markdownIt-Anchor" href="#如何衡量信息量的大小为什么是方差"></a> 如何衡量信息量的大小（为什么是方差？</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212448869.png" alt="image-20200820212448869" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820212932888.png" alt="" /></p><h3 id="信息熵"><a class="markdownIt-Anchor" href="#信息熵"></a> 信息熵:</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213257527.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213438001.png" alt="" /></p><h1 id="熵权法的步骤"><a class="markdownIt-Anchor" href="#熵权法的步骤"></a> 熵权法的步骤</h1><h2 id="第一步判断矩阵中是否有负数"><a class="markdownIt-Anchor" href="#第一步判断矩阵中是否有负数"></a> 第一步：判断矩阵中是否有负数</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213636433.png" alt="" /></p><h2 id="第二部计算概率感觉有点问题但大家都这样"><a class="markdownIt-Anchor" href="#第二部计算概率感觉有点问题但大家都这样"></a> 第二部：计算概率（感觉有点问题，但大家都这样</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213712434.png" alt="感觉这样做有待商榷，但都这样用" /></p><h3 id="第三步计算信息熵并归一化得到熵权"><a class="markdownIt-Anchor" href="#第三步计算信息熵并归一化得到熵权"></a> 第三步：计算信息熵，并归一化得到熵权</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820213922636.png" alt="" /></p><h2 id="背后原理"><a class="markdownIt-Anchor" href="#背后原理"></a> 背后原理</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200820214025623.png" alt="" /></p><h1 id="熵权法和层次分析法"><a class="markdownIt-Anchor" href="#熵权法和层次分析法"></a> 熵权法和层次分析法</h1><h2 id="熵权法-2"><a class="markdownIt-Anchor" href="#熵权法-2"></a> 熵权法：</h2><p>不一定太科学，值得商榷。</p><h2 id="层次分析法"><a class="markdownIt-Anchor" href="#层次分析法"></a> 层次分析法：</h2><p>专家赋权，太主观。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结：</h2><p>我觉得比赛可以俩都用，毕竟熵权法可以直接调用。</p><p>解决综合评价的 层次分析法和TOPSIS<br />熵权法可以用来给TOPSIS赋权</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】TOPSIS|优劣解距离法</title>
      <link href="/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91TOPSIS-%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95/"/>
      <url>/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91TOPSIS-%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="topsis"><a class="markdownIt-Anchor" href="#topsis"></a> TOPSIS</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819214718017.png" alt="前言" /></p><h2 id="层次分析法的局限"><a class="markdownIt-Anchor" href="#层次分析法的局限"></a> 层次分析法的局限：</h2><ul><li>决策层不能太多</li><li>如果又数据已知，不能利用这些数据</li></ul><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819214852267.png" alt="层次分析法局限性" /></p><h1 id="问题的提出"><a class="markdownIt-Anchor" href="#问题的提出"></a> 问题的提出：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215436539.png" alt="提出问题" /></p><h2 id="为什么要这样算"><a class="markdownIt-Anchor" href="#为什么要这样算"></a> 为什么要这样算：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215559782.png" alt="归一化" /></p><p>为什么制表 要 max min</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215623623.png" alt="为什么要这样归一化" /></p><h2 id="极大型效益型指标和极小型成本型指标"><a class="markdownIt-Anchor" href="#极大型效益型指标和极小型成本型指标"></a> 极大型（效益型）指标和极小型（成本型）指标：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819215855541.png" alt="" /></p><h3 id="统一指标类型"><a class="markdownIt-Anchor" href="#统一指标类型"></a> 统一指标类型</h3><p><strong>指标正向化</strong>（最常用）（PS：当然可以反过来</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220105950.png" alt="" /></p><h3 id="标准化消去量纲"><a class="markdownIt-Anchor" href="#标准化消去量纲"></a> 标准化（消去量纲）：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220413290.png" alt="标准化（消去量纲）" /></p><h2 id="如何计算"><a class="markdownIt-Anchor" href="#如何计算"></a> 如何计算：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220607697.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819220719914.png" alt="" /></p><p>看似麻烦，其实很简单。就是每取出每一列的最大值和最小值形成单独的向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Z</mi><mo>+</mo></msup></mrow><annotation encoding="application/x-tex">Z^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Z</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">Z^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span>然后每一行去用欧式距离算量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>D</mi><mi>i</mi><mo>+</mo></msubsup></mrow><annotation encoding="application/x-tex">D_i^+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088326em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4231360000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">+</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span> 和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>D</mi><mi>i</mi><mo>−</mo></msubsup></mrow><annotation encoding="application/x-tex">D_i^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.088326em;vertical-align:-0.276864em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.811462em;"><span style="top:-2.4231360000000004em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221322949.png" alt="" /></p><h2 id="因此topsis被称为优劣解距离法"><a class="markdownIt-Anchor" href="#因此topsis被称为优劣解距离法"></a> 因此TOPSIS被称为优劣解距离法：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221413159.png" alt="TOPSIS介绍" /></p><h1 id="深入topsis"><a class="markdownIt-Anchor" href="#深入topsis"></a> 深入：TOPSIS</h1><h2 id="第一步原始矩阵正向话"><a class="markdownIt-Anchor" href="#第一步原始矩阵正向话"></a> 第一步：原始矩阵正向话</h2><h3 id="常见的四种指标"><a class="markdownIt-Anchor" href="#常见的四种指标"></a> 常见的四种指标</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221521514.png" alt="" /></p><h3 id="极小型到极大型"><a class="markdownIt-Anchor" href="#极小型到极大型"></a> 极小型到极大型</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221623113.png" alt="" /></p><h3 id="中间型到极大型"><a class="markdownIt-Anchor" href="#中间型到极大型"></a> 中间型到极大型</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221657855.png" alt="" /></p><h3 id="区间型到最大型"><a class="markdownIt-Anchor" href="#区间型到最大型"></a> 区间型到最大型</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819221910539.png" alt="" /></p><h2 id="第二步正向化标准矩阵消除量纲影响"><a class="markdownIt-Anchor" href="#第二步正向化标准矩阵消除量纲影响"></a> 第二步：正向化标准矩阵（消除量纲影响</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222148109.png" alt="" /></p><h2 id="第三步计算得分并归一化"><a class="markdownIt-Anchor" href="#第三步计算得分并归一化"></a> 第三步：计算得分并归一化</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222219776.png" alt="" /></p><h3 id="为什么要归一化"><a class="markdownIt-Anchor" href="#为什么要归一化"></a> 为什么要归一化？</h3><ul><li>在基于梯度下降的算法中，使用特征归一化方法将特征统一量纲，能够提高模型收敛速度和最终的模型精度。</li><li>归一化目的就是将不同尺度上的评判结果统一到一个尺度上，从而可以作比较，作计算</li><li>矢量是归一化比较常见的使用场景。因为一般矢量只关心方向，距离，长度没有意义。因此归一化就是将x，y，z3个值放入0-1.0的范围内。</li></ul><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819222926875.png" alt="" /></p><h1 id="模型扩展上面是默认所有指标权重相同"><a class="markdownIt-Anchor" href="#模型扩展上面是默认所有指标权重相同"></a> 模型扩展（上面是默认所有指标权重相同）：</h1><h2 id="带权重的topsis用层次分析法赋予指标权重"><a class="markdownIt-Anchor" href="#带权重的topsis用层次分析法赋予指标权重"></a> 带权重的TOPSIS（用层次分析法赋予指标权重</h2><p>因为各个指标有不同权重，只需用层次分析法求出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>稍作修改模型即可：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819223523864.png" alt="" /></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】排队论&amp;层次分析法（AHP</title>
      <link href="/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8E%92%E9%98%9F%E8%AE%BA-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90/"/>
      <url>/2020/08/19/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%91%E6%8E%92%E9%98%9F%E8%AE%BA-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="排队论"><a class="markdownIt-Anchor" href="#排队论"></a> 排队论</h1><p>这篇博客写的太好了，我就偷懒一点：</p><p><a href="https://blog.csdn.net/sunyueqinghit/article/details/81562138">数学建模之排队论</a></p><p>排队论的一般模型：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20180810130528383.jpg" alt="img" /></p><p>这里要注意，分析清除排队论种的排队顾客具体是谁。19年国赛C的顾客就是<strong>汽车司机</strong>，不是乘客。</p><h2 id="排队系统的组成和特征"><a class="markdownIt-Anchor" href="#排队系统的组成和特征"></a> 排队系统的组成和特征</h2><p>一般的排队过程都由输入过程、排队规则、服务过程三部分组成</p><h3 id="排队规则"><a class="markdownIt-Anchor" href="#排队规则"></a> 排队规则</h3><p>排队规则指到达排队系统的顾客按怎样的规则排队等待，可分为损失制，等待制和 混合制三种.</p><ol><li>损失制（消失制）。当顾客到达时，所有的服务台均被占用，顾客随即离去。</li><li>等待制。当顾客到达时，所有的服务台均被占用，顾客就排队等待，直到接 受完服务才离去。例如出故障的机器排队等待维修就是这种情况。</li></ol><p>排队方式还分为单列、多列和循环队列。</p><h3 id="服务过程"><a class="markdownIt-Anchor" href="#服务过程"></a> 服务过程</h3><ul><li><p>先到先服务 FCFS</p></li><li><p>后到先服务 LCFS （很少见）</p></li></ul><h3 id="排队模型的符号表示直接复制了"><a class="markdownIt-Anchor" href="#排队模型的符号表示直接复制了"></a> 排队模型的符号表示（直接复制了</h3><p>排队模型用六个符号表示，在符号之间用斜线隔开，即 X/Y/Z/A/B/C 。第一 个符号 X 表示顾客到达流或顾客到达间隔时间的分布；第二个符号Y 表示服务时间的 分布；第三个符号Z 表示服务台数目；第四个符号 A是系统容量限制；第五个符号B 是 顾客源数目；第六个符号C 是服务规则，如先到先服务 FCFS，后到先服务 LCFS 等。并 约定，如略去后三项，即指X/Y/Z/∞/∞/FCFS的情形。我们只讨论先到先服务 FCFS 的情形，所以略去第六项。<br />表示顾客到达间隔时间和服务时间的分布的约定符号为：<br />M —指数分布（M 是 Markov 的字头，因为指数分布具有无记忆性，即 Markov 性）；<br />D—确定型（Deterministic）；<br />Ek —k 阶爱尔朗(Erlang)分布；<br />G —一般（general）服务时间的分布；<br />GI —一般相互独立（General Independent）的时间间隔的分布。<br />例如，M/M/1表示相继到达间隔时间为指数分布、服务时间为指数分布、单服务台、等待制系统。<br />D/M/c/表示确定的到达时间、服务时间为指数分布、c个平行服务台（但顾客是一队）的模型。</p><h2 id="求解方法"><a class="markdownIt-Anchor" href="#求解方法"></a> 求解方法：</h2><h3 id="简单时公式推导"><a class="markdownIt-Anchor" href="#简单时公式推导"></a> 简单时，公式推导：</h3><h3 id="多服务台模型-mms也是19年c会用到的模型"><a class="markdownIt-Anchor" href="#多服务台模型-mms也是19年c会用到的模型"></a> 多服务台模型（ M/M/s/∞）（也是19年C会用到的模型</h3><p>设顾客单个到达，相继到达时间间隔服从参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">λ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">λ</span></span></span></span> 的负指数分布，系统中共有s个 服务台，每个服务台的服务时间相互独立，且服从参数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">μ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span></span></span></span> 的负指数分布。当顾客到达时，若有空闲的服务台则马上接受服务，否则便排成一个队列等待，等待时间为无限。</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20180810133729317.jpg" alt="img" /></p><h3 id="复杂时计算机模拟"><a class="markdownIt-Anchor" href="#复杂时计算机模拟"></a> 复杂时，计算机模拟：</h3><p>我把代码放在了Dropbox里</p><h1 id="层次分析法ahp"><a class="markdownIt-Anchor" href="#层次分析法ahp"></a> 层次分析法（AHP</h1><p>这个清风老师的视频真的讲的太好了。感觉亏了一个亿</p><h2 id="解决评价类问题要想到的问题"><a class="markdownIt-Anchor" href="#解决评价类问题要想到的问题"></a> 解决评价类问题要想到的问题</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818235841311.png" alt="image-20200818235841311" /></p><p>评价类问题的核心就是要有这张权重表格：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819000036572.png" alt="image-20200819000036572" /></p><p>在没有数据的情况下，可以采用层次分析法，来衡量这些参数：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818220913536.png" alt="image-20200818220913536" /></p><h2 id="指标如何得出"><a class="markdownIt-Anchor" href="#指标如何得出"></a> 指标如何得出？</h2><p>核心求出<strong>判断矩阵</strong></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200818221216938.png" alt="" /></p><h3 id="权重计算方法的干活"><a class="markdownIt-Anchor" href="#权重计算方法的干活"></a> 权重计算方法的干活：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200819000241019.png" alt="image-20200819000241019" /></p><h2 id="ps"><a class="markdownIt-Anchor" href="#ps"></a> PS</h2><p>之前雅莉姐姐在 Week share 种介绍了用SPSS求解主成分分析，基本就是一键呆瓜式操作，明天试一试</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数学建模】2019国赛C</title>
      <link href="/2020/08/16/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%912019%E5%9B%BD%E8%B5%9BC/"/>
      <url>/2020/08/16/%E3%80%90%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E3%80%912019%E5%9B%BD%E8%B5%9BC/</url>
      
        <content type="html"><![CDATA[<h1 id="司守奎教授的讲解"><a class="markdownIt-Anchor" href="#司守奎教授的讲解"></a> 司守奎教授的讲解</h1><p>核心：这题不应该往<strong>排队论</strong>和<strong>综合评价</strong>上靠，而应该进行<strong>机理分析</strong>，整个讲解过程没有用到高大上的模型，都是一步一步推到出来的。</p><h2 id="第一问"><a class="markdownIt-Anchor" href="#第一问"></a> 第一问：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="出租车司机经济效益的核心两点是排队等待的出租车数量和可能乘坐出租车的乘客数量" /></p><h3 id="问题核心考虑出租车的经济效益"><a class="markdownIt-Anchor" href="#问题核心考虑出租车的经济效益"></a> 问题核心，考虑出租车的经济效益：</h3><p>即考虑返回成本和等待时间</p><h4 id="返回成本"><a class="markdownIt-Anchor" href="#返回成本"></a> 返回成本：</h4><p>确定</p><h4 id="等待成本"><a class="markdownIt-Anchor" href="#等待成本"></a> 等待成本：</h4><ul><li>排队等待的出租车数量</li><li>可能乘坐出租车的乘客数量</li></ul><h2 id="影响出租车效益的主要因素"><a class="markdownIt-Anchor" href="#影响出租车效益的主要因素"></a> 影响出租车效益的主要因素：</h2><h3 id="1空载成本-2-载客收益"><a class="markdownIt-Anchor" href="#1空载成本-2-载客收益"></a> (1)空载成本 (2) 载客收益：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%201.png" alt="" /></p><h3 id="3乘客数"><a class="markdownIt-Anchor" href="#3乘客数"></a> （3）乘客数：</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%202.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%203.png" alt="" /></p><p><font color=red>**小tick：**这个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>  是随意取得，经验函数。</font></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%204.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 取什么也无所谓，80% 90% 100%都行，关键要有。</p><h3 id="4出租车等待时间"><a class="markdownIt-Anchor" href="#4出租车等待时间"></a> （4）出租车等待时间</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%205.png" alt="" /></p><ul><li>可以考虑排队论，但注意是出租车在排队</li></ul><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%206.png" alt="" /></p><p>如果想连续考虑，可以做个拟合，变成连续函数。也可以离散掉，以min为单位</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%207.png" alt="" /></p><p><font color=red>做个假设，服务时间服从于负指数函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>（<strong>小tick）</strong></font></p><p>（基本的排队论模型是按照常数算的，效果差一点</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%208.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%209.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2010.png" alt="" /></p><p>这里的公式看似复杂，实则就是排队论的推到。而且式中大部分为常数，代入即可。</p><h3 id="5等待成本"><a class="markdownIt-Anchor" href="#5等待成本"></a> （5）等待成本</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2011.png" alt="" /></p><h3 id="6空载的潜在损失"><a class="markdownIt-Anchor" href="#6空载的潜在损失"></a> （6）空载的潜在损失</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2012.png" alt="" /></p><h3 id="7决策准则"><a class="markdownIt-Anchor" href="#7决策准则"></a> （7）决策准则</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2013.png" alt="" /></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 应该是基本成本（空载路费？</p><h2 id="第二问"><a class="markdownIt-Anchor" href="#第二问"></a> 第二问：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2014.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2015.png" alt="" /></p><h2 id="第三问"><a class="markdownIt-Anchor" href="#第三问"></a> 第三问：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2016.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2017.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2018.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2019.png" alt="" /></p><p>保证安全条件下，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>不会太大</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2020.png" alt="" /></p><p>这个题，这里是讨论的乘客足够多的情况，而不是乘客不够的情况，把<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>简化了，为常数，易于分析。</p><h3 id="第四问"><a class="markdownIt-Anchor" href="#第四问"></a> 第四问</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/Untitled%2021.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200816213650272.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200816213709592.png" alt="" /></p><p>没有后面的视频了，第四问没有听，可惜。</p><h1 id="优秀论文c044-c137-c308阅读"><a class="markdownIt-Anchor" href="#优秀论文c044-c137-c308阅读"></a> 优秀论文C044、C137、C308阅读</h1><p>这个明天晚上之前整理出来</p><h1 id="反思分析"><a class="markdownIt-Anchor" href="#反思分析"></a> 反思分析</h1><p>去年我们队也做的C题，我队这个题感触颇多。</p><h2 id="值得肯定的地方"><a class="markdownIt-Anchor" href="#值得肯定的地方"></a> 值得肯定的地方：</h2><p>确实是机理分析了</p><h2 id="需要改进的地方"><a class="markdownIt-Anchor" href="#需要改进的地方"></a> 需要改进的地方：</h2><ul><li><p>重点错误，花费了大量时间在第三问上，忽略了第一问，导致第一问篇幅太短，推导太过随意</p></li><li><p>没有进行模型检验，只是简单的得出结果。相当于文章写了一半没写完，这是硬伤。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖阿里云实例到期后使用竞价实例迁移系统</title>
      <link href="/2020/08/15/%E7%99%BD%E5%AB%96%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E5%8A%9B%E5%88%B0%E6%9C%9F%E5%90%8E%E4%BD%BF%E7%94%A8%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/08/15/%E7%99%BD%E5%AB%96%E9%98%BF%E9%87%8C%E4%BA%91%E5%AE%9E%E5%8A%9B%E5%88%B0%E6%9C%9F%E5%90%8E%E4%BD%BF%E7%94%A8%E7%AB%9E%E4%BB%B7%E5%AE%9E%E4%BE%8B%E8%BF%81%E7%A7%BB%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>寒假嫖的阿里云2h4g实例到期了。因为配置了web服务器，嫌重新配置比较麻烦，听天天哥哥说竞价实例比较便宜，现利用竞价实例迁移系统。</p><h1 id="创建自定义镜像"><a class="markdownIt-Anchor" href="#创建自定义镜像"></a> 创建自定义镜像：</h1><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193558402.png" alt="" /></p><p>这里注意一下你的实例地区，要和购买的竞价实例地区一致</p><h2 id="迁移镜像到购买地区"><a class="markdownIt-Anchor" href="#迁移镜像到购买地区"></a> 迁移镜像到购买地区：</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193651547.png" alt="点击复制镜像" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193720741.png" alt="选择竞价实例地址" /></p><p>等待镜像创建、迁移完成。镜像创建和迁移都要等一段时间。</p><h1 id="购买实例"><a class="markdownIt-Anchor" href="#购买实例"></a> 购买实例：</h1><p>在创建实例界面选择抢式实例并选择地区和配置。</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815193416811.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815194032750.png" alt="" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200815194255556.png" alt="流量计费，配置安全组" /></p><p>确认订单即可</p><h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1><p>这样操作会直接将原系统迁移过来，大功告成</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何深入浅出的理解Kosaraju</title>
      <link href="/2020/06/28/%E5%A6%82%E4%BD%95%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9A%84%E7%90%86%E8%A7%A3kosaraju/"/>
      <url>/2020/06/28/%E5%A6%82%E4%BD%95%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E7%9A%84%E7%90%86%E8%A7%A3kosaraju/</url>
      
        <content type="html"><![CDATA[<h1 id="如何深入浅出的理解kosaraju"><a class="markdownIt-Anchor" href="#如何深入浅出的理解kosaraju"></a> 如何深入浅出的理解Kosaraju</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>今天想起来Kosaraju，网上关于这个算法的介绍比较少。（毕竟Tarjan太强了）。但是Tarjan和Kosaraju的复杂度都是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(V+E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>的，Kosaraju的常数要大一点。（网上有的博客说kosaraju会卡爆栈，个人感觉不会，退化成链的情况Tarjan和Kosaraju都会一搜到底）。</p><p>那为什么Kosaraju常数大还要学它呢，用Tarjan不好吗？</p><p>因为它简单、好理解啊。毕竟Tarjan难理解是出了名的。</p><h1 id="正题"><a class="markdownIt-Anchor" href="#正题"></a> 正题</h1><h2 id="一些必要概念"><a class="markdownIt-Anchor" href="#一些必要概念"></a> 一些必要概念</h2><p>网上介绍各种概念五花八门，不够深入浅出。首先要理解这几个概念：</p><ul><li>前序序列（从一点开始遍历，结点进入的序列）</li><li>后序序列（从一点开始遍历，结点退出的序列）</li><li><strong>逆后序序列</strong>（就是后序序列的逆序，没什么高深的意思，<s>所以百度搜不到</s>）</li><li>图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span></li><li>反图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>（将图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span>的各个边反过来重新建图，出边改入边）</li><li>强连通分量SCC（移步百度）</li></ul><p>求前序序列和后序序列的代码（如果上面不理解，看看代码就懂了）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, dcnt, fcnt, c[N], d[N], vis[N], f[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    d[x] = ++dcnt;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) <span class="built_in">dfs</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    v[x].n = ++fcnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = fcnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) <span class="built_in">dfs</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kosaraju如和实现"><a class="markdownIt-Anchor" href="#kosaraju如和实现"></a> Kosaraju如和实现</h2><p>两遍DFS：</p><ul><li><p>第一遍，求出图G的逆后序序列。</p></li><li><p>第二遍，根据逆后序序列，在反图<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>G</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">G&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>上进行DFS，每次能dfs点就在一个强连通分量里。</p></li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, c[N], dfn[N], vis[N], dcnt, scnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G1[N], G2[N];  <span class="comment">// G1 原图，G2 反向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;         <span class="comment">// 求后序序列</span></span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G1[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) <span class="built_in">dfs1</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    dfn[++dcnt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    c[x] = scnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G2[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[y]) <span class="built_in">dfs2</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) <span class="built_in">dfs1</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 反过来遍历dfn就是逆后序序列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[dfn[i]]) ++scnt, <span class="built_in">dfs2</span>(dfs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="why如何理解"><a class="markdownIt-Anchor" href="#why如何理解"></a> Why？如何理解</h2><p>详细的数学证明请参考《算法导论》，这里给出如何一种正确理解的方法。</p><p>首先要知道：</p><ul><li>原图和反图具有相同的SCC（强连通分量）。</li></ul><p>那为什么要求后序序列或者逆后序序列呢？</p><p>实际上是在求一个拓扑排序，但是带环图没有拓扑排序的概念，这个逆后序序列就差不多是原图缩点后的拓扑排序序列。</p><p><img src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200627235415880.png" alt="image-20200627235415880" /></p><p>如图所示，从1号节点开始逆后序序列为：8、1、3、2、7、4、5、6</p><p>缩点后就是：</p><p><img src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200813170642521.png" alt="image-20200813170642521" /></p><p><strong>此图的拓扑排序为：S3（8）、S2（1、3、2）、S1（7、4、5、6）</strong></p><p>然后如果在反图上按照逆拓扑序列遍历的话每次只会遍历到一个SCC。这样，这个算法就可以正常求出所有强连通分量了</p><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><p>为什么要在反图上做逆后序序列？在原图上做后序序列不可以吗？</p><p>是这样的，上述给的例子，在原图上做后序序列是完全可以的。但只要稍加改动，原图的逆序序列有很多种（并不唯一）。比如：</p><ul><li>逆后序序列1：8、1、3、2、7、4、5、6</li><li>逆后序序列2：8、1、3、7、4、5、6、2</li></ul><p>序列1、2都是合法的逆序序列。上面介绍用的逆后序序列1。</p><p>他们的后序序列：</p><ul><li>后序序列1：6、5、4、7、<strong>2</strong>、<strong>3</strong>、<strong>1</strong>、8</li><li>后序序列2：<strong>2</strong>、6、5、4、7、<strong>3</strong>、<strong>1</strong>、8</li></ul><p>这里大家需要手动模拟一下（很简单），如果在原图上采用后序序列2，会得到错误的答案。但是在反图上采用逆后序序列2，答案仍旧正确。</p><p>因此我们只能在反图上做逆后序序列。</p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维实践 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何快速理解并记住 C 语言中的 typedef</title>
      <link href="/2020/06/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3typedef/"/>
      <url>/2020/06/27/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3typedef/</url>
      
        <content type="html"><![CDATA[<p>假设有如下代码，你声明了一个<strong>函数指针</strong><code>funa</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">funa</span> <span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br></pre></td></tr></table></figure><p>编译器就知道这一行声明了一个<strong>函数指针</strong>，其指向的函数接收一个<code>int</code>类型的参数，返回值为<code>int</code>。</p><p>现在项目经理给编译器作者说，“我要有一个typedef的功能，要能给某个类型起别名。”</p><p>编译器作者说：“你不早说，我代码都写完了”。</p><p>抱怨归抱怨，编译器作者但还是得写，那就用之前的轮子吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">int</span> *<span class="title">Funa</span> <span class="params">(<span class="keyword">int</span> k)</span></span>;</span><br></pre></td></tr></table></figure><p>项目经理说：“这不就何之前一样了吗”</p><p>编译器作者说：“谁让你不早说，这样我就能直接拿轮子了”</p><p>项目经理说：“也好，这样也好记住”。</p><p>那么：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Funa p1;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">p2</span> <span class="params">(<span class="keyword">int</span> k)</span></span></span><br></pre></td></tr></table></figure><p><code>p1</code>和<code>p2</code>是等价的。</p><p>因为<code>Funa</code>和<code>int * (int k)</code>是一个类型，<code>p1</code>和<code>p2</code>是一个类型。</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://www.zhihu.com/question/19894694/answer/81246243">如何理解 C 语言中的 typedef ？ - 霄池的回答 - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ 模板中 class T 和 typename T 的区别</title>
      <link href="/2020/04/18/c++%20%E6%A8%A1%E6%9D%BF%E4%B8%AD%20class%20T%20%E5%92%8C%20typename%20T%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/18/c++%20%E6%A8%A1%E6%9D%BF%E4%B8%AD%20class%20T%20%E5%92%8C%20typename%20T%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="c-模板中-class-t-和-typename-t的区别"><a class="markdownIt-Anchor" href="#c-模板中-class-t-和-typename-t的区别"></a> c++ 模板中 <code>&lt;class T&gt;</code> 和 <code>&lt;typename T&gt;</code>的区别</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>一直感觉<code>template &lt;class T&gt;</code>，今天查了一下。</p><h1 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h1><p><code>template&lt;class T&gt;</code>和<code>template&lt;typename T&gt;</code>都可以用来定义函数模板和类模板，在使用上，他们俩没有本质的区别。</p><p>在模板声明中，<code>typename</code> 可用作 <code>class</code> 的代替品，以声明类型模板形参和模板形参 (C++17 起)。</p><p>在C++早期版本中，没有<code>typename</code>这个关键字，所以在模板定义的时候便使用了<code>class</code>。</p><p>因此现在使用<code>typename</code>更加合适。</p><h1 id="typename的其它用法"><a class="markdownIt-Anchor" href="#typename的其它用法"></a> <code>typename</code>的其它用法</h1><ul><li>在模板声明中，<code>typename</code> 可用作<code>class</code>的代替品，以声明类型模板形参和模板形参 (C++17 起)。</li><li>在模板的声明或定义内，<code>typename</code> 可用于声明某个待决的有限定名是类型。</li><li>在模板的声明或定义内， (C++11 前)<code>typename</code> 可在非待决的有限定类型名之前使用。此情况下它没有效果。</li><li>在类型要求的要求中。(C++20 起)</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 程序设计思维实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django数据库操作 —— 干净的重置migration</title>
      <link href="/2020/03/27/Django%20%E9%87%8D%E7%BD%AE%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6/"/>
      <url>/2020/03/27/Django%20%E9%87%8D%E7%BD%AE%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>随着项目需求的增加：</p><ul><li>Django的迁移文件越来越大，</li><li>并且遇到models文件中如果使用了自定义存储字段。不再使用后删除会报错的情况。</li></ul><p>重置迁移文件后解决了上述问题。</p><h2 id="情景一不需要原有的数据库数据"><a class="markdownIt-Anchor" href="#情景一不需要原有的数据库数据"></a> 情景一：不需要原有的数据库数据</h2><ol><li>首先删除数据库中的相关APP下的数据表</li><li>然后删除APP下的migration模块中的所有 文件，<a href="http://xn--init-ps5fn029a.py">除了init.py</a> 文件</li><li>执行下面的命令</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br><span class="line"><span class="xml">python manage.py migrate</span></span><br></pre></td></tr></table></figure><h2 id="情景二不想要删除现有的数据库只是想重新建立-migration-文件"><a class="markdownIt-Anchor" href="#情景二不想要删除现有的数据库只是想重新建立-migration-文件"></a> 情景二：不想要删除现有的数据库，只是想重新建立 migration 文件</h2><p>这个情况是开发中最为常见的，也是操作起来稍微复杂一点的情况，但是只要遵循下面的操作步骤，就不会引发任何错误。</p><ol><li>首先要保证,目前的migration文件和数据库是同步的，通过执行</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br></pre></td></tr></table></figure><p>2.查看当前项目下所有APP对应的已经生效的（已经成功执行的）migration文件，命令如下:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py showmigrations</span></span><br></pre></td></tr></table></figure><p>结果如下图所示:</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [X] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [X] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [X] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><ol start="3"><li>重置你的APP的操作，使它们恢复到没有执行的状态，这里注意一下fake前面的符号，是两个“-”，另外，explore 是APP的名字。</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py migrate --fake explore zero</span></span><br></pre></td></tr></table></figure><p>重装完后进行检查：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py showmigrations</span></span><br></pre></td></tr></table></figure><p>如果是要重置的APP前面[x]变成了[ ]则操作正确：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [ ] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [ ] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><p><strong>这里要注意，如果有其它数据库的状态有[x]变成了[ ]，则该APP也要重置（因为外键的原因）</strong> 如：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">admin</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_logentry_remove_auto_add</span></span><br><span class="line"><span class="xml"> [X] 0003_logentry_add_action_flag_choices</span></span><br><span class="line"><span class="xml">api</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml">contenttypes</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [X] 0002_remove_content_type_name</span></span><br><span class="line"><span class="xml">explore</span></span><br><span class="line"><span class="xml"> [ ] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200223_0131</span></span><br><span class="line"><span class="xml"> [ ] 0003_delete_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0004_exphoto</span></span><br><span class="line"><span class="xml"> [ ] 0005_auto_20200304_1652</span></span><br><span class="line"><span class="xml"> parent</span></span><br><span class="line"><span class="xml"> [X] 0001_initial</span></span><br><span class="line"><span class="xml"> [ ] 0002_auto_20200409_2248</span></span><br></pre></td></tr></table></figure><p>这里parent出现了[ ]，则也应该重置，否则会报错。</p><ol start="4"><li>然后放心大胆地删除<code>migrations</code>文件夹下面，<strong>除了<code>__init__.py</code>文件</strong>，的所有的带有序号的<code>.py</code>文件，包括<code>pycache</code>文件夹！</li><li>执行下面的命令，再次为这个APP 生成 0001_initial.py 之类的文件</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py makemigrations</span></span><br></pre></td></tr></table></figure><ol start="6"><li>最后执行下面的命令，使刚刚生成的<code>0001_initial.py</code>文件记录到<code>django_migrations</code>数据表中，大功告成。</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">python manage.py migrate --fake-initial</span></span><br></pre></td></tr></table></figure><h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料：</h1><p><a href="https://blog.csdn.net/zhuoxiuwu/article/details/52167599">Django开发—如何重置migration</a><br /><a href="https://blog.csdn.net/gaifuxi9518/article/details/86591806">Django笔记05：如何悄悄删除migrations下的文件而不引起任何错误</a></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django 中优雅的使用 choice 字段</title>
      <link href="/2020/03/27/django%20%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%20choice%20%E5%AD%97%E6%AE%B5/"/>
      <url>/2020/03/27/django%20%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8%20choice%20%E5%AD%97%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="django-中优雅的使用-choice-字段"><a class="markdownIt-Anchor" href="#django-中优雅的使用-choice-字段"></a> django 中优雅的使用 choice 字段</h1><h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p><code>django</code>中如何比较优雅的对元组进行标记分类。可使用<code>choice</code>字段</p><h1 id="choice字段"><a class="markdownIt-Anchor" href="#choice字段"></a> choice字段</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookTagNum</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    OTHER = <span class="number">1</span></span><br><span class="line">    SCIENCE = <span class="number">2</span></span><br><span class="line">    SOCIAL_SCIENCES = <span class="number">3</span></span><br><span class="line">    ECONOMIC = <span class="number">4</span></span><br><span class="line">    COMPUTER = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BOOK</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    TAG_NUM_CHOICE = (</span><br><span class="line">        (BookTagNum.OTHER, <span class="string">&#x27;其它&#x27;</span>),</span><br><span class="line">        (BookTagNum.SCIENCE, <span class="string">&#x27;科学类&#x27;</span>),</span><br><span class="line">        (BookTagNum.SOCIAL_SCIENCES, <span class="string">&#x27;社科类&#x27;</span>),</span><br><span class="line">        (BookTagNum.ECONOMIC, <span class="string">&#x27;经济类&#x27;</span>),</span><br><span class="line">        (BookTagNum.COMPUTER, <span class="string">&#x27;计算机类&#x27;</span>),</span><br><span class="line">    )</span><br><span class="line">    tag = models.IntegerField(choices=TAG_NUM_CHOICE)</span><br></pre></td></tr></table></figure><p>在代码中尽量不要出现固定的硬编码，比如某个判断条件，判断书的分类为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#view.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">book = Book.obejects.<span class="built_in">filter</span>(tag = BookTagNum.COMPUTER)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django ManyToManyField - 插入 - ORM - admin中显示</title>
      <link href="/2020/03/20/Django%20ManytoMantfield%20%E5%A2%9E%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%20admin%E4%B8%AD%E6%98%BE%E7%A4%BA/"/>
      <url>/2020/03/20/Django%20ManytoMantfield%20%E5%A2%9E%E5%8A%A0%EF%BC%8C%E5%88%A0%E9%99%A4%20admin%E4%B8%AD%E6%98%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h1><p><code>Django</code> <code>ManyToManyField</code>的<code>ORM</code>操作和在<code>admin</code>中显示。</p><h1 id="表结构设计"><a class="markdownIt-Anchor" href="#表结构设计"></a> 表结构设计</h1><p>假设一个作者有多本书，一本书也可以有个作者，多对多关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表结构设计</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   title = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">   name = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">   books = models.ManyToManyField(Book)</span><br></pre></td></tr></table></figure><h1 id="在admin中显示"><a class="markdownIt-Anchor" href="#在admin中显示"></a> 在admin中显示</h1><p>当数据过多时，<code>django</code>自带的<code>ManyToManyField</code>及其不方便。仅需在<code>admin.py</code>添加如下字段即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改前</span></span><br><span class="line">admin.site.register(Author)</span><br></pre></td></tr></table></figure><p>使用<code>filter_horizontal</code>。在作多项选择的操作方便性，及单项选择太多时，会有极好的体验。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>]  <span class="comment"># 列表页展示的字段</span></span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;cards&#x27;</span>,)</span><br><span class="line">admin.site.register(AuthorAdmin)</span><br></pre></td></tr></table></figure><p><strong>若想在admin中显示cards字段。增加如下代码即可</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;relatedbooks&#x27;</span>]  <span class="comment"># 列表页展示的字段    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">relatedbooks</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [book.title <span class="keyword">for</span> book <span class="keyword">in</span> obj.books.<span class="built_in">all</span>()]</span><br><span class="line">    filter_horizontal = (<span class="string">&#x27;books&#x27;</span>,)</span><br><span class="line">    </span><br><span class="line">admin.site.register(Author,AuthorAdmin)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="orm操作"><a class="markdownIt-Anchor" href="#orm操作"></a> ORM操作</h1><h2 id="all-关联的所有的元组"><a class="markdownIt-Anchor" href="#all-关联的所有的元组"></a> all 关联的所有的元组</h2><p>一个作者的所有书。表Author中某一元组关联表Book中的所有元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">   books = author.books.<span class="built_in">all</span>()’</span><br><span class="line">   <span class="keyword">for</span> book <span class="keyword">in</span> books:</span><br><span class="line">       <span class="built_in">print</span>(books.title)</span><br></pre></td></tr></table></figure><h2 id="add-添加多对多关系"><a class="markdownIt-Anchor" href="#add-添加多对多关系"></a> add 添加多对多关系</h2><p>重复添加同一关系<code>django</code>会自动忽略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">   author.books.add(Book.objects.<span class="built_in">all</span>())</span><br><span class="line">   author.books.add(Book.objects.get(<span class="built_in">id</span>=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="remove-多对多关系"><a class="markdownIt-Anchor" href="#remove-多对多关系"></a> remove 多对多关系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books..remove(Book.objects.get(<span class="built_in">id</span>=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="set-替换"><a class="markdownIt-Anchor" href="#set-替换"></a> set 替换</h2><p>直接完整的替换某一多对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books.<span class="built_in">set</span>(Book.objects.get(<span class="built_in">id</span>=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="clear-清除"><a class="markdownIt-Anchor" href="#clear-清除"></a> clear 清除</h2><p>清除一元组所有多对多关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">author = models.Author.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">author.books.clear()</span><br></pre></td></tr></table></figure><h1 id="一张表自关联"><a class="markdownIt-Anchor" href="#一张表自关联"></a> 一张表自关联</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    friends = models.ManyToManyField(<span class="string">&quot;self&quot;</span>)</span><br></pre></td></tr></table></figure><p>当django处理这个模型时，它会做如此定义：对多对多字段关系被认为是对称的——即，如果我是你的朋友，那么你也是我的朋友。（<s>跟<code>C++</code>一比，我是你的友元，你不是我的友元</s>）</p><p>然而有时候我们不需要这个友好关系，修改<code>symmetrical</code>为<code>False</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">symmetrical=Flase</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.git 文件过大 - 减小 .git 文件体积</title>
      <link href="/2020/03/20/git%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7/"/>
      <url>/2020/03/20/git%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="git-文件过大"><a class="markdownIt-Anchor" href="#git-文件过大"></a> .git 文件过大</h1><h1 id="综述"><a class="markdownIt-Anchor" href="#综述"></a> 综述</h1><p>最近发现<code>github</code>上项目<code>.git</code>文件已经达到了2个G，整理了减小<code>.git</code>文件的方法。</p><h2 id="git文件是什么"><a class="markdownIt-Anchor" href="#git文件是什么"></a> .git文件是什么</h2><p>一个管理git仓库的文件夹，这里包含所有git操作所需要的东西</p><h1 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h1><h2 id="简单有效减小体积"><a class="markdownIt-Anchor" href="#简单有效减小体积"></a> 简单有效，减小体积</h2><p>运行 <code>gc</code> ，生成 <code>pack</code> 文件（后面的 <code>--prune=now</code> 表示对之前的所有提交做修剪，有的时候仅仅 <code>gc</code> 一下<code>.git</code> 文件就会小很多）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure><h2 id="克隆时只克隆一层"><a class="markdownIt-Anchor" href="#克隆时只克隆一层"></a> 克隆时只克隆一层</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1</span><br></pre></td></tr></table></figure><h2 id="使用git-lfs管理文件"><a class="markdownIt-Anchor" href="#使用git-lfs管理文件"></a> 使用<code>git-lfs</code>管理文件</h2><p>项目中有大量的图片文件，音频文件，<strong>二进制</strong>文件时，推荐使用第三方扩展插件<code>git-lfs</code>。</p><p>它将你所标记的大文件保存至另外的仓库,而在主仓库仅保留其轻量级指针</p><h3 id="why"><a class="markdownIt-Anchor" href="#why"></a> why?</h3><p>二进制内容比较难压缩, 会导致整个仓库占用的空间飞速增长. 没多久你可能就会发现，10M的文件，100M的<code>.git</code>文件。也就是不能版本比较。</p><h3 id="getting-started"><a class="markdownIt-Anchor" href="#getting-started"></a> Getting Started</h3><p>安装完成后在<code>git bash</code>中运行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs install</span><br></pre></td></tr></table></figure><h3 id="添加你要管理的文件"><a class="markdownIt-Anchor" href="#添加你要管理的文件"></a> 添加你要管理的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git lfs track &quot;*.png&quot;</span><br><span class="line">git lfs track &quot;*.jpg&quot;</span><br><span class="line">git lfs track &quot;*.mp3&quot;</span><br><span class="line">git lfs track &quot;*.pyc&quot;</span><br></pre></td></tr></table></figure><h3 id="添加gitattributes"><a class="markdownIt-Anchor" href="#添加gitattributes"></a> 添加<code>.gitattributes</code></h3><p>该文件保存了文件的追踪记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .gitattributes</span><br></pre></td></tr></table></figure><h3 id="愉快的使用"><a class="markdownIt-Anchor" href="#愉快的使用"></a> 愉快的使用</h3><p>进行完上述处理，后面就和正常<code>git</code>一样了。不会再有多余的步骤，正常<code>add,commit,push,pull,clone</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add file.psd</span><br><span class="line">git commit -m &quot;Add design file&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="官网连接"><a class="markdownIt-Anchor" href="#官网连接"></a> 官网连接</h3><p><a href="https://git-lfs.github.com/">git-lfs官网</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小生成树】Kruskal - Prim - 堆优化的Prim</title>
      <link href="/2020/03/20/kruskal%20-%20dijskra%20-%20%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%20dijskra/"/>
      <url>/2020/03/20/kruskal%20-%20dijskra%20-%20%E5%A0%86%E4%BC%98%E5%8C%96%E7%9A%84%20dijskra/</url>
      
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#input">input</a></li><li><a href="#output">output</a></li><li><a href="#sample-input">sample input</a></li><li><a href="#sample-output">Sample Output</a></li></ul></p><h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>整理了一份最小生成树算法板子</p><h1 id="题目-c-掌握魔法の东东-i"><a class="markdownIt-Anchor" href="#题目-c-掌握魔法の东东-i"></a> 题目 C - 掌握魔法の东东 I</h1><p>东东在老家农村无聊，想种田。农田有$ n$ 块，编号从 1~<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>。种田要灌氵<br />众所周知东东是一个魔法师，他可以消耗一定的 MP 在一块田上施展魔法，使得黄河之水天上来。他也可以消耗一定的 MP 在两块田的渠上建立传送门，使得这块田引用那块有水的田的水。 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>3</mn><mi>e</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le n \le 3e2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord mathdefault">e</span><span class="mord">2</span><span class="mclose">)</span></span></span></span><br />黄河之水天上来的消耗是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> 是农田编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>W</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le W_i \le 1e5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span><span class="mclose">)</span></span></span></span><br />建立传送门的消耗是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">P_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>是农田编号 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>P</mi><mrow><mi>j</mi><mi>i</mi></mrow></msub><mo separator="true">,</mo><msub><mi>P</mi><mrow><mi>i</mi><mi>i</mi></mrow></msub><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le P_{ij}  \le 1e5, P_{ij} = P_{ji}, P_{ii} =0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span><br />东东为所有的田灌氵的最小消耗</p><h2 id="input"><a class="markdownIt-Anchor" href="#input"></a> input</h2><p>第1行：一个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span><br />第2行到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行：数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>行到第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>行：矩阵即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">p_{ij}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>矩阵</p><h2 id="output"><a class="markdownIt-Anchor" href="#output"></a> output</h2><p>东东最小消耗的MP值</p><h2 id="sample-input"><a class="markdownIt-Anchor" href="#sample-input"></a> sample input</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">0 2 2 2</span><br><span class="line">2 0 3 3</span><br><span class="line">2 3 0 4</span><br><span class="line">2 3 4 0</span><br></pre></td></tr></table></figure><h2 id="sample-output"><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure><h1 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(mlogm)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> par[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125; v[MAXN * MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> par[x] == x ? x : par[x] = <span class="built_in">find</span>(par[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[cnt].x = <span class="number">0</span>;</span><br><span class="line">        v[cnt].y = i;</span><br><span class="line">        cin &gt;&gt; v[cnt].w;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="built_in">get_num</span>();</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            v[cnt].x = i;</span><br><span class="line">            v[cnt].y = j;</span><br><span class="line">            v[cnt].w = w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + cnt);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) par[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(v[i].x) != <span class="built_in">find</span>(v[i].y)) &#123;</span><br><span class="line">            ans += v[i].w;</span><br><span class="line">            par[<span class="built_in">find</span>(v[i].x)] = <span class="built_in">find</span>(v[i].y);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="primdijkstra"><a class="markdownIt-Anchor" href="#primdijkstra"></a> Prim(Dijkstra)</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = <span class="built_in">get_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = <span class="built_in">get_num</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = <span class="built_in">min</span>(d[i], v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆优化的prim"><a class="markdownIt-Anchor" href="#堆优化的prim"></a> 堆优化的Prim</h1><p>复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O((m+n)logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，若采用邻接矩阵存图时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;re&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = <span class="built_in">get_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = <span class="built_in">get_num</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        re h = Q.<span class="built_in">top</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[h.d]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[h.d] = <span class="number">1</span>;</span><br><span class="line">        ans += h.w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i] &gt; v[h.d][i]) &#123;</span><br><span class="line">                d[i] = v[h.d][i];</span><br><span class="line">                Q.<span class="built_in">push</span>(&#123;i, d[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间效率对比"><a class="markdownIt-Anchor" href="#时间效率对比"></a> 时间效率对比</h1><p>从上至下依次为堆优化的Prim，Prim，Kruskal：<br /><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200813192903.png" alt="从上至下依次为堆优化的Prim，Prim，Kruskal" /></p>]]></content>
      
      
      <categories>
          
          <category> 图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 程序设计思维时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 访问文件夹下所有文件、图片</title>
      <link href="/2020/03/16/python%20%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E3%80%81%E5%9B%BE%E7%89%87/"/>
      <url>/2020/03/16/python%20%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E3%80%81%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h1><p>如何使用<code>python</code>访文件夹下的所有文件？</p><h1 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h1><ul><li>使用<code>os.listdir(path)</code>装载文件路径</li><li>使用<code>os.path.join()</code>可拼接获得完整路径，对于<code>windows</code>，需要补全文件夹名后面的<code>/</code>，否则<code>python</code>会错误的添加<code>\</code>（如：<code>&quot;./test\a.png”</code>。</li><li>使用open()打开目标文件</li></ul><h2 id="图片类型"><a class="markdownIt-Anchor" href="#图片类型"></a> 图片类型</h2><p>对于图片类型，以<code>rb</code>(只读二进制)打开，避免对图片错误写。<s>一开始以<code>w</code>一直图片格式损坏，鼓捣半天才发现文件被写没了。</s></p><h1 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h1><pre class="highlight"><code class="python">path = <span class="hljs-string">"./test/"</span>files = os.listdir(path)<span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> files:    f = open(os.path.join(path, filename),<span class="hljs-string">'rb'</span>)    print(filename)    print(os.path.join(path, filename))</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ set 用法小结</title>
      <link href="/2020/03/11/C-set-%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/03/11/C-set-%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h3><p>无意间翻到了17年11月准备NOIP时整理的set用法，现把它放到csdn上来</p><hr /><h2 id="set-小结"><a class="markdownIt-Anchor" href="#set-小结"></a> <code>&lt;set&gt;</code> 小结</h2><p><code>set</code>的英文意思是“集合”， 集合都不陌生吧，集合的特点有唯一性，即：每一个元素只有一个，所以<code>set</code>可以用来“去重”操作，<code>set</code>还有默认的排序。</p><ol><li>头文件——<code>&lt;set&gt;</code></li><li>定义——<code>set&lt;int&gt;Q</code></li><li>输入（插入）——<code>insert(x)</code></li><li>有序输出:</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(it = Q.<span class="built_in">begin</span>(); it != Q.<span class="built_in">end</span>(); it++)</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;*it&lt;&lt;endl;</span><br></pre></td></tr></table></figure><ol start="5"><li>删除制定元素——<code>erase(x)</code></li><li>清空——<code>clear()</code></li><li>判空——<code>empty()</code></li><li>大小——<code>size()</code></li><li>二分查找——<code>Q.lower_bound(x)</code></li></ol><h2 id="set-的-lower_bound-upper_bound"><a class="markdownIt-Anchor" href="#set-的-lower_bound-upper_bound"></a> set 的 <code>lower_bound()</code> <code>upper_bound</code></h2><p>内部自带 <code>lower_bound()</code> <code>upper_bound</code>（这俩返回的是迭代器）</p><p><code>lower_bound(key_value)</code> ，返回第一个大于等于<code>key_value</code>的定位器</p><p><code>upper_bound(key_value)</code>，返回最后一个大于等于<code>key_value</code>的定位器</p><h3 id="erase的三种用法"><a class="markdownIt-Anchor" href="#erase的三种用法"></a> <code>erase</code>的三种用法</h3><p><code>erase(iterator)</code>  ,删除定位器<code>iterator</code>指向的值</p><p><code>erase(first,second)</code>,删除定位器<code>first</code>和<code>second</code>之间的值</p><p><code>erase(key_value)</code>,删除键值<code>key_value</code>的值</p><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        Q.<span class="built_in">insert</span>(<span class="built_in">get_num</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    set&lt;<span class="keyword">int</span>&gt;::iterator p_s;</span><br><span class="line">    <span class="keyword">for</span> (p_s = Q.<span class="built_in">begin</span>(); p_s != Q.<span class="built_in">end</span>(); p_s++) &#123;</span><br><span class="line">        cout &lt;&lt; *p_s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    p_s = Q.<span class="built_in">lower_bound</span>(<span class="number">1</span>);</span><br><span class="line">    Q.<span class="built_in">erase</span>(p_s);</span><br><span class="line">    <span class="keyword">for</span> (p_s = Q.<span class="built_in">begin</span>(); p_s != Q.<span class="built_in">end</span>(); p_s++) &#123;</span><br><span class="line">        cout &lt;&lt; *p_s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【程序设计思维与实践】 sdu 第四周 csp模拟</title>
      <link href="/2020/03/11/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-sdu-%E7%AC%AC%E5%9B%9B%E5%91%A8-csp%E6%A8%A1%E6%8B%9F/"/>
      <url>/2020/03/11/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-sdu-%E7%AC%AC%E5%9B%9B%E5%91%A8-csp%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="题目a-咕咕东的奇遇"><a class="markdownIt-Anchor" href="#题目a-咕咕东的奇遇"></a> 题目A - 咕咕东的奇遇</h1><h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h2><p>咕咕东是个贪玩的孩子，有一天，他从上古遗迹中得到了一个神奇的圆环。这个圆环由字母表组成首尾相接的环，环上有一个指针，最初指向字母a。咕咕东每次可以顺时针或者逆时针旋转一格。例如，a顺时针旋转到z，逆时针旋转到b。咕咕东手里有一个字符串，但是他太笨了，所以他来请求你的帮助，问最少需要转多少次。</p><p><img src="https://img-blog.csdnimg.cn/20200311225352184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h3 id="input"><a class="markdownIt-Anchor" href="#input"></a> Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zeus</span><br></pre></td></tr></table></figure><h3 id="output"><a class="markdownIt-Anchor" href="#output"></a> Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>考虑上衣字符拨到当前字符逆时针还是顺时针即可。</p><p>具体的判断可以用，注意取模：</p><ul><li>顺时针： 当前字符<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span> 上一字符</li><li>逆时针：26<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span> (当前字符<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span> 上一字符)</li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>憨憨的我上来直接24个英文字母。签到题</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = (<span class="number">26</span> + s[i] - <span class="string">&#x27;a&#x27;</span> - k) % <span class="number">26</span>;</span><br><span class="line">        <span class="comment">// ans += min((s[i] - &#x27;a&#x27; - k) % 26, 26 - ((s[i] - &#x27;a&#x27; - k) % 26));</span></span><br><span class="line">        ans += <span class="built_in">min</span>(cur, <span class="number">26</span> - cur);</span><br><span class="line">        k = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="comment">// cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目b-咕咕东想吃饭"><a class="markdownIt-Anchor" href="#题目b-咕咕东想吃饭"></a> 题目B - 咕咕东想吃饭</h1><h2 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h2><p>咕咕东考试周开始了，考试周一共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>天。他不想考试周这么累，于是打算每天都吃顿好的。他决定每天都吃生煎，咕咕东每天需要买<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个生煎。但是生煎店为了刺激消费，只有两种购买方式：①在某一天一次性买两个生煎。②今天买一个生煎，同时为明天买一个生煎，店家会给一个券，第二天用券来拿。没有其余的购买方式，这两种购买方式可以用无数次,但是咕咕东是个节俭的好孩子，他训练结束就走了，不允许训练结束时手里有券。咕咕东非常有钱，你不需要担心咕咕东没钱，但是咕咕东太笨了，他想问你他能否在考试周每天都能恰好买<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个生煎。</p><p>其中</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>100000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le n \le 100000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>10000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1 \le a_i \le 10000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><h3 id="input-2"><a class="markdownIt-Anchor" href="#input-2"></a> Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 1 2</span><br></pre></td></tr></table></figure><h3 id="output-2"><a class="markdownIt-Anchor" href="#output-2"></a> Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>考虑对于第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>天，假设买了m个煎饼，其第二种方案对第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>天的影响可以转变为至多一次。</p><p>因为，假设第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>天选了2次方案二，其等价于第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>天选1次方案一，第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>天选1次方案一。</p><p>故问题可以转化为先考虑最后一天，若为偶数个，直接全选择方案1，若为奇数个，选择一次方案1。并让前一天总煎饼数-1（选择一次方案2）。</p><hr /><p>则问题转化为，对于当前天：</p><ul><li>若煎饼数为偶数，则继续。</li><li>若煎饼数为基数，则令前一天煎饼数-1。</li></ul><p>输出<code>NO</code>的情况为当前天煎饼数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ，或第一天煎饼数为基数个。否则输出<code>YES</code>。</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>这题还是挺有意思的，<s>不过数据有点水（逃）</s> 。全输出<code>YES</code>能拿到不少分吧。</p><h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            v[i] -= <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (v[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v[i] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="题目c-可怕的宇宙射线"><a class="markdownIt-Anchor" href="#题目c-可怕的宇宙射线"></a> 题目C - 可怕的宇宙射线</h1><h2 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h2><p>众所周知，瑞神已经达到了CS本科生的天花板，但殊不知天外有天，人外有苟。在浩瀚的宇宙中，存在着-种叫做苟狗的生物， 这种生物天生就能达到人类研究生的知识水平，并且天生擅长CSP,甚至有全国第一的水平!但最可怕的是，它可以发出宇宙射线!宇宙射线可以摧毁人的智商，进行降智打击!</p><p>宇宙射线会在无限的二维平面上传播(可以看做一个二维网格图)，初始方向默认向上。宇宙射线会在发射出一段距离后分裂,向该方向的左右<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><msup><mn>5</mn><mo>∘</mo></msup></mrow><annotation encoding="application/x-tex">45^{\circ}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.674115em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord"><span class="mord">5</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.674115em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∘</span></span></span></span></span></span></span></span></span></span></span></span>方向分裂出两条宇宙射线，同时威力不变!宇宙射线会分裂<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>次,每次分裂后会在分裂方向前进<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>个单位长度。</p><p>现在瑞神要带着他的小弟们挑战苟狗，但是瑞神不想让自己的智商降到普通本科生zjm那么菜的水平,所以瑞神来请求你帮他计算出共有多少个位置会被&quot;降智打击”。</p><p><img src="https://img-blog.csdnimg.cn/20200311225438892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h3 id="input-3"><a class="markdownIt-Anchor" href="#input-3"></a> Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 2 3 2</span><br></pre></td></tr></table></figure><h3 id="output-3"><a class="markdownIt-Anchor" href="#output-3"></a> Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">39</span><br></pre></td></tr></table></figure><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>朴素的DFS，和BFS能拿到40分。据说剪枝后可以A掉，但是要注意考虑层数，（第4次和21次以同一方向道道某个点并不能剪掉），否则会WA。下面给出一种好的解法（这里感谢下hf大佬。</p><p>首先考虑分裂30次，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>显然会<code>TLE</code>。考虑每次分裂是对称的，其实我们只需要考虑一半就行，如只考虑向右边分裂，把分裂后的图沿着对称轴对称过去，这样问题变成了30次图的对称复制。</p><p>至于怎么对称，考虑：</p><p><img src="https://img-blog.csdnimg.cn/20200312161940290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>我们已知线段L，点A，求点A的对称点B。</p><p>那么问题就很简单了，<s>高数学过</s>（我却忘了，LY老师Dbq）：</p><ul><li>对于上、下、左、右。很简单</li><li>对于其它方向，用下式推导，结果很好看。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200311225640139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70,width=%2280%22" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/20200311225703932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70,width=%2280%22" alt="" /></p><h2 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h2><p><a href="https://blog.csdn.net/Aloneingchild/article/details/104808645">set用法</a><br />这题我算错复杂度了，以为朴素的dfs就能A。（问问自己，第几次这样了？？？）。<s>然后玩了半小时（RNG NB）</s>。最后看出来怎么做了，奈何不会算对称点，最后拿了暴力的40分，只能补题了。</p><h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x != a.x ? x &lt; a.x : y &lt; a.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;re&gt; M;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> fx[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> fy[] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">50</span>], n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(re cur, <span class="keyword">int</span> k, <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; flag &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">dfs</span>(&#123;cur.x + fx[flag] * v[k], cur.y + fy[flag] * v[k]&#125;, k + <span class="number">1</span>, (flag + <span class="number">1</span>) % <span class="number">8</span>);</span><br><span class="line">    set&lt;re&gt; temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : M) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span> || flag == <span class="number">4</span>)</span><br><span class="line">            temp.<span class="built_in">insert</span>(&#123;cur.x * <span class="number">2</span> - i.x, i.y&#125;);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">1</span> || flag == <span class="number">5</span>)</span><br><span class="line">            temp.<span class="built_in">insert</span>(&#123;i.y + cur.x - cur.y, i.x - cur.x + cur.y&#125;);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">2</span> || flag == <span class="number">6</span>)</span><br><span class="line">            temp.<span class="built_in">insert</span>(&#123;i.x, cur.y * <span class="number">2</span> - i.y&#125;);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">3</span> || flag == <span class="number">7</span>)</span><br><span class="line">            temp.<span class="built_in">insert</span>(&#123;cur.x + cur.y - i.y, cur.x + cur.y - i.x&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    M.<span class="built_in">insert</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= v[k]; i++) &#123;</span><br><span class="line">        M.<span class="built_in">insert</span>(&#123;cur.x + fx[flag] * i, cur.y + fy[flag] * i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; M.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【程序设计思维与实践】 Week3 作业 (3/4/数据班)</title>
      <link href="/2020/03/06/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week3-%E4%BD%9C%E4%B8%9A-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/"/>
      <url>/2020/03/06/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week3-%E4%BD%9C%E4%B8%9A-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="a-选数问题"><a class="markdownIt-Anchor" href="#a-选数问题"></a> A - 选数问题</h1><h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h2><p>给定<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个数，从中选取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个，另总和为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>，共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>组数据。其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">k \le n \le 16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>≤</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">T \le 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>。</p><h3 id="input"><a class="markdownIt-Anchor" href="#input"></a> input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10 3 10</span><br><span class="line">1 2 3 4 5 6 7 8 9 10</span><br></pre></td></tr></table></figure><h3 id="output"><a class="markdownIt-Anchor" href="#output"></a> output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>朴素的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">dfs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">s</span></span></span></span>即可。虽然数据规模很小，但还是可以剪枝去掉一些情况。</p><ul><li>超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>个数去掉</li><li>总数超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>去掉</li></ul><p>最坏复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O (n!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span></span></span></span></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>签到题</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n, k, s, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sum, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// cout &lt;&lt; &quot;dfs: &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; sum &lt;&lt; &quot; &quot; &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">if</span> (sum &gt; s || cnt &gt; k) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt == k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == s) &#123;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; sum &lt;&lt; &quot; &quot; &lt;&lt; k &lt;&lt; endl;</span></span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(i + <span class="number">1</span>, sum + v[i], cnt + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T) &#123;</span><br><span class="line">        T--;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            cin &gt;&gt; v[i];</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="b-区间选点"><a class="markdownIt-Anchor" href="#b-区间选点"></a> B - 区间选点</h1><h2 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h2><p>数轴上有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个闭区间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_i, b_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>。取尽量少的点，使得每个区间内都至少有一个点（不同区间内含的点可以是同一个）。其中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>N</mi><mo>&lt;</mo><mo>=</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(N&lt;=100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mo>=</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a,b&lt;=100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><h3 id="input-2"><a class="markdownIt-Anchor" href="#input-2"></a> input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h3 id="output-2"><a class="markdownIt-Anchor" href="#output-2"></a> output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 6</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>以线段右端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>为序，从小到大排序。如果当前线段没被覆盖过。则将用顶点将该线段覆盖，同时标记其他左端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>在该线段<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的线段为覆盖。</p><p>复杂度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，因为每个线段只会被选择一次。</p><h3 id="正确性证明"><a class="markdownIt-Anchor" href="#正确性证明"></a> 正确性证明</h3><p>由于以右端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>为序，对第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>条线段。若改线段未被覆盖。那么将点防止在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处一定最优。因为对于任意其它线段，线段的左端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>一定要么在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的左边，要么在$ b_i$的右边。</p><ul><li>若在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>左边，放在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">b_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>处显然可以覆盖更多线段</li><li>若在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>右边，放在那里都不会影响该线段。</li></ul><hr /><p>假设当前有一个点没有放在线段右顶点处，考虑将点重新放置于有顶点处不会使结果更差。</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>一道入门贪心题，可用交换论证证明，即我的决策不会令答案更差</p><h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> b &lt; a.b; &#125;</span><br><span class="line">&#125; v[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; v[i].a &gt;&gt; v[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[j].a &lt;= v[i].b) &#123;</span><br><span class="line">                    vis[j] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c-区间覆盖"><a class="markdownIt-Anchor" href="#c-区间覆盖"></a> C - 区间覆盖</h1><h2 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h2><p>数轴上有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> ,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>25000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1\le n \le 25000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>个闭区间$ [ai, bi]$，选择尽量少的区间覆盖一条指定线段 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1, t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>1</mn><mo separator="true">,</mo><mn>000</mn><mo separator="true">,</mo><mn>000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">( 1 \le t \le 1,000,000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mclose">)</span></span></span></span>。<br />覆盖整点，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,2)+(3,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span>可以覆盖<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mclose">)</span></span></span></span>。<br />不可能办到输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></p><h3 id="input-3"><a class="markdownIt-Anchor" href="#input-3"></a> input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 10</span><br><span class="line">1 7</span><br><span class="line">3 6</span><br><span class="line">6 10</span><br></pre></td></tr></table></figure><h3 id="output-3"><a class="markdownIt-Anchor" href="#output-3"></a> output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>讲区间以左端点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>为序，从小到大排序。对于一段未被覆盖的区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>h</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[h,t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>吗，选取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>前的超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>最多的线段，设选择线段为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>k</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_k,b_k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>（假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub><mo>&lt;</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">b_k &lt; t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> ，若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub><mo>≥</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">b_k \ge t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 则覆盖完成得到答案）。仍未被覆盖的区间变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_k+1,t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>，重复上述过程，直到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub><mo>≥</mo><mi>t</mi></mrow><annotation encoding="application/x-tex">b_k \ge t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>，若扫描完所有线段仍未覆盖完所有区间，则输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>。</p><p>复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p><h3 id="小技巧"><a class="markdownIt-Anchor" href="#小技巧"></a> 小技巧</h3><p>上述过程的复杂度可以达到为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O( n )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，方法是排序后。标记一个flag为仍未被覆盖的线段的首届点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>，顺序扫描数组，对尾节点取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">max</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span></span></span></span>，知道线段首届点<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>超过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>。（因为我们并不关心选取的具体是哪一条线段）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (v[i].a &gt; T || tail &gt;= T) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v[i].a &lt;= flag) &#123;</span><br><span class="line">        tail = <span class="built_in">max</span>(tail, v[i].b);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        flag = tail + <span class="number">1</span>;  <span class="comment">// 这里注意</span></span><br><span class="line">        <span class="keyword">if</span> (v[i].a &gt; flag) &#123;</span><br><span class="line">            tail = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail = <span class="built_in">max</span>(tail, v[i].b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h2><p>这道题吃了超多发WA，错误的愿意是选择区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>a</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>k</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[a_k,b_k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>后，未覆盖的区间应该变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mi>k</mi></msub><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_k+1,t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>，而不是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mi>k</mi></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_k-1,t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;a &lt; a.a; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;re&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, T;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;T)) &#123;</span><br><span class="line">        v.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            re temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;temp.a, &amp;temp.b);</span><br><span class="line">            v.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>, tail = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i].a &gt; T || tail &gt;= T) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (v[i].a &lt;= flag) &#123;</span><br><span class="line">                tail = <span class="built_in">max</span>(tail, v[i].b);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                flag = tail + <span class="number">1</span>;  <span class="comment">// 这里注意</span></span><br><span class="line">                <span class="keyword">if</span> (v[i].a &gt; flag) &#123;</span><br><span class="line">                    tail = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tail = <span class="built_in">max</span>(tail, v[i].b);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span> (tail &lt; T)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【程序设计思维与实践】 Week2 实验 (3/4/数据班)</title>
      <link href="/2020/03/01/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week2-%E5%AE%9E%E9%AA%8C-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/"/>
      <url>/2020/03/01/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week2-%E5%AE%9E%E9%AA%8C-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="a-化学-编译器选-gnu-g-gym-270437a"><a class="markdownIt-Anchor" href="#a-化学-编译器选-gnu-g-gym-270437a"></a> A - 化学 (编译器选 GNU G++) <a href="https://vjudge.net/problem/Gym-270437A/origin">Gym - 270437A </a></h1><h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h2><p><img src="https://img-blog.csdnimg.cn/20200306114047679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0Fsb25laW5nY2hpbGQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>假设如上图，这个烷烃基有6个原子和5个化学键，6个原子分别标号1~6，然后用一对数字 a,b 表示原子a和原子b间有一个化学键。这样通过5行a,b可以描述一个烷烃基</p><p>你的任务是甄别烷烃基的类别。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这个题就很有意思了，我们可以分类判断。我们可以把每一个原子看成点，其中第1个和第6个有明显的特征，即只有第一个最大出度为2，最后一个最大出度为4。同时我们可以对于每一个烷烃基找到出度最大的点。</p><p>这时以出度最大的点为根开始dfs找最大深度，只有第2个最大深度为3。</p><p>此时只有3，4没有区分了，只需要刨除出度最大的点再找一个出度次大的点即可。次大出度为2即为第三个，为3即为第3个。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本题情况仅为6个，做法很多。比如还可以找最长链。由于为rank，没有仔细考虑，上述思路还有可以提升的地方，将2，3，4选择转化为判断最长链会更简单。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">10</span>][<span class="number">10</span>], vis[<span class="number">10</span>], deep;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    deep = <span class="built_in">max</span>(len, deep);</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v[x][i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i]) <span class="built_in">dfs</span>(i, len + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max_sum = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i][j]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; max_sum) &#123;</span><br><span class="line">            max_sum = sum;</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    cout &lt;&lt;&quot;sum:&quot; &lt;&lt;max_sum&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span> (max_sum == <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;n-hexane&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (max_sum == <span class="number">4</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2,2-dimethylbutane&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    deep = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(k, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (deep == <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2-methylpentane&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    max_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i][j]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; max_sum) &#123;</span><br><span class="line">            max_sum = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (max_sum == <span class="number">3</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;2,3-dimethylbutane&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;3-methylpentane&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    T = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">while</span> (T) &#123;</span><br><span class="line">        T--;</span><br><span class="line">        <span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(v));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b;</span><br><span class="line">            a = <span class="built_in">get_num</span>();</span><br><span class="line">            b = <span class="built_in">get_num</span>();</span><br><span class="line">            v[a][b] = v[b][a] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">bfs</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="b-爆零大力出奇迹-hdu-2093"><a class="markdownIt-Anchor" href="#b-爆零大力出奇迹-hdu-2093"></a> B - 爆零(×)大力出奇迹(√)] <a href="https://vjudge.net/problem/HDU-2093/origin">HDU - 2093 </a></h2><h2 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h2><p>输入数据包含多行，第一行是共有的题数n（1≤n≤12）以及单位罚时m（10≤m≤20），之后的每行数据描述一个学生的信息，首先是学生的用户名（不多于10个字符的字串）其次是所有n道题的得分现状，根据这些学生的得分现状，输出一个实时排名。实时排名显然先按AC题数的多少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字（10个字符宽），做出的题数（2个字符宽，右对齐）和时间分（4个字符宽，右对齐）。名字、题数和时间分相互之间有一个空格。数据保证可按要求的输出格式进行输出。</p><h3 id="sample-input"><a class="markdownIt-Anchor" href="#sample-input"></a> Sample Input</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">8 20</span><br><span class="line">GuGuDong  96     -3    40(3) 0    0    1      -8    0</span><br><span class="line">hrz       107    67    -3    0    0    82     0     0</span><br><span class="line">TT        120(3) 30    10(1) -3   0    47     21(2) -2</span><br><span class="line">OMRailgun 0      -99   -8    0    -666 -10086 0     -9999996</span><br><span class="line">yjq       -2     37(2) 13    -1   0    113(2) 79(1) -1</span><br><span class="line">Zjm       0      0     57(5) 0    0    99(3)  -7    0</span><br></pre></td></tr></table></figure><h3 id="sample-output"><a class="markdownIt-Anchor" href="#sample-output"></a> Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TT          5  348</span><br><span class="line">yjq         4  342</span><br><span class="line">GuGuDong    3  197</span><br><span class="line">hrz         3  256</span><br><span class="line">Zjm         2  316</span><br><span class="line">OMRailgun   0    0</span><br></pre></td></tr></table></figure><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>这题核心是如何处理读入数据，即如何区分读入为纯数字，如：4；和读入为字符串，如：4(3)的情况。</p><p>只需要将每个读入存入一个字符串，判断字符串内是否为纯数值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span> </span>&#123;</span><br><span class="line"><span class="function">istringstream <span class="title">in</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">double</span> test;</span><br><span class="line"><span class="keyword">return</span> in &gt;&gt; test &amp;&amp; in.<span class="built_in">eof</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是纯数值，负数按0处理，正数加权即可。</p><p>如果不为纯数值。只需要读入一个数字，一个字符，一个数字，一个字符即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istringstream <span class="title">in</span><span class="params">(s)</span></span>;</span><br><span class="line">LL a, b;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">in &gt;&gt; a &gt;&gt; c &gt;&gt; b &gt;&gt; c;</span><br></pre></td></tr></table></figure><p>结构体处理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    LL sum;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num != a.num ? (num &gt; a.num) : (sum != a.sum ? sum &lt; a.sum : name &lt; a.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>此类问题重点在于数据的处理，重要的是模块化，这样解题才会更快。</p><p>这里实验课的时候，忘记去除测试<code>if(cnt == 6)</code>(六条数据)，吃了两发WA，其实win下测试可以<code>ctrl+z</code>再<code>Enter</code>就会成为<code>EOF</code>了，着实被自己坑了。</p><h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNumber</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span> </span>&#123;</span><br><span class="line"><span class="function">istringstream <span class="title">in</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="keyword">double</span> test;</span><br><span class="line"><span class="keyword">return</span> in &gt;&gt; test &amp;&amp; in.<span class="built_in">eof</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">strInt</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span></span>&#123;</span><br><span class="line"><span class="function">istringstream <span class="title">in</span><span class="params">(str)</span></span>;</span><br><span class="line">LL test;</span><br><span class="line">in&gt;&gt;test;</span><br><span class="line"><span class="keyword">return</span> test;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    LL sum;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num != a.num ? (num &gt; a.num) : (sum != a.sum ? sum &lt; a.sum : name &lt; a.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; v[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line"><span class="comment">//freopen(&quot;out.txt&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; s) &#123;</span><br><span class="line">        v[++cnt].name = s;</span><br><span class="line"><span class="comment">//        cout &lt;&lt; &quot;cnt: &quot;&lt;&lt;v[cnt].name&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            string s;</span><br><span class="line">            cin &gt;&gt; s;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isNumber</span>(s)) &#123;</span><br><span class="line">            LL a = <span class="built_in">strInt</span>(s);</span><br><span class="line">                <span class="keyword">if</span> (a &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    v[cnt].sum += a;</span><br><span class="line">                    v[cnt].num ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                istringstream <span class="built_in">in</span>(s);</span><br><span class="line">                LL a, b;</span><br><span class="line">                <span class="keyword">char</span> c;</span><br><span class="line">                in &gt;&gt; a &gt;&gt; c &gt;&gt; b &gt;&gt; c;</span><br><span class="line">                v[cnt].num++;</span><br><span class="line">                v[cnt].sum += a + b * m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        if (cnt == 6) break;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;yes&quot;&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//    printf(&quot;yess\n&quot;);</span></span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + <span class="number">1</span> + cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-10s &quot;</span>, v[i].name.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, v[i].num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4lld\n&quot;</span>, v[i].sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="c-瑞神打牌-poj-1786"><a class="markdownIt-Anchor" href="#c-瑞神打牌-poj-1786"></a> C - 瑞神打牌 <a href="https://vjudge.net/problem/POJ-1786/origin">POJ - 1786 </a></h2><p>牌局由四个人构成，围成一圈。我们称四个方向为北 东 南 西。对应的英文是North，East，South，West。游戏一共由一副扑克，也就是52张构成。开始，我们指定一位发牌员（东南西北中的一个，用英文首字母标识）开始发牌，发牌顺序为顺时针，发牌员第一个不发自己，而是发他的下一个人（顺时针的下一个人）。这样，每个人都会拿到13张牌。<br />现在我们定义牌的顺序，首先，花色是（梅花）&lt;（方片）&lt;（黑桃）&lt;（红桃），（输入时，我们用C,D,S,H分别表示梅花，方片，黑桃，红桃，即其单词首字母）。对于牌面的值，我们规定2 &lt; 3 &lt; 4 &lt; 5 &lt; 6 &lt; 7 &lt; 8 &lt; 9 &lt; T &lt; J &lt; Q &lt; K &lt; A。<br />现在你作为上帝，你要从小到大排序每个人手中的牌，并按照给定格式输出。</p><h3 id="sample-output-2"><a class="markdownIt-Anchor" href="#sample-output-2"></a> Sample Output</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">South player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|6 6|A A|6 6|J J|5 5|6 6|7 7|9 9|4 4|5 5|7 7|9 9|T T|</span><br><span class="line">| C | C | D | D | S | S | S | S | H | H | H | H | H |</span><br><span class="line">|6 6|A A|6 6|J J|5 5|6 6|7 7|9 9|4 4|5 5|7 7|9 9|T T|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">West player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|2 2|5 5|9 9|K K|5 5|7 7|9 9|4 4|T T|J J|A A|8 8|A A|</span><br><span class="line">| C | C | C | C | D | D | D | S | S | S | S | H | H |</span><br><span class="line">|2 2|5 5|9 9|K K|5 5|7 7|9 9|4 4|T T|J J|A A|8 8|A A|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">North player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|3 3|4 4|J J|2 2|3 3|T T|Q Q|K K|8 8|Q Q|K K|2 2|3 3|</span><br><span class="line">| C | C | C | D | D | D | D | D | S | S | S | H | H |</span><br><span class="line">|3 3|4 4|J J|2 2|3 3|T T|Q Q|K K|8 8|Q Q|K K|2 2|3 3|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">East player:</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">|7 7|8 8|T T|Q Q|4 4|8 8|A A|2 2|3 3|6 6|J J|Q Q|K K|</span><br><span class="line">| C | C | C | C | D | D | D | S | S | H | H | H | H |</span><br><span class="line">|7 7|8 8|T T|Q Q|4 4|8 8|A A|2 2|3 3|6 6|J J|Q Q|K K|</span><br><span class="line">+---+---+---+---+---+---+---+---+---+---+---+---+---+</span><br></pre></td></tr></table></figure><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>对于牌面的大小，开一个<code>map</code>来映射对应大小。一个字符串一个数值的读入即可。由于不支持<code>C++11</code>，需要手动初始化<code>map</code>（太坑了）。</p><p>读入完<code>sort</code>一下就星，可以说是这次rank的最简单的一道题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> s, v;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CARD_S[s] != CARD_S[a.s] ? CARD_S[s] &lt; CARD_S[a.s] : CARD_V[v] &lt; CARD_V[a.v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结-3"><a class="markdownIt-Anchor" href="#总结-3"></a> 总结</h2><p>没看到题目要求，吃了三发PE。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出多组数据发牌的结果，每组数据之后需要额外多输出一个空行！！！！！</span><br></pre></td></tr></table></figure><p>一定一定要仔细仔细读题。</p><h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; POS, CARD_S, CARD_V;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CARD_V[<span class="string">&#x27;2&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;3&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;4&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;5&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;6&#x27;</span>] = <span class="number">6</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;7&#x27;</span>] = <span class="number">7</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;8&#x27;</span>] = <span class="number">8</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;9&#x27;</span>] = <span class="number">9</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;T&#x27;</span>] = <span class="number">10</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;J&#x27;</span>] = <span class="number">11</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;Q&#x27;</span>] = <span class="number">12</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;K&#x27;</span>] = <span class="number">13</span>;</span><br><span class="line">    CARD_V[<span class="string">&#x27;A&#x27;</span>] = <span class="number">14</span>;</span><br><span class="line">    CARD_S[<span class="string">&#x27;C&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    CARD_S[<span class="string">&#x27;D&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">    CARD_S[<span class="string">&#x27;S&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">    CARD_S[<span class="string">&#x27;H&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">    POS[<span class="string">&#x27;S&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    POS[<span class="string">&#x27;W&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">    POS[<span class="string">&#x27;N&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">    POS[<span class="string">&#x27;3&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> s, v;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CARD_S[s] != CARD_S[a.s] ? CARD_S[s] &lt; CARD_S[a.s] : CARD_V[v] &lt; CARD_V[a.v];</span><br><span class="line">        <span class="comment">//        return CARD_V[v] != CARD_V[a.v] ? CARD_V[v] &lt; CARD_V[a.v] : CARD_S[s] &lt; CARD_S[a.s];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ac</span> &#123;</span></span><br><span class="line">    string s;</span><br><span class="line">    vector&lt;re&gt; card;</span><br><span class="line">&#125; v[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//     freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    <span class="built_in">dfs</span>();</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            v[i].card.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = POS[c];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">52</span>; i++) &#123;</span><br><span class="line">            k = (k + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span> (k == <span class="number">0</span>) k = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">char</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            re node;</span><br><span class="line">            node.s = a;</span><br><span class="line">            node.v = b;</span><br><span class="line">            v[k].card.<span class="built_in">push_back</span>(node);</span><br><span class="line">        &#125;</span><br><span class="line">        v[<span class="number">1</span>].s = <span class="string">&quot;South player&quot;</span>;</span><br><span class="line">        v[<span class="number">2</span>].s = <span class="string">&quot;West player&quot;</span>;</span><br><span class="line">        v[<span class="number">3</span>].s = <span class="string">&quot;North player&quot;</span>;</span><br><span class="line">        v[<span class="number">4</span>].s = <span class="string">&quot;East player&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(v[i].card.<span class="built_in">begin</span>(), v[i].card.<span class="built_in">end</span>());</span><br><span class="line">            cout &lt;&lt; v[i].s &lt;&lt; <span class="string">&quot;:\n&quot;</span>;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;+---+---+---+---+---+---+---+---+---+---+---+---+---+&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; v[i].card[j].v &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i].card[j].v;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;| &quot;</span> &lt;&lt; v[i].card[j].s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">13</span>; j++) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; v[i].card[j].v &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i].card[j].v;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;|&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;+---+---+---+---+---+---+---+---+---+---+---+---+---+&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a class="markdownIt-Anchor" href="#写在最后"></a> 写在最后</h1><p>这次rank的教训是，两次<code>WA</code>是因为自己第二题没去掉调试信息，三次<code>PE</code>是因为第三题没看到每组数据之间要多一行空格。<br />最终rank 4，较上周有进步，希望下次能拿到某个题目的首A。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【程序设计思维与实践】 Week2 作业 (3/4/数据班)</title>
      <link href="/2020/03/01/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week2-%E4%BD%9C%E4%B8%9A-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/"/>
      <url>/2020/03/01/%E3%80%90%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%80%9D%E7%BB%B4%E4%B8%8E%E5%AE%9E%E8%B7%B5%E3%80%91-Week2-%E4%BD%9C%E4%B8%9A-3-4-%E6%95%B0%E6%8D%AE%E7%8F%AD/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h1><p>在看代码的过程中整理了动态数组的相关内容，由于篇幅较长，且比较重要，单独整理了一篇博客如下：</p><p><a href="https://blog.csdn.net/Aloneingchild/article/details/104600465">动态数组初始化</a></p><h1 id="a-maze"><a class="markdownIt-Anchor" href="#a-maze"></a> A - MAZE</h1><h2 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h2><p>东东有一张地图，想通过地图找到妹纸。地图显示，0表示可以走，1表示不可以走，左上角是入口，右下角是妹纸，这两个位置保证为0。既然已经知道了地图，那么东东找到妹纸就不难了，请你编一个程序，写出东东找到妹纸的最短路线。输入是一个5 × 5的二维数组，且保证一定有解</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>从(0，0)位置开始BFS，每次向上下左右四个方向扩展状态。直到最终达到（4，4）为止。</p><p>可以map，来记录路径。map中的关系为当前状态又哪一个状态转移而来。</p><p>根据BFS的性质，第一个达到（4，4）的值定位最优解。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>这是一道简答的BFS题，利用map记录路径即可。</p><p>这里注意，对于结构体重载比较运算符只需要重载一个<code>&lt;</code>就够了，至于为什么，因为<code>c++</code>会自动补出其它运算符。PS：只能用于<code>&lt;</code>，其它符号不可以。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x != a.x ? x &lt; a.x : y &lt; a.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>][<span class="number">10</span>], v[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> fx[] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> fy[] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">map&lt;re, re&gt; M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(re s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; s.x&lt;&lt;&quot; &quot;&lt;&lt; s.y&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span> (M.<span class="built_in">find</span>(s) != M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(M[s]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; s.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; s.y &lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;re&gt; Q;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    vis[<span class="number">0</span>][<span class="number">0</span>]= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        re s = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (s.x == <span class="number">4</span> &amp;&amp; s.y == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(&#123;<span class="number">4</span>, <span class="number">4</span>&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> tx = s.x + fx[i], ty = s.y + fy[i];</span><br><span class="line">            <span class="keyword">if</span> (tx &lt; <span class="number">0</span> || ty &lt; <span class="number">0</span> || tx &gt; <span class="number">4</span> || ty &gt; <span class="number">4</span> || vis[tx][ty] || v[tx][ty]) <span class="keyword">continue</span>;</span><br><span class="line">            M[&#123;tx, ty&#125;] = s;</span><br><span class="line">            vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line">            Q.<span class="built_in">push</span>(&#123;tx, ty&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            cin &gt;&gt; v[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="b-pour-water"><a class="markdownIt-Anchor" href="#b-pour-water"></a> B - Pour Water</h1><h2 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h2><p>倒水问题 “fill A” 表示倒满A杯，&quot;empty A&quot;表示倒空A杯，“pour A B” 表示把A的水倒到B杯并且把B杯倒满或A倒空。</p><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>首先初始化位两个杯子均为空（0，0）。</p><p>对于每一个状态，至多有六种状态可以转移：</p><ul><li>倒满A</li><li>倒满B</li><li>倒空A</li><li>倒空B</li><li>A倒入B</li><li>B倒入A</li></ul><p>注意进行适当剪枝，如当前A已空，不必再次倒空A即可。</p><p>同样可以利用map来记录路径。</p><h2 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h2><p>这是一个类隐藏图问题，将每一个状态看成一个点，扩展出其它节点。直到满足条件。同样可以利用map来记录路径。</p><h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x != a.x ? x &lt; a.x : y &lt; a.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">map&lt;re, re&gt; M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(re t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t.x == <span class="number">0</span> &amp;&amp; t.y == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(M[t]);</span><br><span class="line">    cout &lt;&lt; t.str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C)</span> </span>&#123;</span><br><span class="line">    queue&lt;re&gt; Q;</span><br><span class="line">    M.<span class="built_in">clear</span>();</span><br><span class="line">    re fnode;</span><br><span class="line">    fnode.x = fnode.y = <span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(fnode);</span><br><span class="line">    <span class="comment">//    cout &lt;&lt; A&lt;&lt;&quot; &quot;&lt;&lt;B&lt;&lt;&quot; &quot;&lt;&lt;C&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        re snode = Q.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">//        cout &lt;&lt; snode.x&lt;&lt;&quot; &quot;&lt;&lt;snode.y&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span> (snode.x == C || snode.y == C) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(snode);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;success&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.x != A) &#123;  <span class="comment">// x 倒满</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.x = A;</span><br><span class="line">            tnode.str = <span class="string">&quot;fill A&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.y != B) &#123;  <span class="comment">// y 倒满</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.y = B;</span><br><span class="line">            tnode.str = <span class="string">&quot;fill B&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.y != <span class="number">0</span>) &#123;  <span class="comment">// y 倒空</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.y = <span class="number">0</span>;</span><br><span class="line">            tnode.str = <span class="string">&quot;empty B&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.x != <span class="number">0</span>) &#123;  <span class="comment">// x 倒空</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.x = <span class="number">0</span>;</span><br><span class="line">            tnode.str = <span class="string">&quot;empty A&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.x != <span class="number">0</span>) &#123;  <span class="comment">// x 倒给 y</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.y = <span class="built_in">min</span>(B, tnode.y + tnode.x);</span><br><span class="line">            tnode.x = snode.x - (tnode.y - snode.y);</span><br><span class="line">            tnode.str = <span class="string">&quot;pour A B&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (snode.y != <span class="number">0</span>) &#123;  <span class="comment">// y 倒给 x</span></span><br><span class="line">            re tnode = snode;</span><br><span class="line">            tnode.x = <span class="built_in">min</span>(A, tnode.x + tnode.y);</span><br><span class="line">            tnode.y = snode.y - (tnode.x - snode.x);</span><br><span class="line">            tnode.str = <span class="string">&quot;pour B A&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (M.<span class="built_in">find</span>(tnode) == M.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                M[tnode] = snode;</span><br><span class="line">                Q.<span class="built_in">push</span>(tnode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* code */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A, B, C;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; A &gt;&gt; B &gt;&gt; C) &#123;</span><br><span class="line">        <span class="built_in">bfs</span>(A, B, C);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维与实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计思维与实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - new - 动态数组 - 初始化</title>
      <link href="/2020/03/01/C-new-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2020/03/01/C-new-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="数组的动态初始化"><a class="markdownIt-Anchor" href="#数组的动态初始化"></a> 数组的动态初始化</h1><p>在代码的时候看到了new初始化的一些问题，查阅了相关文档总结如下。可直接阅读结论部分，文档内内容在下面。</p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 每个元素都没有初始化</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>] (); <span class="comment">// 每个元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">7</span>); <span class="comment">// 元素初始化为8</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(); <span class="comment">// 元素初始化为0</span></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>; <span class="comment">// 元素没有初始化</span></span><br><span class="line">string *p = <span class="keyword">new</span> string[<span class="number">10</span>]; <span class="comment">// 每个元素调用默认构造函数初始化</span></span><br><span class="line">string *p = <span class="keyword">new</span> string[<span class="number">10</span>](); <span class="comment">// 每个元素调用默认构造函数初始化</span></span><br></pre></td></tr></table></figure><p>为什么没有<code>int *p = new int[10](7)</code>，因为标准不支持，可见规则2。</p><p><strong>动态数组初始化：</strong></p><ol><li><p>动态数组只能初始化为元素类型的默认值，而不能像数组变量一样，用初始化列表为数组元素提供各不相同的初值。</p></li><li><p>对于内置数据类型元素的数组，必须使用()来显示指定程序执行初始化操作，否则程序不执行初始化操作：</p></li><li><p>类类型元素的数组，则无论是否使用（），都会自动调用其默认构造函数来初始化：</p></li></ol><h2 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h2><p>new 表达式所创建的对象按照下列规则初始化：</p><ol><li>对于非数组的类型，在所得内存区域中构造单个对象。<ul><li>若无初始化器，则对象被默认初始化。</li><li>若初始化器是带括号的实参列表，则对象被直接初始化。</li><li>若 初始化器 是花括号包围的实参列表，则对象被列表初始化。(C++11 起)</li></ul></li><li>若 类型 是数组类型，则初始化一个数组的对象。<ul><li>若无初始化器，则每个元素被默认初始化。</li><li>若初始化器是一对空括号，则每个元素被值初始化。</li><li>若初始化器是花括号包围的实参列表，则数组被聚合初始化。(C++11 起)</li><li>若初始化器是带括号的实参列表，则数组被聚合初始化。</li></ul></li></ol><h3 id="默认初始化"><a class="markdownIt-Anchor" href="#默认初始化"></a> 默认初始化</h3><ul><li>若 <code>T</code> 是<code>no- POD</code>类类型（<code>int</code>, <code>char</code>, <code>wchar_t</code>, <code>bool</code>, <code>float</code>, <code>double</code> 是POD类型 ）。调用所选的构造函数，以提供新对象的初始值；</li><li>若 <code>T</code> 是数组类型，则每个数组元素都被默认初始化；</li><li>否则，不做任何事：具有自动存储期的对象（及其子对象）被初始化为不确定值。</li></ul><h3 id="直接初始化"><a class="markdownIt-Anchor" href="#直接初始化"></a> 直接初始化</h3><p>可以理解为复制初始化。区别是：直接初始化考虑所有构造函数和所有用户定义转换函数。</p><h3 id="值初始化"><a class="markdownIt-Anchor" href="#值初始化"></a> 值初始化</h3><p><strong><code>C++11</code>前：</strong></p><ol><li><p>若 <code>T</code> 是有至少一个用户提供的任意种类的构造函数的类类型，则调用默认构造函数；</p></li><li><p>若 <code>T</code> 是没有任何用户提供的构造函数的非联合体类类型，则值初始化 T 的每个非静态数据成员与基类组分；</p></li></ol><p><strong><code>C++11</code>后：</strong></p><ol><li><p>若 <code>T</code> 是没有默认构造函数，或拥有用户提供的或被删除的默认构造函数的类类型，则默认初始化对象；</p></li><li><p>若 <code>T</code> 是拥有默认构造函数的类类型，而默认构造函数既非用户提供亦未被删除（即它可以是拥有隐式定义的或默认化的默认构造函数的类），则零初始化对象，然后若其拥有非平凡的默认构造函数，则默认初始化它；</p></li></ol><hr /><ol start="3"><li><p>若 <code>T</code> 是数组类型，则值初始化数组的每个元素；</p></li><li><p>否则，零初始化对象。</p></li></ol><h4 id="pod"><a class="markdownIt-Anchor" href="#pod"></a> POD</h4><p>摘自某百科：</p><p>A PDS type in C++, or Plain Old C++ Object, is defined as either a scalar type or a PDS class. A PDS class has no user-defined copy assignment operator, no user-defined destructor, and no non-static data members that are not themselves PDS. Moreover, a PDS class must be an aggregate, meaning it has no user-declared constructors, no private nor protected non-static data, no virtual base classes and no virtual functions. The standard includes statements about how PDS must behave in C++. The type_traits library in the C++ Standard Library provides a template named is_pod that can be used to determine whether a given type is a POD. In C++20 the notion of “plain old data” (POD) and by that is_pod is deprecated and replaced with the concept of “trivial” and “standard-layout” types.</p><p>In some contexts, C++ allows only PDS types to be used. For example, a union in C++98 cannot contain a class that has virtual functions or nontrivial constructors or destructors. This restriction is imposed because the compiler cannot determine which constructor or destructor should be called for a union. PDS types can also be used for interfacing with C, which supports only PDS.</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django Filefield 保存用户上传文件</title>
      <link href="/2020/02/25/Django-Filefield-%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2020/02/25/Django-Filefield-%E4%BF%9D%E5%AD%98%E7%94%A8%E6%88%B7%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="django-filefield-保存用户上传文件"><a class="markdownIt-Anchor" href="#django-filefield-保存用户上传文件"></a> Django Filefield 保存用户上传文件</h1><p>网上关于<code>Django</code> <code>Filefield</code> 的文章很少。<br />今天踩了踩坑，给了一套<code>Filefiled</code>上传保存文件的方法。<br />跟一般web开发一样，上传的文件保存在请求体的某个字段中，通常为<code>file</code>字段<br />在<code>views.py</code>中，可以这样获得上传的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">avatar = request.FILES.get(<span class="string">&quot;file&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样<code>avatar</code>就存储了上传的文件，保存其实有很简单的方法，<code>django</code>替你封装好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># view.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="keyword">import</span> datetime</span><br><span class="line">    user.avatar.save(<span class="string">&quot;&#123;&#125;_&#123;&#125;.jpg&quot;</span>.<span class="built_in">format</span>(user.<span class="built_in">id</span>,  datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)), avatar)</span><br><span class="line">    user.save()</span><br></pre></td></tr></table></figure><p>这里顺便对保存的数据进行了格式转化，调用了<code>python</code>的<code>datatime</code>包，当然调用<code>time</code>包或者<code>Django</code>的<code>timezone</code>包也是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIPS - 反汇编 - 拆炸弹 - bomb</title>
      <link href="/2020/02/23/MIPS-%E5%8F%8D%E6%B1%87%E7%BC%96-%E6%8B%86%E7%82%B8%E5%BC%B9-bomb/"/>
      <url>/2020/02/23/MIPS-%E5%8F%8D%E6%B1%87%E7%BC%96-%E6%8B%86%E7%82%B8%E5%BC%B9-bomb/</url>
      
        <content type="html"><![CDATA[<h1 id="mips-反汇编-拆炸弹-bomb"><a class="markdownIt-Anchor" href="#mips-反汇编-拆炸弹-bomb"></a> MIPS - 反汇编 - 拆炸弹 - bomb</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>整理文档发现了之前的实验报告，鉴于从17级开始才开始使用MIPS实验环境，取实验报告精华，整理主要思路如下。该博客叙述风格参考了窦优秀学长的博客。<br />该博客旨在帮助入门分析，不对整个过程详细介绍。前三个炸弹较为详细。<br />课程为山东大学计算机专业大二上学期计算机系统原理实验。</p><h2 id="作者信息"><a class="markdownIt-Anchor" href="#作者信息"></a> 作者信息</h2><p>2018级山东大学计算机LL</p><h2 id="gdb"><a class="markdownIt-Anchor" href="#gdb"></a> GDB</h2><ul><li>设置、查看、删除断点：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.b * 0x233666  </span><br><span class="line">2.info b  </span><br><span class="line">3.delete 1  </span><br></pre></td></tr></table></figure><ul><li>查看寄存器、变量中的值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.x <span class="variable">$ra</span>  <span class="comment"># 与p *$ra 类似  </span></span><br><span class="line">2.p <span class="variable">$ra</span>  <span class="comment">#打印参数  </span></span><br></pre></td></tr></table></figure><h2 id="实验"><a class="markdownIt-Anchor" href="#实验"></a> 实验</h2><h3 id="先给出一些常用指令-寄存器和函数的说明"><a class="markdownIt-Anchor" href="#先给出一些常用指令-寄存器和函数的说明"></a> 先给出一些常用指令、寄存器和函数的说明：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>BEQZ RS, OFF18 IF RS = <span class="number">0</span>, PC = OFF18  </span><br><span class="line"><span class="number">2.</span>（如果寄存器中值为<span class="number">0</span>，PC指针赋值为立即数）  </span><br><span class="line"><span class="number">3.</span>BEQ RS, RT, OFF18 IF RS = RT, PC = OFF18±  </span><br><span class="line"><span class="number">4.</span>SLTI RD, RS, CONST16 RD = (RS± &lt; CONST16±) ? <span class="number">1</span> : <span class="number">0</span>  </span><br></pre></td></tr></table></figure><h3 id="炸弹一"><a class="markdownIt-Anchor" href="#炸弹一"></a> 炸弹一</h3><p>虽然&lt;phase_1&gt;的拆除思路在指导书中已大致给出，下面还是对该炸弹进行简要分析。结合对MIPS寄存器的了解（详细分析见结论分析与体会），可知$a0 and $a1寄存器通常用来函数参数的传递。在&lt;phase_1&gt;中调用了函数&lt;strings_not_equal&gt;，并在调用前对$a0 and $a1寄存器进行修改。分析汇编带代码：<br />结束&lt;strings_not_equal&gt;后，判断v0值是否为0，若为0正常结束函数，若不为0执行&lt;explode_bomb&gt;，即炸弹爆炸。<br />因此，该炸弹即读入字符串和一预设字符串相同即可拆除。通过GDB工具在400d8c地址处查看$a1寄存器指向地址中的值 x /s $a1，可知该字符串为Let’s begin now！。读入时输入该字符串，即可正常拆除炸弹。</p><h3 id="炸弹二"><a class="markdownIt-Anchor" href="#炸弹二"></a> 炸弹二</h3><p>进入第二个炸弹时调用了&lt;read_six_numbers&gt;函数，可以知道该函数读入的为6个数字。<br />循环结束后执行下述指令：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400</span>d8c: <span class="number">0</span>c10073e    jal  <span class="number">401</span>cf8 &lt;strings_not_equal&gt;  </span><br><span class="line"><span class="number">2.</span><span class="number">400</span>d90: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">3.</span><span class="number">400</span>d94: <span class="number">10400003</span>    beqz    v0,<span class="number">400</span>da4 &lt;phase_1+<span class="number">0x38</span>&gt;  </span><br><span class="line"><span class="number">4.</span><span class="number">400</span>d98: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">5.</span><span class="number">400</span>d9c: <span class="number">0</span>c10087c    jal <span class="number">4021f</span>0 &lt;explode_bomb&gt;  </span><br></pre></td></tr></table></figure><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223214742369.png" alt="在这里插入图片描述" /></p><p>分析可知循环会进行5次。<br />在每层循环中均有一个&lt;explode_bomb&gt; ，即会进行5次数的判断。且每次判断$a0和$v0寄存器中的值是否相同。</p><h3 id="炸弹三"><a class="markdownIt-Anchor" href="#炸弹三"></a> 炸弹三</h3><p>进入函数后，会先执行如下汇编语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400f</span>2c: <span class="number">8f</span>dc0018    lw  gp,<span class="number">24</span>(s8)      <span class="meta"># gp = M[s8+24]  </span></span><br><span class="line"><span class="number">2.</span><span class="number">400f</span>30: <span class="number">28420003</span>    slti    v0,v0,<span class="number">3</span>      # v0 = (v0&lt;<span class="number">3</span>)?<span class="number">1</span>:<span class="number">0</span>   </span><br><span class="line"><span class="number">3.</span><span class="number">400f</span>34: <span class="number">10400004</span>    beqz    v0,<span class="number">400f</span>48 &lt;phase_3+<span class="number">0x74</span>&gt;   </span><br></pre></td></tr></table></figure><p>其为判断函数读入的参数是否大于三个（实际只需要前三个）<br />$v0的值为44(s8)，猜测其为读入的一个参数，且不能比8小。之后会根据这个值跳转到一个地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">400f</span>5c: <span class="number">00021880</span>    sll v1,v0,<span class="number">0x2</span>  </span><br><span class="line"><span class="number">2.</span><span class="number">400f</span>60: <span class="number">3</span>c020040    lui v0,<span class="number">0x40</span>  </span><br><span class="line"><span class="number">3.</span><span class="number">400f</span>64: <span class="number">2442278</span>c    addiu   v0,v0,<span class="number">10124</span>  </span><br><span class="line"><span class="number">4.</span><span class="number">400f</span>68: <span class="number">00621021</span>    addu    v0,v1,v0  </span><br><span class="line"><span class="number">5.</span><span class="number">400f</span>6c: <span class="number">8</span>c420000    lw  v0,<span class="number">0</span>(v0)  </span><br><span class="line"><span class="number">6.</span><span class="number">400f</span>70: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">7.</span><span class="number">400f</span>74: <span class="number">00400008</span>    jr  v0  </span><br></pre></td></tr></table></figure><p>分析第一个数和第三个数应为数字，第二个数为字符。（233,将‘2’赋值给第二个参数，33赋给第3个参数）。的第三个参数判断与为学号最后一位相乘判断是不是与当前选参数相同。 <code>777</code><br />如学号最后一位为7，应该为<code>0 q 111</code></p><h3 id="炸弹四"><a class="markdownIt-Anchor" href="#炸弹四"></a> 炸弹四</h3><p>与炸弹3类似，开始时程序会先判断读入的是否为一个数字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">401310</span>: <span class="number">00401821</span>    move    v1,v0  </span><br><span class="line"><span class="number">2.</span><span class="number">401314</span>: <span class="number">24020001</span>    li  v0,<span class="number">1</span>  </span><br><span class="line"><span class="number">3.</span><span class="number">401318</span>: <span class="number">14620005</span>    bne v1,v0,<span class="number">401330</span> &lt;phase_4+<span class="number">0x74</span>&gt;  </span><br></pre></td></tr></table></figure><p>这里如果输入的第一个数是数字则v1为1，若为字符则v1为0。之后程序会判但学号最后一位是奇数还是偶数。<br /><s>这里某Y大佬直接看出来是斐波那契，问他为什么，因为递归 -1 -2 ，直接秒出，绝了。</s></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">40125</span>c: <span class="number">8f</span>c20028    lw  v0,<span class="number">40</span>(s8)  </span><br><span class="line"><span class="number">2.</span><span class="number">401260</span>: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">3.</span><span class="number">401264</span>: <span class="number">2442f</span>fff    addiu   v0,v0,<span class="number">-1</span>  </span><br><span class="line"><span class="number">4.</span><span class="number">401268</span>: <span class="number">00402021</span>    move    a0,v0  </span><br><span class="line"><span class="number">5.</span><span class="number">40126</span>c: <span class="number">0</span>c10048c    jal <span class="number">401230</span> &lt;func4&gt;  </span><br><span class="line"><span class="number">6.</span><span class="number">401270</span>: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">7.</span><span class="number">401274</span>: <span class="number">00408021</span>    move    s0,v0  </span><br><span class="line"><span class="number">8.</span><span class="number">401278</span>: <span class="number">8f</span>c20028    lw  v0,<span class="number">40</span>(s8)  </span><br><span class="line"><span class="number">9.</span><span class="number">40127</span>c: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">10.</span><span class="number">401280</span>: <span class="number">2442f</span>ffe    addiu   v0,v0,<span class="number">-2</span>  </span><br><span class="line"><span class="number">11.</span><span class="number">401284</span>: <span class="number">00402021</span>    move    a0,v0  </span><br><span class="line"><span class="number">12.</span><span class="number">401288</span>: <span class="number">0</span>c10048c    jal <span class="number">401230</span> &lt;func4&gt;  </span><br><span class="line"><span class="number">13.</span><span class="number">40128</span>c: <span class="number">00000000</span>    nop  </span><br><span class="line"><span class="number">14.</span><span class="number">401290</span>: <span class="number">02021021</span>    addu    v0,s0,v0  </span><br></pre></td></tr></table></figure><p>会递归的调用fun4($v0 – 1)和 fun4($v0-2)。并将这两个的返回结果相加存储在$v0中。其显然为斐波那契的调用方式。读入数位i是对应的数字是f[i+1]（func4索引从零开始，斐波那契索引从1开始）。<br />奇数情况下会判断函数返回结果是否为8，偶数判断是否为13。则学号末尾为奇数应该输入5，为偶数应该输入6。</p><h3 id="炸弹五"><a class="markdownIt-Anchor" href="#炸弹五"></a> 炸弹五</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221324966.png" alt="在这里插入图片描述" /></p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/2020022322132950.png" alt="在这里插入图片描述" /></p><p>目标值位giants，根据对应关系可构造字符串位opekma。</p><h3 id="炸弹六"><a class="markdownIt-Anchor" href="#炸弹六"></a> 炸弹六</h3><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221357366.png" alt="在这里插入图片描述" /></p><p>放张图吧：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221405687.png" alt="在这里插入图片描述" /></p><h3 id="隐藏炸弹"><a class="markdownIt-Anchor" href="#隐藏炸弹"></a> 隐藏炸弹</h3><h4 id="入口"><a class="markdownIt-Anchor" href="#入口"></a> 入口</h4><p>通过查看反汇编代码可以发现含有一个&lt;secrect_phase&gt;，进一步查看反汇编代码可以发现其进入的入口在&lt;phase_defused&gt;。而每一个炸弹调用完都会在主函数调用一次&lt;phase_defused&gt;。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="number">402288</span>: <span class="number">24020006</span>    li  v0,<span class="number">6</span>  </span><br><span class="line"><span class="number">2.</span><span class="number">40228</span>c: <span class="number">14620039</span>    bne v1,v0,<span class="number">402374</span> &lt;phase_defused+<span class="number">0x110</span>&gt;  </span><br></pre></td></tr></table></figure><p>查看代码可知，&lt;phase_defused&gt;仅在最后一个炸弹结束后才会往下进行判断，1-5炸弹中不会进入隐藏炸弹。</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221540211.png" alt="phase_defused" /></p><p>可以看到，目标字符串为austinpowers，即第四个炸弹出输入 5 austinpowers 即可进入隐藏炸弹。<br />也是放张图吧：</p><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/20200223221556480.png" alt="二叉树啊" /></p><p>答案:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一组</span></span><br><span class="line"><span class="number">20180000777</span>  </span><br><span class="line">Let<span class="string">&#x27;s begin now!  </span></span><br><span class="line"><span class="string">1 7 49 343 0 0  </span></span><br><span class="line"><span class="string">0 q 111  </span></span><br><span class="line"><span class="string">5 austinpowers  </span></span><br><span class="line"><span class="string">opekma  </span></span><br><span class="line"><span class="string">4 2 6 3 1 5  </span></span><br><span class="line"><span class="string">1001  </span></span><br><span class="line"><span class="string"># 第二组</span></span><br><span class="line"><span class="string">123456111132</span></span><br><span class="line"><span class="string">Let’s begin now!</span></span><br><span class="line"><span class="string">1 2 6 6 6 6</span></span><br><span class="line"><span class="string">4 o 114</span></span><br><span class="line"><span class="string">5 austinpowers</span></span><br><span class="line"><span class="string">opekma</span></span><br><span class="line"><span class="string">5 1 3 6 2 4</span></span><br></pre></td></tr></table></figure><h2 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h2><h3 id="mips常用寄存器"><a class="markdownIt-Anchor" href="#mips常用寄存器"></a> MIPS常用寄存器</h3><p>($v0-$v1)用于子程序的非浮点结果或返回值。<br />($a0-$a3)用来传递前四个参数给子程序，不够的用堆栈。$a0-$a3和$v0-$v1以及$ra一起来支持子程序／过程调用，分别用以传递参数，返回结果和存放返回地址。当需要使用更多的寄存器时，就需要堆栈(stack)。<br />($gp)为了简化静态数据的访问，MIPS软件保留了一个寄存器：全局指针gp，全局指针只想静态数据区中的运行时决定的地址。<br />($sp)指向当前正在操作的堆栈顶部。<br />($ra)在函数调用过程中，保持子函数返回后的指令地址。<br />($s8)也称为($fp)。不同编译器对其解释不同，在龙芯里更像传递给子函数的帧指针，这里不做讨论。</p><h3 id="实验环境搭建"><a class="markdownIt-Anchor" href="#实验环境搭建"></a> 实验环境搭建</h3><p>为了更好的的完成实验，我在自己电脑上搭建了MIPS指令集环境。可以采用两种策略，一种是qemu-user，一种是qemu-system。如果说qemu-system是模拟mips的操作系统，qemu-user更像是模拟mips的指令集。为了更快的响应时间，我选择了qemu-user。<br />并且采用了Ubuntu18.04操作系统。GDB采用了gdb-multiarch。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机系统原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MIPS </tag>
            
            <tag> 拆炸弹 </tag>
            
            <tag> 反汇编 </tag>
            
            <tag> 计算机系统原理 </tag>
            
            <tag> GDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu LTS 18.04 下 conda tmux zsh等配置</title>
      <link href="/2020/02/23/Ubuntu-LTS-18-04-%E4%B8%8B-conda-tmux-zsh%E7%AD%89%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/02/23/Ubuntu-LTS-18-04-%E4%B8%8B-conda-tmux-zsh%E7%AD%89%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一个新的ubuntu-lts-1804-conda-tmux-zsh等配置"><a class="markdownIt-Anchor" href="#一个新的ubuntu-lts-1804-conda-tmux-zsh等配置"></a> 一个新的Ubuntu LTS 18.04 conda tmux zsh等配置</h1><p>最近阿里云给出免费6个月2H4G服务器活动，领了一个并简单配置了一下。<br />相较于apt-get更推荐apt，它集合了apt-get，更新，更便捷。</p><h1 id="用户"><a class="markdownIt-Anchor" href="#用户"></a> 用户</h1><h2 id="创建新用户"><a class="markdownIt-Anchor" href="#创建新用户"></a> 创建新用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser xxx #创建用户</span><br><span class="line">sudo userdel xxx #删除用户</span><br></pre></td></tr></table></figure><h2 id="添加管理员权限"><a class="markdownIt-Anchor" href="#添加管理员权限"></a> 添加管理员权限</h2><p>首先：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;root ALL=(ALL) ALL&quot; 在起下面添加 &quot;xxx ALL=(ALL) ALL&quot; (这里的 xxx 是你的用户名)，然后保存退出。</span><br></pre></td></tr></table></figure><h2 id="修改主机名"><a class="markdownIt-Anchor" href="#修改主机名"></a> 修改主机名</h2><ul><li>首先修改<code>/etc/cloud/cloud.cfg</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/cloud/cloud.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash">找到preserve_hostname: <span class="literal">false</span>修改为preserve_hostname: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改主机名</span></span><br><span class="line">sudo vim /etc/hostname</span><br><span class="line"><span class="meta">#</span><span class="bash">然后改为需要的主机名后存盘退出</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">映射主机名（可选，因为域名只对应IP，和主机无关）</span></span><br><span class="line">sudo vim /etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">192.168.1.xxx 主机名</span></span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><ul><li><code>sudo reboot</code></li></ul><h1 id="系统"><a class="markdownIt-Anchor" href="#系统"></a> 系统</h1><h2 id="软件升级"><a class="markdownIt-Anchor" href="#软件升级"></a> 软件升级</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update: # 升级安装包相关的命令,刷新可安装的软件列表(但是不做任何实际的安装动作)</span><br><span class="line">sudo apt upgrade: # 进行安装包的更新(软件版本的升级)</span><br><span class="line">sudo apt dist-upgrade: # 除了拥有upgrade的全部功能外，dist-upgrade会比upgrade更智能地处理需要更新的软件包的依赖关系。</span><br><span class="line">sudo do-release-upgrade: # 进行系统版本的升级(Ubuntu版本的升级)，Ubuntu官方推荐的系统升级方式,若加参数-d还可以升级到开发版本,但会不稳定</span><br></pre></td></tr></table></figure><h2 id="zsh"><a class="markdownIt-Anchor" href="#zsh"></a> zsh</h2><h3 id="gittee加速"><a class="markdownIt-Anchor" href="#gittee加速"></a> gittee加速</h3><p><a href="https://blog.csdn.net/qwe641259875/article/details/107201760/">oh-my-zsh 国内安装及配置</a><br /><a href="https://blog.csdn.net/qq_41996454/article/details/102640653">极其舒爽的zsh配置（使用gitee镜像飞速下载）</a></p><h3 id="安装并替换"><a class="markdownIt-Anchor" href="#安装并替换"></a> 安装并替换</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置成默认shell</span></span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="主题"><a class="markdownIt-Anchor" href="#主题"></a> 主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 我常用 <span class="string">&quot;ys&quot;</span></span></span><br></pre></td></tr></table></figure><h3 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 高亮插件</span></span><br><span class="line">git clone git://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码提示</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">sudo vim ~/.zshrc</span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br><span class="line"><span class="meta">#</span><span class="bash"> save</span></span><br><span class="line">source ~/.zshrc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置conda</span></span><br><span class="line">export PATH=~/anaconda3/bin:$PATH</span><br></pre></td></tr></table></figure><h2 id="github-速度太慢"><a class="markdownIt-Anchor" href="#github-速度太慢"></a> github 速度太慢？</h2><p><a href="https://yq.aliyun.com/articles/713169">Github下载速度太慢怎么办？完美解决</a><br /><a href="https://blog.csdn.net/hzwwpgmwy/article/details/79043251">git clone速度太慢解决方案</a></p><h2 id="刷新dns"><a class="markdownIt-Anchor" href="#刷新dns"></a> 刷新dns</h2><p>Linux刷新dns的缓存方法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nscd restart</span><br></pre></td></tr></table></figure><p>如果发现提示命令找不到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: /etc/init.d/nscd: command not found</span><br></pre></td></tr></table></figure><p>后来发现是需要先安装nscd包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nscd</span><br></pre></td></tr></table></figure><p>最暴力的方法刷dns，重启网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h2 id="conda"><a class="markdownIt-Anchor" href="#conda"></a> conda</h2><p>使用当前用户安装即可, 按情况换源， 实测阿里云不换源体验很好</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华镜像站</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">升级conda(升级Anaconda前需要先升级conda)：conda update conda </span><br><span class="line">升级anaconda：conda update anaconda </span><br><span class="line">升级spyder：conda update spyder</span><br><span class="line">更新所有包：conda update --all</span><br><span class="line">安装包：conda install package</span><br><span class="line">更新包：conda update package</span><br></pre></td></tr></table></figure><h3 id="去掉base"><a class="markdownIt-Anchor" href="#去掉base"></a> 去掉(base)</h3><p><a href="https://www.jianshu.com/p/6cdc9713c4ed">安装conda后终端出现的(base)字样去除方法</a></p><h2 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install tmux</span><br><span class="line">tmux new -s session_name</span><br><span class="line">tmux attach -t session_name</span><br></pre></td></tr></table></figure><h3 id="配置鼠标"><a class="markdownIt-Anchor" href="#配置鼠标"></a> 配置鼠标</h3><p>下面是配置文件内容，在家目录下创建.tmux.conf，并粘贴下面内容保存后，进入tmux， ctrl+b，然后输入命令：source-file ~/.tmux.conf 即可。</p><p>步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.tmux.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入</span></span><br><span class="line">set-option -g mouse on</span><br></pre></td></tr></table></figure><p><code>ctrl+b :</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure><h2 id="解决git每次push都需要输入用户名和密码"><a class="markdownIt-Anchor" href="#解决git每次push都需要输入用户名和密码"></a> 解决git每次push都需要输入用户名和密码</h2><p>再用户根目录下输入即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><h2 id="配置免密登入法1"><a class="markdownIt-Anchor" href="#配置免密登入法1"></a> 配置免密登入（法1）</h2><ul><li>在win系统下找到用户目录的<code>.ssh</code>文件夹，将<code>id_rsa.pub</code>复制一份命名为<code>authorized_keys</code></li><li>将<code>authorized_keys</code>发送到ubuntu 根目录下的 <code>.ssh</code>中，若没有，则创建。</li></ul><p><a href="https://blog.csdn.net/zhangmingcai/article/details/95734889">ssh免密登陆失败原因总结（Linux）</a></p><h2 id="配置免密登入法2"><a class="markdownIt-Anchor" href="#配置免密登入法2"></a> 配置免密登入（法2）</h2><p>在终端中输入如下命令（Win下可用Git Bash）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 一路回车</span></span><br><span class="line">ssh-copy-id 用户名@服务器地址</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> conda </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下tmux操作指令整理</title>
      <link href="/2020/02/12/Linux%E4%B8%8Btmux%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/02/12/Linux%E4%B8%8Btmux%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="tmux"><a class="markdownIt-Anchor" href="#tmux"></a> tmux</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s session_name # 创建名为 session_name 的 tmux session</span><br><span class="line">tmux attach -t session_name # 重新回到叫做 session_name 的 tmux session</span><br><span class="line">tmux switch -t session_name #  切换到叫做 session_name 的 tmux session</span><br><span class="line">tmux list-sessions / tmux ls # 列出现有的所有 session</span><br><span class="line">tmux detach # 离开当前开启的 session</span><br><span class="line">tmux kill-server # 关闭所有 session</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctrl + b</span><br><span class="line">? 列出所有快捷键；按q返回</span><br><span class="line">d 脱离当前会话,可暂时返回Shell界面</span><br><span class="line">s 选择并切换会话；在同时开启了多个会话时使用</span><br><span class="line">D 选择要脱离的会话；在同时开启了多个会话时使用</span><br><span class="line">: 进入命令行模式；此时可输入支持的命令，例如 kill-server 关闭所有tmux会话</span><br><span class="line">[ 复制模式，光标移动到复制内容位置，空格键开始，方向键选择复制，回车确认，q/Esc退出</span><br><span class="line">] 进入粘贴模式，粘贴之前复制的内容，按q/Esc退出</span><br><span class="line">~ 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息</span><br><span class="line">t 显示当前的时间</span><br><span class="line">ctrl + z 挂起当前会话</span><br></pre></td></tr></table></figure><p>参考下面的文章<br /><a href="%60https://blog.csdn.net/lell3538/article/details/82150733%60/">tmux使用手记</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【板子】数据结构 &amp;&amp; 图论 &amp;&amp; 数论</title>
      <link href="/2017/11/09/%E6%9D%BF%E5%AD%90/"/>
      <url>/2017/11/09/%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h1><blockquote><p>2021-05-10 加入split</p><p>2020-12-13 加入技巧章节</p><p>2020-06-27 加入Kosaraju</p><p>2020-06-26 加入前向星、二分、修复割顶</p><p>2020-06-25 加入Trie树、O2优化、万能头部、二进制拆分、拓扑排序</p><p>2020-06-25 加入最小生成树、KMP、Dijkstra。更新矩阵快速幂</p><p>2020-06-25 更新代码片段，调整文档结构</p><p>2020-06-25 重新排版</p><p>2017-11-09 NOIP第一次整理上传</p></blockquote><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>自用板子，经测试代码均正确，可以放心食用，源自于17年准备NOIP（当时还不会md😭）。大学程序设计课对板子进行完善。</p><h1 id="代码片段"><a class="markdownIt-Anchor" href="#代码片段"></a> 代码片段</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2) </span></span><br><span class="line"><span class="comment">// #include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>, num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = <span class="built_in">getchar</span>()) == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        f = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        num = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c = <span class="built_in">getchar</span>())) num = num * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> num * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// cout.tie(NULL);</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fclose</span>(stdin);</span><br><span class="line">    <span class="built_in">fclose</span>(stdout);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h1><h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">tr[p].w=tr[p&lt;&lt;<span class="number">1</span>].w+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[p].lazy) <span class="keyword">return</span> ;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tr[p].l=l;tr[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[p].w=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);<span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)&#123;</span><br><span class="line">tr[p].w+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">tr[p].lazy+=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].r+tr[p].l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,mid,k);<span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)&#123;</span><br><span class="line"><span class="keyword">return</span> tr[p].w;</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].r+tr[p].l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid)+<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> c,x,y;LL k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">c=<span class="built_in">get_num</span>();x=<span class="built_in">get_num</span>();y=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">k=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,x,y,k);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树链剖分"><a class="markdownIt-Anchor" href="#树链剖分"></a> 树链剖分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">tr[p].w=tr[p&lt;&lt;<span class="number">1</span>].w+tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[p].lazy) <span class="keyword">return</span> ;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].w+=tr[p].lazy*(tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].r-tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">tr[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy+=tr[p].lazy;</span><br><span class="line">tr[p].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">tr[p].l=l;tr[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[p].w=w[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].w+=(r-l+<span class="number">1</span>)*k;</span><br><span class="line">tr[p].lazy+=k;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>,l,mid,k);<span class="built_in">add</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[p].l==l&amp;&amp;tr[p].r==r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> tr[p].w;</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_down</span>(p);</span><br><span class="line"><span class="keyword">int</span> mid=(tr[p].l+tr[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid) ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans=<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>,l,mid)+<span class="built_in">query</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(p);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x])&#123;</span><br><span class="line">f[cur]=x;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs_1</span>(cur);</span><br><span class="line">siz[x]+=siz[cur];</span><br><span class="line"><span class="keyword">if</span>(siz[son[x]]&lt;siz[cur]) son[x]=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">id[x]=++tot;w[tot]=d[x];top[x]=p;</span><br><span class="line"><span class="keyword">if</span>(son[x]) <span class="built_in">dfs_2</span>(son[x],p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x]&amp;&amp;cur!=son[x])&#123;</span><br><span class="line"><span class="built_in">dfs_2</span>(cur,cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) <span class="built_in">swap</span>(a,b);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,id[top[b]],id[b],k);</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;<span class="keyword">if</span>(deep[a]&gt;deep[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,id[a],id[b],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,id[top[b]],id[b]); ans%=MOD;</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;<span class="keyword">if</span>(deep[a]&gt;deep[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">ans+=<span class="built_in">query</span>(<span class="number">1</span>,id[a],id[b]);</span><br><span class="line"><span class="keyword">return</span> ans%MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,root;</span><br><span class="line">n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();root=<span class="built_in">get_num</span>();MOD=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();v[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">v[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs_1</span>(root);</span><br><span class="line"><span class="built_in">dfs_2</span>(root,root);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> c,x,y;LL z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">c=<span class="built_in">get_num</span>();x=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">y=<span class="built_in">get_num</span>();</span><br><span class="line">z=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">modify</span>(x,y,z%MOD);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=<span class="built_in">get_num</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">find</span>(x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">3</span>)&#123;</span><br><span class="line">z=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,id[x],id[x]+siz[x]<span class="number">-1</span>,z%MOD);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">4</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,id[x],id[x]+siz[x]<span class="number">-1</span>)%MOD&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 <code>for(int i=1;i&lt;=n;i++) f[i]=i;</code></p><h2 id="树状数组-1"><a class="markdownIt-Anchor" href="#树状数组-1"></a> 树状数组 1</h2><p>在全局有个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，主函数有个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，读入<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>的时候，全局相当于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>是0。</p><h2 id="树状数组-2"><a class="markdownIt-Anchor" href="#树状数组-2"></a> 树状数组 2</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,LL p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i)) tr[i]+=p;</span><br><span class="line"><span class="comment">//for和tr的i不要写错啊</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i)) ans+=tr[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>modify(x,k);modify(y+1,-k);</code> 写的 <code>modify(x,k);modify(y+1,k);</code></p></li><li><p><code>for(int i=x;i&lt;=n;i+=lowbit(i)) tr[i]+=p;</code> 写的 <code>for(int i=x;i&lt;=n;i+=lowbit(i)) tr[x]+=p;</code></p></li></ul><h2 id="stl堆priority_queue"><a class="markdownIt-Anchor" href="#stl堆priority_queue"></a> STL堆，priority_queue</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;Q;</span><br><span class="line"><span class="keyword">int</span> n;n=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">int</span> c,x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">x=<span class="built_in">get_num</span>();</span><br><span class="line">Q.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="number">2</span>)&#123;</span><br><span class="line">cout&lt;&lt;Q.<span class="built_in">top</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前向星"><a class="markdownIt-Anchor" href="#前向星"></a> 前向星</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">v[++p].to=y;</span><br><span class="line">v[p].nxt=fa[x];</span><br><span class="line">v[p].w=w;</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好久没用了，记一下吧</p><h1 id="图论"><a class="markdownIt-Anchor" href="#图论"></a> 图论</h1><h2 id="最近公共祖先"><a class="markdownIt-Anchor" href="#最近公共祖先"></a> 最近公共祖先</h2><h3 id="最近公共祖先lca"><a class="markdownIt-Anchor" href="#最近公共祖先lca"></a> 最近公共祖先（LCA)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line">lca[cur][<span class="number">0</span>]=x;</span><br><span class="line"><span class="built_in">dfs</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[a]&gt;deep[b]) <span class="built_in">swap</span>(a,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(deep[lca[b][i]]&gt;=deep[a]) b=lca[b][i];</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">19</span>;i&gt;=<span class="number">0</span>;i--)&#123;<span class="comment">// 是大于等于0不是(int i=19;i;i--)</span></span><br><span class="line"><span class="keyword">if</span>(lca[a][i]!=lca[b][i])&#123;</span><br><span class="line">a=lca[a][i];b=lca[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lca[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">deep[s]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">19</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">lca[i][j]=lca[lca[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>vector</code> TLE 了俩点 还是好好用<code>struct</code> 吧</p><h3 id="最近公共祖先tarjan"><a class="markdownIt-Anchor" href="#最近公共祖先tarjan"></a> 最近公共祖先（Tarjan）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(cur);</span><br><span class="line">f[<span class="built_in">find</span>(cur)]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=faa[x];b;b=qv[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[qv[b].to])&#123;</span><br><span class="line">qv[b^<span class="number">1</span>].ans=qv[b].ans=<span class="built_in">find</span>(qv[b].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">v[++p].to=y;</span><br><span class="line">v[p].nxt=fa[x];</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>v[++p].to=y</code>;<code>y</code>写成了<code>x</code></p><h3 id="最近公共祖先树剖"><a class="markdownIt-Anchor" href="#最近公共祖先树剖"></a> 最近公共祖先（树剖）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_1</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x])&#123;</span><br><span class="line">f[cur]=x;</span><br><span class="line">deep[cur]=deep[x]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs_1</span>(cur);</span><br><span class="line">siz[x]+=siz[cur];<span class="comment">//忘写了一开始</span></span><br><span class="line"><span class="keyword">if</span>(siz[son[x]]&lt;siz[cur]) son[x]=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">top[x]=p;</span><br><span class="line"><span class="keyword">if</span>(son[x]) <span class="built_in">dfs_2</span>(son[x],p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(cur!=f[x]&amp;&amp;cur!=son[x])&#123;</span><br><span class="line"><span class="built_in">dfs_2</span>(cur,cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line"><span class="keyword">if</span>(deep[top[a]]&gt;deep[top[b]]) <span class="built_in">swap</span>(a,b);</span><br><span class="line">b=f[top[b]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (deep[a]&lt;=deep[b])? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dfs_1</code>的时候<br /><code>dfs_1(cur)</code>后<br />忘记写：<code>siz[x]+=siz[cur];</code><br />就相当于没有长长的链链了<br />就跳的很慢很慢了 然后就T了<br />其实常数是比LCA小的 OK的说</p><h2 id="单源最短路径"><a class="markdownIt-Anchor" href="#单源最短路径"></a> 单源最短路径</h2><h3 id="spfa"><a class="markdownIt-Anchor" href="#spfa"></a> SPFA</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,s;n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();s=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line">a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();c=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">add</span>(a,b,c);<span class="comment">//注意单项边还是双向边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s]=<span class="number">0</span>;</span><br><span class="line">vis[s]=<span class="number">1</span>;<span class="comment">//忘写了一开始</span></span><br><span class="line">Q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="keyword">int</span> h=Q.<span class="built_in">front</span>();</span><br><span class="line">vis[h]=<span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[h];b;b=v[b].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[h]+v[b].w)</span><br><span class="line">&#123;</span><br><span class="line">d[cur]=d[h]+v[b].w;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">vis[cur]=<span class="number">1</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>queue</code> 里  <code>vis[h]</code>进来的时候 没有写<code>vis[h]=0</code>;</p><h3 id="floyd"><a class="markdownIt-Anchor" href="#floyd"></a> Floyd</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;n=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">v[i][j]=<span class="built_in">get_num</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) v[i][i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">v[i][j]=<span class="built_in">min</span>(v[i][j],v[i][k]+v[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();</span><br><span class="line">cout&lt;&lt;v[a][b]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dijkstra"><a class="markdownIt-Anchor" href="#dijkstra"></a> Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = <span class="built_in">get_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = <span class="built_in">get_num</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = <span class="built_in">min</span>(d[i], d[k] + v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆优化dijkstra"><a class="markdownIt-Anchor" href="#堆优化dijkstra"></a> 堆优化Dijkstra</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> d,k;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(re a, re b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.d&gt;b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line">priority_queue&lt;re,vector&lt;re&gt;,cmp &gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">re s;</span><br><span class="line">n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();s.k=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();c=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">add</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) d[i]=<span class="number">2147483647</span>;</span><br><span class="line">d[s.k]=<span class="number">0</span>;re B;s.d=<span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">re h=Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[h.k]) <span class="keyword">continue</span>;</span><br><span class="line">vis[h.k]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[h.k];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[h.k]+v[b].w)&#123;</span><br><span class="line">d[cur]=d[h.k]+v[b].w;</span><br><span class="line">B.d=d[cur];B.k=v[b].to;</span><br><span class="line">Q.<span class="built_in">push</span>(B);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cout&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负环"><a class="markdownIt-Anchor" href="#负环"></a> 负环</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="keyword">return</span> ;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(d[cur]&gt;d[x]+v[b].w)&#123;</span><br><span class="line">d[cur]=d[x]+v[b].w;</span><br><span class="line"><span class="keyword">if</span>(vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(cur);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">&#123;</span><br><span class="line">t--;<span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line"><span class="built_in">memset</span>(fa,<span class="number">0</span>,<span class="keyword">sizeof</span>(fa));p=<span class="number">0</span>;</span><br><span class="line">n=get_num();m=get_num();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,w;</span><br><span class="line">a=get_num();b=get_num();w=get_num();</span><br><span class="line">add(a,b,w);</span><br><span class="line"><span class="keyword">if</span>(w&gt;=<span class="number">0</span>) add(b,a,w); </span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dfs(i);</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;YE5\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;N0\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2><h3 id="kruskal"><a class="markdownIt-Anchor" href="#kruskal"></a> Kruskal</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> par[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re&amp; a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; a.w; &#125;</span><br><span class="line">&#125; v[MAXN * MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> par[x] == x ? x : par[x] = <span class="built_in">find</span>(par[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[cnt].x = <span class="number">0</span>;</span><br><span class="line">        v[cnt].y = i;</span><br><span class="line">        cin &gt;&gt; v[cnt].w;</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="built_in">get_num</span>();</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            v[cnt].x = i;</span><br><span class="line">            v[cnt].y = j;</span><br><span class="line">            v[cnt].w = w;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(v + <span class="number">1</span>, v + cnt);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) par[i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(v[i].x) != <span class="built_in">find</span>(v[i].y)) &#123;</span><br><span class="line">            ans += v[i].w;</span><br><span class="line">            par[<span class="built_in">find</span>(v[i].x)] = <span class="built_in">find</span>(v[i].y);</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="prim"><a class="markdownIt-Anchor" href="#prim"></a> Prim</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = <span class="built_in">get_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = <span class="built_in">get_num</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">1e9</span>, k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!vis[i] &amp;&amp; d[i] &lt; sum) &#123;</span><br><span class="line">                sum = d[i];</span><br><span class="line">                k = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += d[k];</span><br><span class="line">        vis[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            d[i] = <span class="built_in">min</span>(d[i], v[k][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="堆优化的prim"><a class="markdownIt-Anchor" href="#堆优化的prim"></a> 堆优化的Prim</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e2</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> v[MAXN][MAXN], vis[MAXN], d[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> d, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> re &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &gt; a.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;re&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    n = <span class="built_in">get_num</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        v[<span class="number">0</span>][i] = v[i][<span class="number">0</span>] = <span class="built_in">get_num</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            v[i][j] = <span class="built_in">get_num</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    Q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        re h = Q.<span class="built_in">top</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[h.d]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[h.d] = <span class="number">1</span>;</span><br><span class="line">        ans += h.w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (d[i] &gt; v[h.d][i]) &#123;</span><br><span class="line">                d[i] = v[h.d][i];</span><br><span class="line">                Q.<span class="built_in">push</span>(&#123;i, d[i]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二分图匹配-再打一遍"><a class="markdownIt-Anchor" href="#二分图匹配-再打一遍"></a> 二分图匹配 再打一遍</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])</span><br><span class="line">&#123;</span><br><span class="line">vis[cur]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[cur]||<span class="built_in">dfs</span>(match[cur]))</span><br><span class="line">&#123;</span><br><span class="line">match[cur]=x;</span><br><span class="line">match[x]=cur;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!match[i])&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,e;n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();e=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">if</span>(b&lt;=m) v[a].<span class="built_in">push_back</span>(b+n);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强连通分量"><a class="markdownIt-Anchor" href="#强连通分量"></a> 强连通分量</h2><h3 id="缩点-再打一遍"><a class="markdownIt-Anchor" href="#缩点-再打一遍"></a> 缩点 再打一遍</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">my_s.<span class="built_in">push</span>(x);in_s[x]=<span class="number">1</span>;<span class="comment">//注意不要忘了</span></span><br><span class="line">dfn[x]=low[x]=++tot;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[cur])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(cur);</span><br><span class="line">low[x]=<span class="built_in">min</span>(low[x],low[cur]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(in_s[cur]) low[x]=<span class="built_in">min</span>(low[x],dfn[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line">++bcnt;</span><br><span class="line"><span class="keyword">while</span>(my_s.<span class="built_in">top</span>()!=x)&#123;</span><br><span class="line">fd[my_s.<span class="built_in">top</span>()]=bcnt;d[bcnt]+=w[my_s.<span class="built_in">top</span>()];in_s[my_s.<span class="built_in">top</span>()]=<span class="number">0</span>;my_s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">d[bcnt]+=w[my_s.<span class="built_in">top</span>()];fd[my_s.<span class="built_in">top</span>()]=bcnt;in_s[my_s.<span class="built_in">top</span>()]=<span class="number">0</span>;my_s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[i];b;b=v[b].nxt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fd[i]!=fd[cur])</span><br><span class="line">&#123;</span><br><span class="line">qv[fd[i]].<span class="built_in">push_back</span>(fd[cur]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[x]) <span class="keyword">return</span> dp[x];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;qv[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">dp[x]=<span class="built_in">max</span>(dp[x],<span class="built_in">dfs</span>(qv[x][i]));</span><br><span class="line">&#125;</span><br><span class="line">dp[x]+=d[x];</span><br><span class="line"><span class="keyword">return</span> dp[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="割顶割点"><a class="markdownIt-Anchor" href="#割顶割点"></a> 割顶（割点）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tot;</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=v[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[cur])&#123;</span><br><span class="line">rt++;</span><br><span class="line">f[cur]=f[x];</span><br><span class="line"><span class="built_in">tarjan</span>(cur);</span><br><span class="line">low[x]=<span class="built_in">min</span>(low[x],low[cur]);</span><br><span class="line"><span class="keyword">if</span>(low[cur]&gt;=dfn[x]&amp;&amp;f[x]!=x&amp;&amp;!vis[x]) vis[x]=<span class="number">1</span>,ans++; <span class="comment">//重要</span></span><br><span class="line">&#125;<span class="keyword">else</span>  low[x]=<span class="built_in">min</span>(low[x],dfn[cur]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x&amp;&amp;rt&gt;=<span class="number">2</span>) ans++,vis[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="kosaraju"><a class="markdownIt-Anchor" href="#kosaraju"></a> Kosaraju</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n, c[N], dfn[N], vis[N], dcnt, scnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G1[N], G2[N];  <span class="comment">// G1 原图，G2 反向图</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G1[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[y]) <span class="built_in">dfs1</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">    dfn[++dcnt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    c[x] = scnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> y : G2[x]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[y]) <span class="built_in">dfs2</span>(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dcnt = scnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) <span class="built_in">dfs1</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c[dfn[i]]) ++scnt, <span class="built_in">dfs2</span>(dfs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>前序序列</li><li>后序序列</li><li>逆逆序序列（后序序列的逆序，原图缩点后的的拓扑顺序）</li></ul><p><img src="https://gitee.com/Anadem/blogImg/raw/master/img/image-20200627231608990.png" alt="" /></p><h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topoSort</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (in_deg[i] == <span class="number">0</span>) Q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    <span class="keyword">while</span> (!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.<span class="built_in">front</span>();</span><br><span class="line">        Q.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : v[u]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (--in_deg[i] == <span class="number">0</span>) Q.<span class="built_in">push</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans.<span class="built_in">size</span>() == n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : ans) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树上差分"><a class="markdownIt-Anchor" href="#树上差分"></a> 树上差分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fast_pow</span><span class="params">(LL a,LL p,LL k)</span></span>&#123;</span><br><span class="line">LL ans=(a==<span class="number">0</span>)?<span class="number">0</span>:<span class="number">1</span>;</span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,a=(a*a)%k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>) ans=(ans*a)%k;</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL n,l,r;cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i].m=<span class="built_in">get_num</span>();v[i].a=<span class="built_in">get_num</span>();</span><br><span class="line">&#125;</span><br><span class="line">LL M=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) M*=v[i].m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i].M=M/v[i].m;</span><br><span class="line">v[i].k=<span class="built_in">fast_pow</span>(v[i].M,v[i].m<span class="number">-2</span>,v[i].m);</span><br><span class="line">&#125;</span><br><span class="line">LL ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=(ans+v[i].a*v[i].M*v[i].k)%M;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans;</span></span><br><span class="line">LL anss=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(r&gt;=ans) anss=(r-ans)/M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l<span class="number">-1</span>&gt;=ans) anss-=(l-ans<span class="number">-1</span>)/M+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(anss==<span class="number">0</span>) cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;anss&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(l<span class="number">-1</span>&gt;=ans)&#123;</span><br><span class="line">cout&lt;&lt;((l<span class="number">-1</span>-ans)/M+<span class="number">1</span>)*M+ans;</span><br><span class="line">&#125;<span class="keyword">else</span> cout&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大流量"><a class="markdownIt-Anchor" href="#最大流量"></a> 最大流量</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50010</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">re</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> fd,to,nxt,ans;</span><br><span class="line">&#125;qv[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[maxn];</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>,fa[maxn],vis[maxn],d[maxn],f[maxn],fath[maxn];<span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">qv[++p].to=y;</span><br><span class="line">qv[p].nxt=fa[x];</span><br><span class="line">qv[p].fd=x;</span><br><span class="line">fa[x]=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get_num</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>,num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((c=<span class="built_in">getchar</span>())==<span class="string">&#x27; &#x27;</span>||c==<span class="string">&#x27;\n&#x27;</span>||c==<span class="string">&#x27;\r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> num=c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(c=<span class="built_in">getchar</span>())) num=num*<span class="number">10</span>+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> num*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x]==x) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> f[x]=<span class="built_in">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">f[x]=x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line">fath[cur]=x;</span><br><span class="line"><span class="built_in">tarjan</span>(cur);</span><br><span class="line">f[<span class="built_in">find</span>(cur)]=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b=fa[x];b;b=qv[b].nxt)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[qv[b].to])&#123;</span><br><span class="line">qv[b].ans=qv[b^<span class="number">1</span>].ans=<span class="built_in">find</span>(qv[b].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[x].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[cur])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(cur);</span><br><span class="line">d[x]+=d[cur]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=p;i+=<span class="number">2</span>)&#123;</span><br><span class="line">++d[qv[i].fd];++d[qv[i].to];--d[qv[i].ans];</span><br><span class="line">--d[fath[qv[i].ans]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,d[i]);</span><br><span class="line">&#125;<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n=<span class="built_in">get_num</span>();k=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();</span><br><span class="line">v[a].<span class="built_in">push_back</span>(b);v[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;a=<span class="built_in">get_num</span>();b=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="built_in">add</span>(a,b);<span class="built_in">add</span>(b,a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h1><h2 id="二分法"><a class="markdownIt-Anchor" href="#二分法"></a> 二分法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= x) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[mid] &gt;= x) &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三分法"><a class="markdownIt-Anchor" href="#三分法"></a> 三分法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> v[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> eps=<span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">find</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123; <span class="comment">//find类型不要写错</span></span><br><span class="line"><span class="keyword">double</span> ans=v[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">double</span> p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)&#123;</span><br><span class="line">p*=x;</span><br><span class="line">ans+=v[i]*p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> l,r,mid,midd;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) cin&gt;&gt;v[i];</span><br><span class="line"><span class="keyword">while</span>(l+eps&lt;=r)&#123;</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">midd=(l+mid)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(midd)&lt;<span class="built_in">find</span>(mid)) l=midd;</span><br><span class="line"><span class="keyword">else</span> r=mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5lf&quot;</span>,l);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>double</code> 类型用的<code>get_num()</code>读进去了<br />其实应该用<code>cin&gt;&gt;</code><br />能过样例也是奇迹</p><h2 id="lcs最长公共子序列onlogn做法"><a class="markdownIt-Anchor" href="#lcs最长公共子序列onlogn做法"></a> LCS（最长公共子序列）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>做法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;n=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[<span class="built_in">get_num</span>()]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> c=f[<span class="built_in">get_num</span>()];</span><br><span class="line"><span class="keyword">if</span>(c&gt;dp[len]) dp[++len]=c;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=len,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[mid]&gt;c) r=mid<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;dp[l]=c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;len;</span><br></pre></td></tr></table></figure><h2 id="二进制拆分"><a class="markdownIt-Anchor" href="#二进制拆分"></a> 二进制拆分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> w, k;</span><br><span class="line">        cin &gt;&gt; k &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt] = j * w;</span><br><span class="line">            k -= j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k) &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            v[cnt] = k * w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数论"><a class="markdownIt-Anchor" href="#数论"></a> 数论</h1><h2 id="快速幂"><a class="markdownIt-Anchor" href="#快速幂"></a> 快速幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fast_pow</span><span class="params">(LL a,LL p,LL k)</span></span>&#123;</span><br><span class="line">LL ans=(a==<span class="number">0</span>)?<span class="number">0</span>:<span class="number">1</span>;<span class="comment">//注意是a不是p</span></span><br><span class="line">a%=k;</span><br><span class="line"><span class="keyword">for</span>(;p;p&gt;&gt;=<span class="number">1</span>,a=(a*a)%k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p&amp;<span class="number">1</span>) ans=(ans*a)%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gcd"><a class="markdownIt-Anchor" href="#gcd"></a> gcd</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exgcd-同余方程"><a class="markdownIt-Anchor" href="#exgcd-同余方程"></a> exgcd 同余方程</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">LL x2=x,y2=y;</span><br><span class="line">x=y2;y=x2-(a/b)*y2;<span class="comment">//手推即可</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性筛素数"><a class="markdownIt-Anchor" href="#线性筛素数"></a> 线性筛素数</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;n=<span class="built_in">get_num</span>();m=<span class="built_in">get_num</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) pri[++cnt]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;pri[j]*i&lt;=n;j++)&#123;</span><br><span class="line">vis[i*pri[j]]=<span class="number">1</span>;<span class="comment">//注意谁%谁 后者%不动</span></span><br><span class="line"><span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//注意1首先啥都不是 其次他不是素数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[<span class="built_in">get_num</span>()]) cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有考虑<code>vis[1]=1</code>的情况 详情看日记</p><h2 id="矩阵快速幂"><a class="markdownIt-Anchor" href="#矩阵快速幂"></a> 矩阵快速幂</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;</span><br><span class="line">LL p = <span class="number">10007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    LL x[N][N];</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix &amp;t) <span class="keyword">const</span> &#123;</span><br><span class="line">        Matrix ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                ret.x[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; ++k) &#123;</span><br><span class="line">                    ret.x[i][j] += (x[i][k] * t.x[k][j]) % p;</span><br><span class="line">                    ret.x[i][j] %= p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为了防止奇怪的错误，最好写上构造函数</span></span><br><span class="line">    <span class="built_in">Matrix</span>() &#123; <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(x)); &#125;</span><br><span class="line">    <span class="built_in">Matrix</span>(<span class="keyword">const</span> Matrix &amp;t) &#123; <span class="built_in">memcpy</span>(x, t.x, <span class="built_in"><span class="keyword">sizeof</span></span>(x)); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">quick_pow</span><span class="params">(Matrix a, LL x)</span> </span>&#123;</span><br><span class="line">    Matrix ret;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        ret.x[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">1</span>) ret = ret * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        LL n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        Matrix a;</span><br><span class="line">        a.x[<span class="number">0</span>][<span class="number">0</span>] = a.x[<span class="number">1</span>][<span class="number">1</span>] = a.x[<span class="number">2</span>][<span class="number">0</span>] = a.x[<span class="number">2</span>][<span class="number">1</span>] = a.x[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        a.x[<span class="number">0</span>][<span class="number">2</span>] = a.x[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        Matrix P = <span class="built_in">quick_pow</span>(a, n);</span><br><span class="line">        cout &lt;&lt; P.x[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fast_pow</code>里面<code>p&gt;&gt;=1</code> 写的<code>p&gt;&gt;1</code> <code>get_num()</code>没改<code>LL</code></p><h2 id="乘法逆元"><a class="markdownIt-Anchor" href="#乘法逆元"></a> 乘法逆元</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LL n,p;cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>%p;cout&lt;&lt;inv[<span class="number">1</span>]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">inv[i]=(p-p/i)*inv[p%i]%p;<span class="comment">//由p%i+(p/i)*i=p开始</span></span><br><span class="line">cout&lt;&lt;inv[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h1><h2 id="kmp"><a class="markdownIt-Anchor" href="#kmp"></a> KMP</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">const</span> string &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = p.<span class="built_in">size</span>();</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j]) j++;</span><br><span class="line">        nxt[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">const</span> string &amp;s, <span class="keyword">const</span> string &amp;p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getNext</span>(p);</span><br><span class="line">    <span class="keyword">int</span> len1 = s.<span class="built_in">size</span>(), len2 = p.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len1; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j]) j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == len2) &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j = nxt[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>, charset = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> tot, root, child[N][charset], flag[N];</span><br><span class="line">    <span class="built_in">Trie</span>() &#123; <span class="built_in">clear</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(child, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(child));</span><br><span class="line">        <span class="built_in">memset</span>(flag, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(flag));</span><br><span class="line">        root = tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (child[now][x] == <span class="number">-1</span>) &#123;</span><br><span class="line">                child[now][x] = ++tot;</span><br><span class="line">                flag[now] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            now = child[now][x];</span><br><span class="line">        &#125;</span><br><span class="line">        flag[now] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询字典树中是否存在某个完整的字符串是s的前缀</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> string &amp;s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now = root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = s[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (child[now][x] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (flag[now]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            now = child[now][x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="stl"><a class="markdownIt-Anchor" href="#stl"></a> STL</h1><h2 id="map"><a class="markdownIt-Anchor" href="#map"></a> Map</h2><p><img src="https://blog-img-lei.oss-cn-beijing.aliyuncs.com/img/image-20200626165329321.png" alt="" /></p><h1 id="技巧"><a class="markdownIt-Anchor" href="#技巧"></a> 技巧</h1><h2 id="map初始化"><a class="markdownIt-Anchor" href="#map初始化"></a> MAP初始化</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function">map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; <span class="title">M1</span><span class="params">(&#123;&#123;<span class="string">&#x27;Q&#x27;</span>, <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;W&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;E&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;R&#x27;</span>, <span class="number">3</span>&#125;&#125;)</span></span>;</span><br><span class="line"><span class="comment">// 方法二：采用C++11新特性：</span></span><br><span class="line"><span class="comment">// C++11 还把初始化列表的概念绑定到了类型上，并将其称之为 std::initializer_list，允许构造函数或其他函数像参数一样使用初始化列表，</span></span><br><span class="line">map&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; M2&#123;&#123;<span class="string">&#x27;Q&#x27;</span>, <span class="number">0</span>&#125;, &#123;<span class="string">&#x27;W&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;E&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;R&#x27;</span>, <span class="number">3</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="split"><a class="markdownIt-Anchor" href="#split"></a> split</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;string&gt; <span class="title">split</span><span class="params">(<span class="keyword">const</span> string&amp; s, <span class="keyword">char</span> c)</span> </span>&#123;  <span class="comment">//分隔文件名</span></span><br><span class="line">    vector&lt;string&gt; res;</span><br><span class="line">    string tmp;</span><br><span class="line">    <span class="function">stringstream <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(ss, tmp, c)) res.<span class="built_in">push_back</span>(tmp);  <span class="comment">//res保存整体</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// std::vector&lt;std::string&gt; split(const std::string&amp; line, char c) &#123;</span></span><br><span class="line"><span class="comment">//     std::stringstream stm(line);</span></span><br><span class="line"><span class="comment">//     std::vector&lt;std::string&gt; ans;</span></span><br><span class="line"><span class="comment">//     std::string tmp;</span></span><br><span class="line"><span class="comment">//     while (std::getline(stm, tmp, c)) ans.push_back(tmp);</span></span><br><span class="line"><span class="comment">//     return ans;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序设计思维实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
